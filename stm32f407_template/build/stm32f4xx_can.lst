ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_can.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.CheckITStatus,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	CheckITStatus:
  27              	.LFB136:
  28              		.file 1 ".//FWLIB/src/stm32f4xx_can.c"
   1:.//FWLIB/src/stm32f4xx_can.c **** /**
   2:.//FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
   3:.//FWLIB/src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:.//FWLIB/src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:.//FWLIB/src/stm32f4xx_can.c ****   * @version V1.4.0
   6:.//FWLIB/src/stm32f4xx_can.c ****   * @date    04-August-2014
   7:.//FWLIB/src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.//FWLIB/src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:.//FWLIB/src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:.//FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:.//FWLIB/src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:.//FWLIB/src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:.//FWLIB/src/stm32f4xx_can.c ****   *           + Error management
  14:.//FWLIB/src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:.//FWLIB/src/stm32f4xx_can.c ****   *
  16:.//FWLIB/src/stm32f4xx_can.c **** @verbatim
  17:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  18:.//FWLIB/src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
  20:.//FWLIB/src/stm32f4xx_can.c ****     [..]
  21:.//FWLIB/src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:.//FWLIB/src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:.//FWLIB/src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:.//FWLIB/src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:.//FWLIB/src/stm32f4xx_can.c ****        
  26:.//FWLIB/src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:.//FWLIB/src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:.//FWLIB/src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:.//FWLIB/src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:.//FWLIB/src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 2


  31:.//FWLIB/src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:.//FWLIB/src/stm32f4xx_can.c ****              the function  GPIO_Init();
  33:.//FWLIB/src/stm32f4xx_can.c ****       
  34:.//FWLIB/src/stm32f4xx_can.c ****       (#) Initialise and configure the CAN using CAN_Init() and 
  35:.//FWLIB/src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:.//FWLIB/src/stm32f4xx_can.c ****                  
  37:.//FWLIB/src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:.//FWLIB/src/stm32f4xx_can.c ****            
  39:.//FWLIB/src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:.//FWLIB/src/stm32f4xx_can.c ****           function.
  41:.//FWLIB/src/stm32f4xx_can.c ****                  
  42:.//FWLIB/src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:.//FWLIB/src/stm32f4xx_can.c ****           function.  
  44:.//FWLIB/src/stm32f4xx_can.c ****               
  45:.//FWLIB/src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Recieve() function.
  46:.//FWLIB/src/stm32f4xx_can.c ****            
  47:.//FWLIB/src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:.//FWLIB/src/stm32f4xx_can.c ****                  
  49:.//FWLIB/src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:.//FWLIB/src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:.//FWLIB/src/stm32f4xx_can.c ****                      
  52:.//FWLIB/src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:.//FWLIB/src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:.//FWLIB/src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:.//FWLIB/src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:.//FWLIB/src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:.//FWLIB/src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:.//FWLIB/src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:.//FWLIB/src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:.//FWLIB/src/stm32f4xx_can.c **** 
  61:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
  62:.//FWLIB/src/stm32f4xx_can.c ****            
  63:.//FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************
  64:.//FWLIB/src/stm32f4xx_can.c ****   * @attention
  65:.//FWLIB/src/stm32f4xx_can.c ****   *
  66:.//FWLIB/src/stm32f4xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  67:.//FWLIB/src/stm32f4xx_can.c ****   *
  68:.//FWLIB/src/stm32f4xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  69:.//FWLIB/src/stm32f4xx_can.c ****   * You may not use this file except in compliance with the License.
  70:.//FWLIB/src/stm32f4xx_can.c ****   * You may obtain a copy of the License at:
  71:.//FWLIB/src/stm32f4xx_can.c ****   *
  72:.//FWLIB/src/stm32f4xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  73:.//FWLIB/src/stm32f4xx_can.c ****   *
  74:.//FWLIB/src/stm32f4xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  75:.//FWLIB/src/stm32f4xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  76:.//FWLIB/src/stm32f4xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  77:.//FWLIB/src/stm32f4xx_can.c ****   * See the License for the specific language governing permissions and
  78:.//FWLIB/src/stm32f4xx_can.c ****   * limitations under the License.
  79:.//FWLIB/src/stm32f4xx_can.c ****   *
  80:.//FWLIB/src/stm32f4xx_can.c ****   ******************************************************************************  
  81:.//FWLIB/src/stm32f4xx_can.c ****   */
  82:.//FWLIB/src/stm32f4xx_can.c **** 
  83:.//FWLIB/src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  84:.//FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  85:.//FWLIB/src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  86:.//FWLIB/src/stm32f4xx_can.c **** 
  87:.//FWLIB/src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 3


  88:.//FWLIB/src/stm32f4xx_can.c ****   * @{
  89:.//FWLIB/src/stm32f4xx_can.c ****   */
  90:.//FWLIB/src/stm32f4xx_can.c **** 
  91:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN 
  92:.//FWLIB/src/stm32f4xx_can.c ****   * @brief CAN driver modules
  93:.//FWLIB/src/stm32f4xx_can.c ****   * @{
  94:.//FWLIB/src/stm32f4xx_can.c ****   */ 
  95:.//FWLIB/src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  96:.//FWLIB/src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  97:.//FWLIB/src/stm32f4xx_can.c **** 
  98:.//FWLIB/src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  99:.//FWLIB/src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
 100:.//FWLIB/src/stm32f4xx_can.c **** 
 101:.//FWLIB/src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
 102:.//FWLIB/src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
 103:.//FWLIB/src/stm32f4xx_can.c **** 
 104:.//FWLIB/src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
 105:.//FWLIB/src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
 106:.//FWLIB/src/stm32f4xx_can.c **** 
 107:.//FWLIB/src/stm32f4xx_can.c **** /* Time out for INAK bit */
 108:.//FWLIB/src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 109:.//FWLIB/src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 110:.//FWLIB/src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 111:.//FWLIB/src/stm32f4xx_can.c **** 
 112:.//FWLIB/src/stm32f4xx_can.c **** /* Flags in TSR register */
 113:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 114:.//FWLIB/src/stm32f4xx_can.c **** /* Flags in RF1R register */
 115:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 116:.//FWLIB/src/stm32f4xx_can.c **** /* Flags in RF0R register */
 117:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 118:.//FWLIB/src/stm32f4xx_can.c **** /* Flags in MSR register */
 119:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 120:.//FWLIB/src/stm32f4xx_can.c **** /* Flags in ESR register */
 121:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 122:.//FWLIB/src/stm32f4xx_can.c **** 
 123:.//FWLIB/src/stm32f4xx_can.c **** /* Mailboxes definition */
 124:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 125:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 126:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 127:.//FWLIB/src/stm32f4xx_can.c **** 
 128:.//FWLIB/src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 129:.//FWLIB/src/stm32f4xx_can.c **** 
 130:.//FWLIB/src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 131:.//FWLIB/src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 132:.//FWLIB/src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 133:.//FWLIB/src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 134:.//FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 135:.//FWLIB/src/stm32f4xx_can.c **** 
 136:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 137:.//FWLIB/src/stm32f4xx_can.c ****   * @{
 138:.//FWLIB/src/stm32f4xx_can.c ****   */
 139:.//FWLIB/src/stm32f4xx_can.c **** 
 140:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 141:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 142:.//FWLIB/src/stm32f4xx_can.c ****  *
 143:.//FWLIB/src/stm32f4xx_can.c **** @verbatim    
 144:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 4


 145:.//FWLIB/src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 146:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 147:.//FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 148:.//FWLIB/src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 149:.//FWLIB/src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 150:.//FWLIB/src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 151:.//FWLIB/src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
 152:.//FWLIB/src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 153:.//FWLIB/src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 154:.//FWLIB/src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 155:.//FWLIB/src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 156:.//FWLIB/src/stm32f4xx_can.c ****    
 157:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
 158:.//FWLIB/src/stm32f4xx_can.c ****   * @{
 159:.//FWLIB/src/stm32f4xx_can.c ****   */
 160:.//FWLIB/src/stm32f4xx_can.c ****   
 161:.//FWLIB/src/stm32f4xx_can.c **** /**
 162:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 163:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 164:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None.
 165:.//FWLIB/src/stm32f4xx_can.c ****   */
 166:.//FWLIB/src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 167:.//FWLIB/src/stm32f4xx_can.c **** {
 168:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 169:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 170:.//FWLIB/src/stm32f4xx_can.c ****  
 171:.//FWLIB/src/stm32f4xx_can.c ****   if (CANx == CAN1)
 172:.//FWLIB/src/stm32f4xx_can.c ****   {
 173:.//FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 174:.//FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 175:.//FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 176:.//FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 177:.//FWLIB/src/stm32f4xx_can.c ****   }
 178:.//FWLIB/src/stm32f4xx_can.c ****   else
 179:.//FWLIB/src/stm32f4xx_can.c ****   {  
 180:.//FWLIB/src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 181:.//FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 182:.//FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 183:.//FWLIB/src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 184:.//FWLIB/src/stm32f4xx_can.c ****   }
 185:.//FWLIB/src/stm32f4xx_can.c **** }
 186:.//FWLIB/src/stm32f4xx_can.c **** 
 187:.//FWLIB/src/stm32f4xx_can.c **** /**
 188:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 189:.//FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 190:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 191:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 192:.//FWLIB/src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 193:.//FWLIB/src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 194:.//FWLIB/src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 195:.//FWLIB/src/stm32f4xx_can.c ****   */
 196:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 197:.//FWLIB/src/stm32f4xx_can.c **** {
 198:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 199:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 200:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 201:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 5


 202:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 203:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 204:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 205:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 206:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 207:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 208:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 209:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 210:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 211:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 212:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 213:.//FWLIB/src/stm32f4xx_can.c **** 
 214:.//FWLIB/src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 215:.//FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 216:.//FWLIB/src/stm32f4xx_can.c **** 
 217:.//FWLIB/src/stm32f4xx_can.c ****   /* Request initialisation */
 218:.//FWLIB/src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 219:.//FWLIB/src/stm32f4xx_can.c **** 
 220:.//FWLIB/src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 221:.//FWLIB/src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 222:.//FWLIB/src/stm32f4xx_can.c ****   {
 223:.//FWLIB/src/stm32f4xx_can.c ****     wait_ack++;
 224:.//FWLIB/src/stm32f4xx_can.c ****   }
 225:.//FWLIB/src/stm32f4xx_can.c **** 
 226:.//FWLIB/src/stm32f4xx_can.c ****   /* Check acknowledge */
 227:.//FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 228:.//FWLIB/src/stm32f4xx_can.c ****   {
 229:.//FWLIB/src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 230:.//FWLIB/src/stm32f4xx_can.c ****   }
 231:.//FWLIB/src/stm32f4xx_can.c ****   else 
 232:.//FWLIB/src/stm32f4xx_can.c ****   {
 233:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 234:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 235:.//FWLIB/src/stm32f4xx_can.c ****     {
 236:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 237:.//FWLIB/src/stm32f4xx_can.c ****     }
 238:.//FWLIB/src/stm32f4xx_can.c ****     else
 239:.//FWLIB/src/stm32f4xx_can.c ****     {
 240:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 241:.//FWLIB/src/stm32f4xx_can.c ****     }
 242:.//FWLIB/src/stm32f4xx_can.c **** 
 243:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 244:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 245:.//FWLIB/src/stm32f4xx_can.c ****     {
 246:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 247:.//FWLIB/src/stm32f4xx_can.c ****     }
 248:.//FWLIB/src/stm32f4xx_can.c ****     else
 249:.//FWLIB/src/stm32f4xx_can.c ****     {
 250:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 251:.//FWLIB/src/stm32f4xx_can.c ****     }
 252:.//FWLIB/src/stm32f4xx_can.c **** 
 253:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 254:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 255:.//FWLIB/src/stm32f4xx_can.c ****     {
 256:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 257:.//FWLIB/src/stm32f4xx_can.c ****     }
 258:.//FWLIB/src/stm32f4xx_can.c ****     else
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 6


 259:.//FWLIB/src/stm32f4xx_can.c ****     {
 260:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 261:.//FWLIB/src/stm32f4xx_can.c ****     }
 262:.//FWLIB/src/stm32f4xx_can.c **** 
 263:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 264:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 265:.//FWLIB/src/stm32f4xx_can.c ****     {
 266:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 267:.//FWLIB/src/stm32f4xx_can.c ****     }
 268:.//FWLIB/src/stm32f4xx_can.c ****     else
 269:.//FWLIB/src/stm32f4xx_can.c ****     {
 270:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 271:.//FWLIB/src/stm32f4xx_can.c ****     }
 272:.//FWLIB/src/stm32f4xx_can.c **** 
 273:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 274:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 275:.//FWLIB/src/stm32f4xx_can.c ****     {
 276:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 277:.//FWLIB/src/stm32f4xx_can.c ****     }
 278:.//FWLIB/src/stm32f4xx_can.c ****     else
 279:.//FWLIB/src/stm32f4xx_can.c ****     {
 280:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 281:.//FWLIB/src/stm32f4xx_can.c ****     }
 282:.//FWLIB/src/stm32f4xx_can.c **** 
 283:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 284:.//FWLIB/src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 285:.//FWLIB/src/stm32f4xx_can.c ****     {
 286:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 287:.//FWLIB/src/stm32f4xx_can.c ****     }
 288:.//FWLIB/src/stm32f4xx_can.c ****     else
 289:.//FWLIB/src/stm32f4xx_can.c ****     {
 290:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 291:.//FWLIB/src/stm32f4xx_can.c ****     }
 292:.//FWLIB/src/stm32f4xx_can.c **** 
 293:.//FWLIB/src/stm32f4xx_can.c ****     /* Set the bit timing register */
 294:.//FWLIB/src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 295:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 296:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 297:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 298:.//FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 299:.//FWLIB/src/stm32f4xx_can.c **** 
 300:.//FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation */
 301:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 302:.//FWLIB/src/stm32f4xx_can.c **** 
 303:.//FWLIB/src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 304:.//FWLIB/src/stm32f4xx_can.c ****    wait_ack = 0;
 305:.//FWLIB/src/stm32f4xx_can.c **** 
 306:.//FWLIB/src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 307:.//FWLIB/src/stm32f4xx_can.c ****    {
 308:.//FWLIB/src/stm32f4xx_can.c ****      wait_ack++;
 309:.//FWLIB/src/stm32f4xx_can.c ****    }
 310:.//FWLIB/src/stm32f4xx_can.c **** 
 311:.//FWLIB/src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 312:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 313:.//FWLIB/src/stm32f4xx_can.c ****     {
 314:.//FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 315:.//FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 7


 316:.//FWLIB/src/stm32f4xx_can.c ****     else
 317:.//FWLIB/src/stm32f4xx_can.c ****     {
 318:.//FWLIB/src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 319:.//FWLIB/src/stm32f4xx_can.c ****     }
 320:.//FWLIB/src/stm32f4xx_can.c ****   }
 321:.//FWLIB/src/stm32f4xx_can.c **** 
 322:.//FWLIB/src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 323:.//FWLIB/src/stm32f4xx_can.c ****   return InitStatus;
 324:.//FWLIB/src/stm32f4xx_can.c **** }
 325:.//FWLIB/src/stm32f4xx_can.c **** 
 326:.//FWLIB/src/stm32f4xx_can.c **** /**
 327:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 328:.//FWLIB/src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 329:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 330:.//FWLIB/src/stm32f4xx_can.c ****   *         contains the configuration information.
 331:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 332:.//FWLIB/src/stm32f4xx_can.c ****   */
 333:.//FWLIB/src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 334:.//FWLIB/src/stm32f4xx_can.c **** {
 335:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 336:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 337:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 338:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 339:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 340:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 341:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 342:.//FWLIB/src/stm32f4xx_can.c **** 
 343:.//FWLIB/src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 344:.//FWLIB/src/stm32f4xx_can.c **** 
 345:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 346:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 347:.//FWLIB/src/stm32f4xx_can.c **** 
 348:.//FWLIB/src/stm32f4xx_can.c ****   /* Filter Deactivation */
 349:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 350:.//FWLIB/src/stm32f4xx_can.c **** 
 351:.//FWLIB/src/stm32f4xx_can.c ****   /* Filter Scale */
 352:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 353:.//FWLIB/src/stm32f4xx_can.c ****   {
 354:.//FWLIB/src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 355:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 356:.//FWLIB/src/stm32f4xx_can.c **** 
 357:.//FWLIB/src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 358:.//FWLIB/src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 359:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 360:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 361:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 362:.//FWLIB/src/stm32f4xx_can.c **** 
 363:.//FWLIB/src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 364:.//FWLIB/src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 365:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 366:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 367:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 368:.//FWLIB/src/stm32f4xx_can.c ****   }
 369:.//FWLIB/src/stm32f4xx_can.c **** 
 370:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 371:.//FWLIB/src/stm32f4xx_can.c ****   {
 372:.//FWLIB/src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 8


 373:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 374:.//FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 375:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 376:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 377:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 378:.//FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 379:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 380:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 381:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 382:.//FWLIB/src/stm32f4xx_can.c ****   }
 383:.//FWLIB/src/stm32f4xx_can.c **** 
 384:.//FWLIB/src/stm32f4xx_can.c ****   /* Filter Mode */
 385:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 386:.//FWLIB/src/stm32f4xx_can.c ****   {
 387:.//FWLIB/src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 388:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 389:.//FWLIB/src/stm32f4xx_can.c ****   }
 390:.//FWLIB/src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 391:.//FWLIB/src/stm32f4xx_can.c ****   {
 392:.//FWLIB/src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 393:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 394:.//FWLIB/src/stm32f4xx_can.c ****   }
 395:.//FWLIB/src/stm32f4xx_can.c **** 
 396:.//FWLIB/src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 397:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 398:.//FWLIB/src/stm32f4xx_can.c ****   {
 399:.//FWLIB/src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 400:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 401:.//FWLIB/src/stm32f4xx_can.c ****   }
 402:.//FWLIB/src/stm32f4xx_can.c **** 
 403:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 404:.//FWLIB/src/stm32f4xx_can.c ****   {
 405:.//FWLIB/src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 406:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 407:.//FWLIB/src/stm32f4xx_can.c ****   }
 408:.//FWLIB/src/stm32f4xx_can.c ****   
 409:.//FWLIB/src/stm32f4xx_can.c ****   /* Filter activation */
 410:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 411:.//FWLIB/src/stm32f4xx_can.c ****   {
 412:.//FWLIB/src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 413:.//FWLIB/src/stm32f4xx_can.c ****   }
 414:.//FWLIB/src/stm32f4xx_can.c **** 
 415:.//FWLIB/src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 416:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 417:.//FWLIB/src/stm32f4xx_can.c **** }
 418:.//FWLIB/src/stm32f4xx_can.c **** 
 419:.//FWLIB/src/stm32f4xx_can.c **** /**
 420:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 421:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 422:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 423:.//FWLIB/src/stm32f4xx_can.c ****   */
 424:.//FWLIB/src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 425:.//FWLIB/src/stm32f4xx_can.c **** {
 426:.//FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 427:.//FWLIB/src/stm32f4xx_can.c ****   
 428:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 429:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 9


 430:.//FWLIB/src/stm32f4xx_can.c ****   
 431:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 432:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 433:.//FWLIB/src/stm32f4xx_can.c ****   
 434:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 435:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 436:.//FWLIB/src/stm32f4xx_can.c ****   
 437:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 438:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 439:.//FWLIB/src/stm32f4xx_can.c ****   
 440:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 441:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 442:.//FWLIB/src/stm32f4xx_can.c ****   
 443:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 444:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 445:.//FWLIB/src/stm32f4xx_can.c ****   
 446:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 447:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 448:.//FWLIB/src/stm32f4xx_can.c ****   
 449:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 450:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 451:.//FWLIB/src/stm32f4xx_can.c ****   
 452:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 453:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 454:.//FWLIB/src/stm32f4xx_can.c ****   
 455:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 456:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 457:.//FWLIB/src/stm32f4xx_can.c ****   
 458:.//FWLIB/src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 459:.//FWLIB/src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 460:.//FWLIB/src/stm32f4xx_can.c **** }
 461:.//FWLIB/src/stm32f4xx_can.c **** 
 462:.//FWLIB/src/stm32f4xx_can.c **** /**
 463:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 464:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 465:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 466:.//FWLIB/src/stm32f4xx_can.c ****   */
 467:.//FWLIB/src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 468:.//FWLIB/src/stm32f4xx_can.c **** {
 469:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 470:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 471:.//FWLIB/src/stm32f4xx_can.c ****   
 472:.//FWLIB/src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 473:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 474:.//FWLIB/src/stm32f4xx_can.c ****   
 475:.//FWLIB/src/stm32f4xx_can.c ****   /* Select the start slave bank */
 476:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 477:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 478:.//FWLIB/src/stm32f4xx_can.c ****   
 479:.//FWLIB/src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 480:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 481:.//FWLIB/src/stm32f4xx_can.c **** }
 482:.//FWLIB/src/stm32f4xx_can.c **** 
 483:.//FWLIB/src/stm32f4xx_can.c **** /**
 484:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 485:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 486:.//FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 10


 487:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 488:.//FWLIB/src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 489:.//FWLIB/src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 490:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 491:.//FWLIB/src/stm32f4xx_can.c ****   */
 492:.//FWLIB/src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 493:.//FWLIB/src/stm32f4xx_can.c **** {
 494:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 495:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 496:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 497:.//FWLIB/src/stm32f4xx_can.c ****   
 498:.//FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 499:.//FWLIB/src/stm32f4xx_can.c ****   {
 500:.//FWLIB/src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 501:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 502:.//FWLIB/src/stm32f4xx_can.c ****   }
 503:.//FWLIB/src/stm32f4xx_can.c ****   else
 504:.//FWLIB/src/stm32f4xx_can.c ****   {
 505:.//FWLIB/src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 506:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 507:.//FWLIB/src/stm32f4xx_can.c ****   }
 508:.//FWLIB/src/stm32f4xx_can.c **** }
 509:.//FWLIB/src/stm32f4xx_can.c **** 
 510:.//FWLIB/src/stm32f4xx_can.c **** 
 511:.//FWLIB/src/stm32f4xx_can.c **** /**
 512:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 513:.//FWLIB/src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 514:.//FWLIB/src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 515:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 516:.//FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 517:.//FWLIB/src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 518:.//FWLIB/src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 519:.//FWLIB/src/stm32f4xx_can.c ****   *         in data byte 7. 
 520:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 521:.//FWLIB/src/stm32f4xx_can.c ****   */
 522:.//FWLIB/src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 523:.//FWLIB/src/stm32f4xx_can.c **** {
 524:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 525:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 526:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:.//FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 528:.//FWLIB/src/stm32f4xx_can.c ****   {
 529:.//FWLIB/src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 530:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 531:.//FWLIB/src/stm32f4xx_can.c **** 
 532:.//FWLIB/src/stm32f4xx_can.c ****     /* Set TGT bits */
 533:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 534:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 535:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 536:.//FWLIB/src/stm32f4xx_can.c ****   }
 537:.//FWLIB/src/stm32f4xx_can.c ****   else
 538:.//FWLIB/src/stm32f4xx_can.c ****   {
 539:.//FWLIB/src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 540:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 541:.//FWLIB/src/stm32f4xx_can.c **** 
 542:.//FWLIB/src/stm32f4xx_can.c ****     /* Reset TGT bits */
 543:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 11


 544:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 545:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 546:.//FWLIB/src/stm32f4xx_can.c ****   }
 547:.//FWLIB/src/stm32f4xx_can.c **** }
 548:.//FWLIB/src/stm32f4xx_can.c **** /**
 549:.//FWLIB/src/stm32f4xx_can.c ****   * @}
 550:.//FWLIB/src/stm32f4xx_can.c ****   */
 551:.//FWLIB/src/stm32f4xx_can.c **** 
 552:.//FWLIB/src/stm32f4xx_can.c **** 
 553:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 554:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 555:.//FWLIB/src/stm32f4xx_can.c ****  *
 556:.//FWLIB/src/stm32f4xx_can.c **** @verbatim    
 557:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 558:.//FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 559:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 560:.//FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 561:.//FWLIB/src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 562:.//FWLIB/src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 563:.//FWLIB/src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 564:.//FWLIB/src/stm32f4xx_can.c ****    
 565:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
 566:.//FWLIB/src/stm32f4xx_can.c ****   * @{
 567:.//FWLIB/src/stm32f4xx_can.c ****   */
 568:.//FWLIB/src/stm32f4xx_can.c **** 
 569:.//FWLIB/src/stm32f4xx_can.c **** /**
 570:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 571:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 572:.//FWLIB/src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 573:.//FWLIB/src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 574:.//FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 575:.//FWLIB/src/stm32f4xx_can.c ****   */
 576:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 577:.//FWLIB/src/stm32f4xx_can.c **** {
 578:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 579:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 580:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 581:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 582:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 583:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 584:.//FWLIB/src/stm32f4xx_can.c **** 
 585:.//FWLIB/src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 586:.//FWLIB/src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 587:.//FWLIB/src/stm32f4xx_can.c ****   {
 588:.//FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 589:.//FWLIB/src/stm32f4xx_can.c ****   }
 590:.//FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 591:.//FWLIB/src/stm32f4xx_can.c ****   {
 592:.//FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 593:.//FWLIB/src/stm32f4xx_can.c ****   }
 594:.//FWLIB/src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 595:.//FWLIB/src/stm32f4xx_can.c ****   {
 596:.//FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 597:.//FWLIB/src/stm32f4xx_can.c ****   }
 598:.//FWLIB/src/stm32f4xx_can.c ****   else
 599:.//FWLIB/src/stm32f4xx_can.c ****   {
 600:.//FWLIB/src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 12


 601:.//FWLIB/src/stm32f4xx_can.c ****   }
 602:.//FWLIB/src/stm32f4xx_can.c **** 
 603:.//FWLIB/src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 604:.//FWLIB/src/stm32f4xx_can.c ****   {
 605:.//FWLIB/src/stm32f4xx_can.c ****     /* Set up the Id */
 606:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 607:.//FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 608:.//FWLIB/src/stm32f4xx_can.c ****     {
 609:.//FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 610:.//FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 611:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 612:.//FWLIB/src/stm32f4xx_can.c ****     }
 613:.//FWLIB/src/stm32f4xx_can.c ****     else
 614:.//FWLIB/src/stm32f4xx_can.c ****     {
 615:.//FWLIB/src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 616:.//FWLIB/src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 617:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 618:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 619:.//FWLIB/src/stm32f4xx_can.c ****     }
 620:.//FWLIB/src/stm32f4xx_can.c ****     
 621:.//FWLIB/src/stm32f4xx_can.c ****     /* Set up the DLC */
 622:.//FWLIB/src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 623:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 624:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 625:.//FWLIB/src/stm32f4xx_can.c **** 
 626:.//FWLIB/src/stm32f4xx_can.c ****     /* Set up the data field */
 627:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 628:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 629:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 630:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 631:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 632:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 633:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 634:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 635:.//FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 636:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 637:.//FWLIB/src/stm32f4xx_can.c ****   }
 638:.//FWLIB/src/stm32f4xx_can.c ****   return transmit_mailbox;
 639:.//FWLIB/src/stm32f4xx_can.c **** }
 640:.//FWLIB/src/stm32f4xx_can.c **** 
 641:.//FWLIB/src/stm32f4xx_can.c **** /**
 642:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 643:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 644:.//FWLIB/src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 645:.//FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 646:.//FWLIB/src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 647:.//FWLIB/src/stm32f4xx_can.c ****   */
 648:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 649:.//FWLIB/src/stm32f4xx_can.c **** {
 650:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 651:.//FWLIB/src/stm32f4xx_can.c **** 
 652:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 653:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 654:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 655:.//FWLIB/src/stm32f4xx_can.c ****  
 656:.//FWLIB/src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 657:.//FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 13


 658:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 659:.//FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 660:.//FWLIB/src/stm32f4xx_can.c ****       break;
 661:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 662:.//FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 663:.//FWLIB/src/stm32f4xx_can.c ****       break;
 664:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 665:.//FWLIB/src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 666:.//FWLIB/src/stm32f4xx_can.c ****       break;
 667:.//FWLIB/src/stm32f4xx_can.c ****     default:
 668:.//FWLIB/src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 669:.//FWLIB/src/stm32f4xx_can.c ****       break;
 670:.//FWLIB/src/stm32f4xx_can.c ****   }
 671:.//FWLIB/src/stm32f4xx_can.c ****   switch (state)
 672:.//FWLIB/src/stm32f4xx_can.c ****   {
 673:.//FWLIB/src/stm32f4xx_can.c ****       /* transmit pending  */
 674:.//FWLIB/src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 675:.//FWLIB/src/stm32f4xx_can.c ****       break;
 676:.//FWLIB/src/stm32f4xx_can.c ****       /* transmit failed  */
 677:.//FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 678:.//FWLIB/src/stm32f4xx_can.c ****       break;
 679:.//FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 680:.//FWLIB/src/stm32f4xx_can.c ****       break;
 681:.//FWLIB/src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 682:.//FWLIB/src/stm32f4xx_can.c ****       break;
 683:.//FWLIB/src/stm32f4xx_can.c ****       /* transmit succeeded  */
 684:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 685:.//FWLIB/src/stm32f4xx_can.c ****       break;
 686:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 687:.//FWLIB/src/stm32f4xx_can.c ****       break;
 688:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 689:.//FWLIB/src/stm32f4xx_can.c ****       break;
 690:.//FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 691:.//FWLIB/src/stm32f4xx_can.c ****       break;
 692:.//FWLIB/src/stm32f4xx_can.c ****   }
 693:.//FWLIB/src/stm32f4xx_can.c ****   return (uint8_t) state;
 694:.//FWLIB/src/stm32f4xx_can.c **** }
 695:.//FWLIB/src/stm32f4xx_can.c **** 
 696:.//FWLIB/src/stm32f4xx_can.c **** /**
 697:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 698:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 699:.//FWLIB/src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 700:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 701:.//FWLIB/src/stm32f4xx_can.c ****   */
 702:.//FWLIB/src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 703:.//FWLIB/src/stm32f4xx_can.c **** {
 704:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 705:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 706:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 707:.//FWLIB/src/stm32f4xx_can.c ****   /* abort transmission */
 708:.//FWLIB/src/stm32f4xx_can.c ****   switch (Mailbox)
 709:.//FWLIB/src/stm32f4xx_can.c ****   {
 710:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 711:.//FWLIB/src/stm32f4xx_can.c ****       break;
 712:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 713:.//FWLIB/src/stm32f4xx_can.c ****       break;
 714:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 14


 715:.//FWLIB/src/stm32f4xx_can.c ****       break;
 716:.//FWLIB/src/stm32f4xx_can.c ****     default:
 717:.//FWLIB/src/stm32f4xx_can.c ****       break;
 718:.//FWLIB/src/stm32f4xx_can.c ****   }
 719:.//FWLIB/src/stm32f4xx_can.c **** }
 720:.//FWLIB/src/stm32f4xx_can.c **** /**
 721:.//FWLIB/src/stm32f4xx_can.c ****   * @}
 722:.//FWLIB/src/stm32f4xx_can.c ****   */
 723:.//FWLIB/src/stm32f4xx_can.c **** 
 724:.//FWLIB/src/stm32f4xx_can.c **** 
 725:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 726:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 727:.//FWLIB/src/stm32f4xx_can.c ****  *
 728:.//FWLIB/src/stm32f4xx_can.c **** @verbatim    
 729:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 730:.//FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 731:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 732:.//FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 733:.//FWLIB/src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 734:.//FWLIB/src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 735:.//FWLIB/src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 736:.//FWLIB/src/stm32f4xx_can.c ****    
 737:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
 738:.//FWLIB/src/stm32f4xx_can.c ****   * @{
 739:.//FWLIB/src/stm32f4xx_can.c ****   */
 740:.//FWLIB/src/stm32f4xx_can.c **** 
 741:.//FWLIB/src/stm32f4xx_can.c **** /**
 742:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 743:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 744:.//FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 745:.//FWLIB/src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 746:.//FWLIB/src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 747:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 748:.//FWLIB/src/stm32f4xx_can.c ****   */
 749:.//FWLIB/src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 750:.//FWLIB/src/stm32f4xx_can.c **** {
 751:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 752:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 753:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 754:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the Id */
 755:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 756:.//FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 757:.//FWLIB/src/stm32f4xx_can.c ****   {
 758:.//FWLIB/src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 759:.//FWLIB/src/stm32f4xx_can.c ****   }
 760:.//FWLIB/src/stm32f4xx_can.c ****   else
 761:.//FWLIB/src/stm32f4xx_can.c ****   {
 762:.//FWLIB/src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 763:.//FWLIB/src/stm32f4xx_can.c ****   }
 764:.//FWLIB/src/stm32f4xx_can.c ****   
 765:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 766:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 767:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 768:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 769:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 770:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 771:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 15


 772:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 773:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 774:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 775:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 776:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 777:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 778:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 779:.//FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 780:.//FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 781:.//FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 782:.//FWLIB/src/stm32f4xx_can.c ****   {
 783:.//FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 784:.//FWLIB/src/stm32f4xx_can.c ****   }
 785:.//FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 786:.//FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 787:.//FWLIB/src/stm32f4xx_can.c ****   {
 788:.//FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 789:.//FWLIB/src/stm32f4xx_can.c ****   }
 790:.//FWLIB/src/stm32f4xx_can.c **** }
 791:.//FWLIB/src/stm32f4xx_can.c **** 
 792:.//FWLIB/src/stm32f4xx_can.c **** /**
 793:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 794:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 795:.//FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 796:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
 797:.//FWLIB/src/stm32f4xx_can.c ****   */
 798:.//FWLIB/src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 799:.//FWLIB/src/stm32f4xx_can.c **** {
 800:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 801:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 802:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 803:.//FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO0 */
 804:.//FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 805:.//FWLIB/src/stm32f4xx_can.c ****   {
 806:.//FWLIB/src/stm32f4xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 807:.//FWLIB/src/stm32f4xx_can.c ****   }
 808:.//FWLIB/src/stm32f4xx_can.c ****   /* Release FIFO1 */
 809:.//FWLIB/src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 810:.//FWLIB/src/stm32f4xx_can.c ****   {
 811:.//FWLIB/src/stm32f4xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 812:.//FWLIB/src/stm32f4xx_can.c ****   }
 813:.//FWLIB/src/stm32f4xx_can.c **** }
 814:.//FWLIB/src/stm32f4xx_can.c **** 
 815:.//FWLIB/src/stm32f4xx_can.c **** /**
 816:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 817:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 818:.//FWLIB/src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 819:.//FWLIB/src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 820:.//FWLIB/src/stm32f4xx_can.c ****   */
 821:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 822:.//FWLIB/src/stm32f4xx_can.c **** {
 823:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 824:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 825:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 826:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 827:.//FWLIB/src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 828:.//FWLIB/src/stm32f4xx_can.c ****   {
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 16


 829:.//FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 830:.//FWLIB/src/stm32f4xx_can.c ****   }
 831:.//FWLIB/src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 832:.//FWLIB/src/stm32f4xx_can.c ****   {
 833:.//FWLIB/src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 834:.//FWLIB/src/stm32f4xx_can.c ****   }
 835:.//FWLIB/src/stm32f4xx_can.c ****   else
 836:.//FWLIB/src/stm32f4xx_can.c ****   {
 837:.//FWLIB/src/stm32f4xx_can.c ****     message_pending = 0;
 838:.//FWLIB/src/stm32f4xx_can.c ****   }
 839:.//FWLIB/src/stm32f4xx_can.c ****   return message_pending;
 840:.//FWLIB/src/stm32f4xx_can.c **** }
 841:.//FWLIB/src/stm32f4xx_can.c **** /**
 842:.//FWLIB/src/stm32f4xx_can.c ****   * @}
 843:.//FWLIB/src/stm32f4xx_can.c ****   */
 844:.//FWLIB/src/stm32f4xx_can.c **** 
 845:.//FWLIB/src/stm32f4xx_can.c **** 
 846:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 847:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 848:.//FWLIB/src/stm32f4xx_can.c ****  *
 849:.//FWLIB/src/stm32f4xx_can.c **** @verbatim    
 850:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
 851:.//FWLIB/src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 852:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
 853:.//FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
 854:.//FWLIB/src/stm32f4xx_can.c ****       (+) sleep mode
 855:.//FWLIB/src/stm32f4xx_can.c ****       (+) normal mode 
 856:.//FWLIB/src/stm32f4xx_can.c ****       (+) initialization mode
 857:.//FWLIB/src/stm32f4xx_can.c ****    
 858:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
 859:.//FWLIB/src/stm32f4xx_can.c ****   * @{
 860:.//FWLIB/src/stm32f4xx_can.c ****   */
 861:.//FWLIB/src/stm32f4xx_can.c ****   
 862:.//FWLIB/src/stm32f4xx_can.c ****   
 863:.//FWLIB/src/stm32f4xx_can.c **** /**
 864:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
 865:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 866:.//FWLIB/src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 867:.//FWLIB/src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
 868:.//FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 869:.//FWLIB/src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 870:.//FWLIB/src/stm32f4xx_can.c ****   */
 871:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 872:.//FWLIB/src/stm32f4xx_can.c **** {
 873:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 874:.//FWLIB/src/stm32f4xx_can.c ****   
 875:.//FWLIB/src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 876:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 877:.//FWLIB/src/stm32f4xx_can.c **** 
 878:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 879:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 880:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 881:.//FWLIB/src/stm32f4xx_can.c **** 
 882:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 883:.//FWLIB/src/stm32f4xx_can.c ****   {
 884:.//FWLIB/src/stm32f4xx_can.c ****     /* Request initialisation */
 885:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 17


 886:.//FWLIB/src/stm32f4xx_can.c **** 
 887:.//FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 888:.//FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 889:.//FWLIB/src/stm32f4xx_can.c ****     {
 890:.//FWLIB/src/stm32f4xx_can.c ****       timeout--;
 891:.//FWLIB/src/stm32f4xx_can.c ****     }
 892:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 893:.//FWLIB/src/stm32f4xx_can.c ****     {
 894:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 895:.//FWLIB/src/stm32f4xx_can.c ****     }
 896:.//FWLIB/src/stm32f4xx_can.c ****     else
 897:.//FWLIB/src/stm32f4xx_can.c ****     {
 898:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 899:.//FWLIB/src/stm32f4xx_can.c ****     }
 900:.//FWLIB/src/stm32f4xx_can.c ****   }
 901:.//FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 902:.//FWLIB/src/stm32f4xx_can.c ****   {
 903:.//FWLIB/src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 904:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 905:.//FWLIB/src/stm32f4xx_can.c **** 
 906:.//FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 907:.//FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 908:.//FWLIB/src/stm32f4xx_can.c ****     {
 909:.//FWLIB/src/stm32f4xx_can.c ****       timeout--;
 910:.//FWLIB/src/stm32f4xx_can.c ****     }
 911:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 912:.//FWLIB/src/stm32f4xx_can.c ****     {
 913:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 914:.//FWLIB/src/stm32f4xx_can.c ****     }
 915:.//FWLIB/src/stm32f4xx_can.c ****     else
 916:.//FWLIB/src/stm32f4xx_can.c ****     {
 917:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 918:.//FWLIB/src/stm32f4xx_can.c ****     }
 919:.//FWLIB/src/stm32f4xx_can.c ****   }
 920:.//FWLIB/src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 921:.//FWLIB/src/stm32f4xx_can.c ****   {
 922:.//FWLIB/src/stm32f4xx_can.c ****     /* Request Sleep mode */
 923:.//FWLIB/src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 924:.//FWLIB/src/stm32f4xx_can.c **** 
 925:.//FWLIB/src/stm32f4xx_can.c ****     /* Wait the acknowledge */
 926:.//FWLIB/src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 927:.//FWLIB/src/stm32f4xx_can.c ****     {
 928:.//FWLIB/src/stm32f4xx_can.c ****       timeout--;
 929:.//FWLIB/src/stm32f4xx_can.c ****     }
 930:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 931:.//FWLIB/src/stm32f4xx_can.c ****     {
 932:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 933:.//FWLIB/src/stm32f4xx_can.c ****     }
 934:.//FWLIB/src/stm32f4xx_can.c ****     else
 935:.//FWLIB/src/stm32f4xx_can.c ****     {
 936:.//FWLIB/src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 937:.//FWLIB/src/stm32f4xx_can.c ****     }
 938:.//FWLIB/src/stm32f4xx_can.c ****   }
 939:.//FWLIB/src/stm32f4xx_can.c ****   else
 940:.//FWLIB/src/stm32f4xx_can.c ****   {
 941:.//FWLIB/src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 942:.//FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 18


 943:.//FWLIB/src/stm32f4xx_can.c **** 
 944:.//FWLIB/src/stm32f4xx_can.c ****   return  (uint8_t) status;
 945:.//FWLIB/src/stm32f4xx_can.c **** }
 946:.//FWLIB/src/stm32f4xx_can.c **** 
 947:.//FWLIB/src/stm32f4xx_can.c **** /**
 948:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 949:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 950:.//FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 951:.//FWLIB/src/stm32f4xx_can.c ****   */
 952:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 953:.//FWLIB/src/stm32f4xx_can.c **** {
 954:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 955:.//FWLIB/src/stm32f4xx_can.c ****   
 956:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 957:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 958:.//FWLIB/src/stm32f4xx_can.c ****     
 959:.//FWLIB/src/stm32f4xx_can.c ****   /* Request Sleep mode */
 960:.//FWLIB/src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 961:.//FWLIB/src/stm32f4xx_can.c ****    
 962:.//FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 963:.//FWLIB/src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 964:.//FWLIB/src/stm32f4xx_can.c ****   {
 965:.//FWLIB/src/stm32f4xx_can.c ****     /* Sleep mode not entered */
 966:.//FWLIB/src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 967:.//FWLIB/src/stm32f4xx_can.c ****   }
 968:.//FWLIB/src/stm32f4xx_can.c ****   /* return sleep mode status */
 969:.//FWLIB/src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
 970:.//FWLIB/src/stm32f4xx_can.c **** }
 971:.//FWLIB/src/stm32f4xx_can.c **** 
 972:.//FWLIB/src/stm32f4xx_can.c **** /**
 973:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 974:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 975:.//FWLIB/src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 976:.//FWLIB/src/stm32f4xx_can.c ****   */
 977:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 978:.//FWLIB/src/stm32f4xx_can.c **** {
 979:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 980:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 981:.//FWLIB/src/stm32f4xx_can.c ****   
 982:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 983:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 984:.//FWLIB/src/stm32f4xx_can.c ****     
 985:.//FWLIB/src/stm32f4xx_can.c ****   /* Wake up request */
 986:.//FWLIB/src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 987:.//FWLIB/src/stm32f4xx_can.c ****     
 988:.//FWLIB/src/stm32f4xx_can.c ****   /* Sleep mode status */
 989:.//FWLIB/src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 990:.//FWLIB/src/stm32f4xx_can.c ****   {
 991:.//FWLIB/src/stm32f4xx_can.c ****    wait_slak--;
 992:.//FWLIB/src/stm32f4xx_can.c ****   }
 993:.//FWLIB/src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 994:.//FWLIB/src/stm32f4xx_can.c ****   {
 995:.//FWLIB/src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
 996:.//FWLIB/src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 997:.//FWLIB/src/stm32f4xx_can.c ****   }
 998:.//FWLIB/src/stm32f4xx_can.c ****   /* return wakeup status */
 999:.//FWLIB/src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 19


1000:.//FWLIB/src/stm32f4xx_can.c **** }
1001:.//FWLIB/src/stm32f4xx_can.c **** /**
1002:.//FWLIB/src/stm32f4xx_can.c ****   * @}
1003:.//FWLIB/src/stm32f4xx_can.c ****   */
1004:.//FWLIB/src/stm32f4xx_can.c **** 
1005:.//FWLIB/src/stm32f4xx_can.c **** 
1006:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1007:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1008:.//FWLIB/src/stm32f4xx_can.c ****  *
1009:.//FWLIB/src/stm32f4xx_can.c **** @verbatim    
1010:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1011:.//FWLIB/src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1012:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1013:.//FWLIB/src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1014:.//FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1015:.//FWLIB/src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1016:.//FWLIB/src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1017:.//FWLIB/src/stm32f4xx_can.c ****    
1018:.//FWLIB/src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1019:.//FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1020:.//FWLIB/src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1021:.//FWLIB/src/stm32f4xx_can.c ****                         
1022:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
1023:.//FWLIB/src/stm32f4xx_can.c ****   * @{
1024:.//FWLIB/src/stm32f4xx_can.c ****   */
1025:.//FWLIB/src/stm32f4xx_can.c ****   
1026:.//FWLIB/src/stm32f4xx_can.c **** /**
1027:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1028:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
1029:.//FWLIB/src/stm32f4xx_can.c ****   * @retval Error code: 
1030:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1031:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1032:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1033:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1034:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1035:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1036:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1037:.//FWLIB/src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1038:.//FWLIB/src/stm32f4xx_can.c ****   */
1039:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1040:.//FWLIB/src/stm32f4xx_can.c **** {
1041:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
1042:.//FWLIB/src/stm32f4xx_can.c ****   
1043:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1044:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1045:.//FWLIB/src/stm32f4xx_can.c ****   
1046:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the error code*/
1047:.//FWLIB/src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1048:.//FWLIB/src/stm32f4xx_can.c ****   
1049:.//FWLIB/src/stm32f4xx_can.c ****   /* Return the error code*/
1050:.//FWLIB/src/stm32f4xx_can.c ****   return errorcode;
1051:.//FWLIB/src/stm32f4xx_can.c **** }
1052:.//FWLIB/src/stm32f4xx_can.c **** 
1053:.//FWLIB/src/stm32f4xx_can.c **** /**
1054:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1055:.//FWLIB/src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1056:.//FWLIB/src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 20


1057:.//FWLIB/src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1058:.//FWLIB/src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1059:.//FWLIB/src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1060:.//FWLIB/src/stm32f4xx_can.c ****   *         error passive state.  
1061:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1062:.//FWLIB/src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1063:.//FWLIB/src/stm32f4xx_can.c ****   */
1064:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1065:.//FWLIB/src/stm32f4xx_can.c **** {
1066:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1067:.//FWLIB/src/stm32f4xx_can.c ****   
1068:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1069:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1070:.//FWLIB/src/stm32f4xx_can.c ****   
1071:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1072:.//FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1073:.//FWLIB/src/stm32f4xx_can.c ****   
1074:.//FWLIB/src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1075:.//FWLIB/src/stm32f4xx_can.c ****   return counter;
1076:.//FWLIB/src/stm32f4xx_can.c **** }
1077:.//FWLIB/src/stm32f4xx_can.c **** 
1078:.//FWLIB/src/stm32f4xx_can.c **** 
1079:.//FWLIB/src/stm32f4xx_can.c **** /**
1080:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1081:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1082:.//FWLIB/src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1083:.//FWLIB/src/stm32f4xx_can.c ****   */
1084:.//FWLIB/src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1085:.//FWLIB/src/stm32f4xx_can.c **** {
1086:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
1087:.//FWLIB/src/stm32f4xx_can.c ****   
1088:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1089:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1090:.//FWLIB/src/stm32f4xx_can.c ****   
1091:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1092:.//FWLIB/src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1093:.//FWLIB/src/stm32f4xx_can.c ****   
1094:.//FWLIB/src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1095:.//FWLIB/src/stm32f4xx_can.c ****   return counter;
1096:.//FWLIB/src/stm32f4xx_can.c **** }
1097:.//FWLIB/src/stm32f4xx_can.c **** /**
1098:.//FWLIB/src/stm32f4xx_can.c ****   * @}
1099:.//FWLIB/src/stm32f4xx_can.c ****   */
1100:.//FWLIB/src/stm32f4xx_can.c **** 
1101:.//FWLIB/src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1102:.//FWLIB/src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1103:.//FWLIB/src/stm32f4xx_can.c ****  *
1104:.//FWLIB/src/stm32f4xx_can.c **** @verbatim   
1105:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================
1106:.//FWLIB/src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1107:.//FWLIB/src/stm32f4xx_can.c ****  ===============================================================================  
1108:.//FWLIB/src/stm32f4xx_can.c **** 
1109:.//FWLIB/src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1110:.//FWLIB/src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1111:.//FWLIB/src/stm32f4xx_can.c ****   
1112:.//FWLIB/src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1113:.//FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 21


1114:.//FWLIB/src/stm32f4xx_can.c ****    
1115:.//FWLIB/src/stm32f4xx_can.c ****   *** Flags ***
1116:.//FWLIB/src/stm32f4xx_can.c ****   =============
1117:.//FWLIB/src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1118:.//FWLIB/src/stm32f4xx_can.c **** 
1119:.//FWLIB/src/stm32f4xx_can.c ****       (+) Transmit Flags
1120:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1121:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1122:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1123:.//FWLIB/src/stm32f4xx_can.c ****                                Set when when the last request (transmit or abort)
1124:.//FWLIB/src/stm32f4xx_can.c ****                                has been performed. 
1125:.//FWLIB/src/stm32f4xx_can.c **** 
1126:.//FWLIB/src/stm32f4xx_can.c ****       (+) Receive Flags
1127:.//FWLIB/src/stm32f4xx_can.c **** 
1128:.//FWLIB/src/stm32f4xx_can.c **** 
1129:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1130:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1131:.//FWLIB/src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1132:.//FWLIB/src/stm32f4xx_can.c ****                                FIFO.
1133:.//FWLIB/src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
1134:.//FWLIB/src/stm32f4xx_can.c **** 
1135:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1136:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1137:.//FWLIB/src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1138:.//FWLIB/src/stm32f4xx_can.c ****                                FIFO.                        
1139:.//FWLIB/src/stm32f4xx_can.c **** 
1140:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1141:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1142:.//FWLIB/src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1143:.//FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1144:.//FWLIB/src/stm32f4xx_can.c **** 
1145:.//FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1146:.//FWLIB/src/stm32f4xx_can.c **** 
1147:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1148:.//FWLIB/src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1149:.//FWLIB/src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1150:.//FWLIB/src/stm32f4xx_can.c ****         
1151:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1152:.//FWLIB/src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1153:.//FWLIB/src/stm32f4xx_can.c ****     
1154:.//FWLIB/src/stm32f4xx_can.c ****       (+) Error Flags
1155:.//FWLIB/src/stm32f4xx_can.c **** 
1156:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1157:.//FWLIB/src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1158:.//FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1159:.//FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1160:.//FWLIB/src/stm32f4xx_can.c ****                             
1161:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1162:.//FWLIB/src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1163:.//FWLIB/src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1164:.//FWLIB/src/stm32f4xx_can.c ****                                greater than 127).
1165:.//FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1166:.//FWLIB/src/stm32f4xx_can.c ****                              
1167:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1168:.//FWLIB/src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1169:.//FWLIB/src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1170:.//FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 22


1171:.//FWLIB/src/stm32f4xx_can.c ****                                    
1172:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1173:.//FWLIB/src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1174:.//FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1175:.//FWLIB/src/stm32f4xx_can.c ****                            
1176:.//FWLIB/src/stm32f4xx_can.c ****   *** Interrupts ***
1177:.//FWLIB/src/stm32f4xx_can.c ****   ==================
1178:.//FWLIB/src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1179:.//FWLIB/src/stm32f4xx_can.c ****   
1180:.//FWLIB/src/stm32f4xx_can.c ****       (+) Transmit interrupt
1181:.//FWLIB/src/stm32f4xx_can.c ****   
1182:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1183:.//FWLIB/src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1184:.//FWLIB/src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1185:.//FWLIB/src/stm32f4xx_can.c **** 
1186:.//FWLIB/src/stm32f4xx_can.c ****       (+) Receive Interrupts
1187:.//FWLIB/src/stm32f4xx_can.c ****          
1188:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1189:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1190:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1191:.//FWLIB/src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1192:.//FWLIB/src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1193:.//FWLIB/src/stm32f4xx_can.c ****                                only by hardware.
1194:.//FWLIB/src/stm32f4xx_can.c ****                 
1195:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1196:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1197:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1198:.//FWLIB/src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1199:.//FWLIB/src/stm32f4xx_can.c ****         
1200:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1201:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1202:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1203:.//FWLIB/src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1204:.//FWLIB/src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1205:.//FWLIB/src/stm32f4xx_can.c **** 
1206:.//FWLIB/src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1207:.//FWLIB/src/stm32f4xx_can.c ****          
1208:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1209:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1210:.//FWLIB/src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1211:.//FWLIB/src/stm32f4xx_can.c ****                                was in Sleep mode.
1212:.//FWLIB/src/stm32f4xx_can.c ****                                   
1213:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1214:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1215:.//FWLIB/src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1216:.//FWLIB/src/stm32f4xx_can.c **** 
1217:.//FWLIB/src/stm32f4xx_can.c ****       (+) Error Interrupts 
1218:.//FWLIB/src/stm32f4xx_can.c ****         
1219:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1220:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1221:.//FWLIB/src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1222:.//FWLIB/src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1223:.//FWLIB/src/stm32f4xx_can.c ****                                
1224:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1225:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1226:.//FWLIB/src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1227:.//FWLIB/src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 23


1228:.//FWLIB/src/stm32f4xx_can.c ****                           
1229:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1230:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1231:.//FWLIB/src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1232:.//FWLIB/src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1233:.//FWLIB/src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1234:.//FWLIB/src/stm32f4xx_can.c ****                                   
1235:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1236:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1237:.//FWLIB/src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1238:.//FWLIB/src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1239:.//FWLIB/src/stm32f4xx_can.c ****                           
1240:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1241:.//FWLIB/src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1242:.//FWLIB/src/stm32f4xx_can.c ****                                an error condition is pending.      
1243:.//FWLIB/src/stm32f4xx_can.c ****                       
1244:.//FWLIB/src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1245:.//FWLIB/src/stm32f4xx_can.c ****  
1246:.//FWLIB/src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1247:.//FWLIB/src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
1248:.//FWLIB/src/stm32f4xx_can.c ****   
1249:.//FWLIB/src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1250:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1251:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1252:.//FWLIB/src/stm32f4xx_can.c ****   
1253:.//FWLIB/src/stm32f4xx_can.c **** 
1254:.//FWLIB/src/stm32f4xx_can.c ****   
1255:.//FWLIB/src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1256:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1257:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1258:.//FWLIB/src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1259:.//FWLIB/src/stm32f4xx_can.c ****             (corresponding Flag).
1260:.//FWLIB/src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1261:.//FWLIB/src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1262:.//FWLIB/src/stm32f4xx_can.c ****   
1263:.//FWLIB/src/stm32f4xx_can.c **** @endverbatim
1264:.//FWLIB/src/stm32f4xx_can.c ****   * @{
1265:.//FWLIB/src/stm32f4xx_can.c ****   */ 
1266:.//FWLIB/src/stm32f4xx_can.c **** /**
1267:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1268:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1269:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1270:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: 
1271:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1272:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1273:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1274:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1275:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1276:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1277:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1278:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1279:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1280:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1281:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1282:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1283:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1284:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 24


1285:.//FWLIB/src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1286:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1287:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
1288:.//FWLIB/src/stm32f4xx_can.c ****   */
1289:.//FWLIB/src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1290:.//FWLIB/src/stm32f4xx_can.c **** {
1291:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1292:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1293:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1294:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1295:.//FWLIB/src/stm32f4xx_can.c **** 
1296:.//FWLIB/src/stm32f4xx_can.c ****   if (NewState != DISABLE)
1297:.//FWLIB/src/stm32f4xx_can.c ****   {
1298:.//FWLIB/src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1299:.//FWLIB/src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
1300:.//FWLIB/src/stm32f4xx_can.c ****   }
1301:.//FWLIB/src/stm32f4xx_can.c ****   else
1302:.//FWLIB/src/stm32f4xx_can.c ****   {
1303:.//FWLIB/src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1304:.//FWLIB/src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1305:.//FWLIB/src/stm32f4xx_can.c ****   }
1306:.//FWLIB/src/stm32f4xx_can.c **** }
1307:.//FWLIB/src/stm32f4xx_can.c **** /**
1308:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1309:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1310:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1311:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1312:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1313:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1314:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1315:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1316:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1317:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1318:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1319:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1320:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1321:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1322:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1323:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1324:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1325:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1326:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1327:.//FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1328:.//FWLIB/src/stm32f4xx_can.c ****   */
1329:.//FWLIB/src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1330:.//FWLIB/src/stm32f4xx_can.c **** {
1331:.//FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
1332:.//FWLIB/src/stm32f4xx_can.c ****   
1333:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1334:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1335:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1336:.//FWLIB/src/stm32f4xx_can.c ****   
1337:.//FWLIB/src/stm32f4xx_can.c **** 
1338:.//FWLIB/src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1339:.//FWLIB/src/stm32f4xx_can.c ****   { 
1340:.//FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1341:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 25


1342:.//FWLIB/src/stm32f4xx_can.c ****     { 
1343:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1344:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1345:.//FWLIB/src/stm32f4xx_can.c ****     }
1346:.//FWLIB/src/stm32f4xx_can.c ****     else
1347:.//FWLIB/src/stm32f4xx_can.c ****     { 
1348:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1349:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1350:.//FWLIB/src/stm32f4xx_can.c ****     }
1351:.//FWLIB/src/stm32f4xx_can.c ****   }
1352:.//FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1353:.//FWLIB/src/stm32f4xx_can.c ****   { 
1354:.//FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1355:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1356:.//FWLIB/src/stm32f4xx_can.c ****     { 
1357:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1358:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1359:.//FWLIB/src/stm32f4xx_can.c ****     }
1360:.//FWLIB/src/stm32f4xx_can.c ****     else
1361:.//FWLIB/src/stm32f4xx_can.c ****     { 
1362:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1363:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1364:.//FWLIB/src/stm32f4xx_can.c ****     }
1365:.//FWLIB/src/stm32f4xx_can.c ****   }
1366:.//FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1367:.//FWLIB/src/stm32f4xx_can.c ****   { 
1368:.//FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1369:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1370:.//FWLIB/src/stm32f4xx_can.c ****     { 
1371:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1372:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1373:.//FWLIB/src/stm32f4xx_can.c ****     }
1374:.//FWLIB/src/stm32f4xx_can.c ****     else
1375:.//FWLIB/src/stm32f4xx_can.c ****     { 
1376:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1377:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1378:.//FWLIB/src/stm32f4xx_can.c ****     }
1379:.//FWLIB/src/stm32f4xx_can.c ****   }
1380:.//FWLIB/src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1381:.//FWLIB/src/stm32f4xx_can.c ****   { 
1382:.//FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1383:.//FWLIB/src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1384:.//FWLIB/src/stm32f4xx_can.c ****     { 
1385:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1386:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1387:.//FWLIB/src/stm32f4xx_can.c ****     }
1388:.//FWLIB/src/stm32f4xx_can.c ****     else
1389:.//FWLIB/src/stm32f4xx_can.c ****     { 
1390:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1391:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1392:.//FWLIB/src/stm32f4xx_can.c ****     }
1393:.//FWLIB/src/stm32f4xx_can.c ****   }
1394:.//FWLIB/src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1395:.//FWLIB/src/stm32f4xx_can.c ****   { 
1396:.//FWLIB/src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1397:.//FWLIB/src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1398:.//FWLIB/src/stm32f4xx_can.c ****     { 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 26


1399:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1400:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = SET;
1401:.//FWLIB/src/stm32f4xx_can.c ****     }
1402:.//FWLIB/src/stm32f4xx_can.c ****     else
1403:.//FWLIB/src/stm32f4xx_can.c ****     { 
1404:.//FWLIB/src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1405:.//FWLIB/src/stm32f4xx_can.c ****       bitstatus = RESET;
1406:.//FWLIB/src/stm32f4xx_can.c ****     }
1407:.//FWLIB/src/stm32f4xx_can.c ****   }
1408:.//FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1409:.//FWLIB/src/stm32f4xx_can.c ****   return  bitstatus;
1410:.//FWLIB/src/stm32f4xx_can.c **** }
1411:.//FWLIB/src/stm32f4xx_can.c **** 
1412:.//FWLIB/src/stm32f4xx_can.c **** /**
1413:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1414:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1415:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1416:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1417:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1418:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1419:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1420:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1421:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1422:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1423:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1424:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1425:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1426:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1427:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
1428:.//FWLIB/src/stm32f4xx_can.c ****   */
1429:.//FWLIB/src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1430:.//FWLIB/src/stm32f4xx_can.c **** {
1431:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
1432:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1433:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1434:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1435:.//FWLIB/src/stm32f4xx_can.c ****   
1436:.//FWLIB/src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1437:.//FWLIB/src/stm32f4xx_can.c ****   {
1438:.//FWLIB/src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1439:.//FWLIB/src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1440:.//FWLIB/src/stm32f4xx_can.c ****   }
1441:.//FWLIB/src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1442:.//FWLIB/src/stm32f4xx_can.c ****   {
1443:.//FWLIB/src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1444:.//FWLIB/src/stm32f4xx_can.c **** 
1445:.//FWLIB/src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1446:.//FWLIB/src/stm32f4xx_can.c ****     {
1447:.//FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1448:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1449:.//FWLIB/src/stm32f4xx_can.c ****     }
1450:.//FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1451:.//FWLIB/src/stm32f4xx_can.c ****     {
1452:.//FWLIB/src/stm32f4xx_can.c ****       /* Receive Flags */
1453:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1454:.//FWLIB/src/stm32f4xx_can.c ****     }
1455:.//FWLIB/src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 27


1456:.//FWLIB/src/stm32f4xx_can.c ****     {
1457:.//FWLIB/src/stm32f4xx_can.c ****       /* Transmit Flags */
1458:.//FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1459:.//FWLIB/src/stm32f4xx_can.c ****     }
1460:.//FWLIB/src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1461:.//FWLIB/src/stm32f4xx_can.c ****     {
1462:.//FWLIB/src/stm32f4xx_can.c ****       /* Operating mode Flags */
1463:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1464:.//FWLIB/src/stm32f4xx_can.c ****     }
1465:.//FWLIB/src/stm32f4xx_can.c ****   }
1466:.//FWLIB/src/stm32f4xx_can.c **** }
1467:.//FWLIB/src/stm32f4xx_can.c **** 
1468:.//FWLIB/src/stm32f4xx_can.c **** /**
1469:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1470:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1471:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1472:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1473:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1474:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1475:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1476:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1477:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1478:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1479:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1480:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1481:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1482:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1483:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1484:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1485:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1486:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1487:.//FWLIB/src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1488:.//FWLIB/src/stm32f4xx_can.c ****   */
1489:.//FWLIB/src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1490:.//FWLIB/src/stm32f4xx_can.c **** {
1491:.//FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
1492:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1493:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1494:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1495:.//FWLIB/src/stm32f4xx_can.c ****   
1496:.//FWLIB/src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1497:.//FWLIB/src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1498:.//FWLIB/src/stm32f4xx_can.c ****  {
1499:.//FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1500:.//FWLIB/src/stm32f4xx_can.c ****     switch (CAN_IT)
1501:.//FWLIB/src/stm32f4xx_can.c ****     {
1502:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_TME:
1503:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1504:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1505:.//FWLIB/src/stm32f4xx_can.c ****         break;
1506:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1507:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1508:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1509:.//FWLIB/src/stm32f4xx_can.c ****         break;
1510:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1511:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1512:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 28


1513:.//FWLIB/src/stm32f4xx_can.c ****         break;
1514:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1515:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1516:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1517:.//FWLIB/src/stm32f4xx_can.c ****         break;
1518:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1519:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1520:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1521:.//FWLIB/src/stm32f4xx_can.c ****         break;
1522:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1523:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1524:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1525:.//FWLIB/src/stm32f4xx_can.c ****         break;
1526:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1527:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1528:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1529:.//FWLIB/src/stm32f4xx_can.c ****         break;
1530:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1531:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1532:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1533:.//FWLIB/src/stm32f4xx_can.c ****         break;
1534:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1535:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1536:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1537:.//FWLIB/src/stm32f4xx_can.c ****         break;
1538:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1539:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1540:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1541:.//FWLIB/src/stm32f4xx_can.c ****         break;
1542:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1543:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1544:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1545:.//FWLIB/src/stm32f4xx_can.c ****         break;
1546:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1547:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1548:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1549:.//FWLIB/src/stm32f4xx_can.c ****         break;
1550:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1551:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1552:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1553:.//FWLIB/src/stm32f4xx_can.c ****         break;
1554:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1555:.//FWLIB/src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1556:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1557:.//FWLIB/src/stm32f4xx_can.c ****         break;
1558:.//FWLIB/src/stm32f4xx_can.c ****       default:
1559:.//FWLIB/src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1560:.//FWLIB/src/stm32f4xx_can.c ****         itstatus = RESET;
1561:.//FWLIB/src/stm32f4xx_can.c ****         break;
1562:.//FWLIB/src/stm32f4xx_can.c ****     }
1563:.//FWLIB/src/stm32f4xx_can.c ****   }
1564:.//FWLIB/src/stm32f4xx_can.c ****   else
1565:.//FWLIB/src/stm32f4xx_can.c ****   {
1566:.//FWLIB/src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1567:.//FWLIB/src/stm32f4xx_can.c ****     itstatus  = RESET;
1568:.//FWLIB/src/stm32f4xx_can.c ****   }
1569:.//FWLIB/src/stm32f4xx_can.c ****   
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 29


1570:.//FWLIB/src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1571:.//FWLIB/src/stm32f4xx_can.c ****   return  itstatus;
1572:.//FWLIB/src/stm32f4xx_can.c **** }
1573:.//FWLIB/src/stm32f4xx_can.c **** 
1574:.//FWLIB/src/stm32f4xx_can.c **** /**
1575:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1576:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1577:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1578:.//FWLIB/src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1579:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1580:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1581:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1582:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1583:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1584:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1585:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1586:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1587:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1588:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1589:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1590:.//FWLIB/src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1591:.//FWLIB/src/stm32f4xx_can.c ****   * @retval None
1592:.//FWLIB/src/stm32f4xx_can.c ****   */
1593:.//FWLIB/src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1594:.//FWLIB/src/stm32f4xx_can.c **** {
1595:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
1596:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1597:.//FWLIB/src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1598:.//FWLIB/src/stm32f4xx_can.c **** 
1599:.//FWLIB/src/stm32f4xx_can.c ****   switch (CAN_IT)
1600:.//FWLIB/src/stm32f4xx_can.c ****   {
1601:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_TME:
1602:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1603:.//FWLIB/src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1604:.//FWLIB/src/stm32f4xx_can.c ****       break;
1605:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1606:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1607:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1608:.//FWLIB/src/stm32f4xx_can.c ****       break;
1609:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1610:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1611:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1612:.//FWLIB/src/stm32f4xx_can.c ****       break;
1613:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1614:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1615:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1616:.//FWLIB/src/stm32f4xx_can.c ****       break;
1617:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1618:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1619:.//FWLIB/src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1620:.//FWLIB/src/stm32f4xx_can.c ****       break;
1621:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1622:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1623:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1624:.//FWLIB/src/stm32f4xx_can.c ****       break;
1625:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1626:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 30


1627:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1628:.//FWLIB/src/stm32f4xx_can.c ****       break;
1629:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1630:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1631:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1632:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1633:.//FWLIB/src/stm32f4xx_can.c ****       break;
1634:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1635:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1636:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1637:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1638:.//FWLIB/src/stm32f4xx_can.c ****       break;
1639:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1640:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1641:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1642:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1643:.//FWLIB/src/stm32f4xx_can.c ****        break;
1644:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1645:.//FWLIB/src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1646:.//FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1647:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1648:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1649:.//FWLIB/src/stm32f4xx_can.c ****       break;
1650:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1651:.//FWLIB/src/stm32f4xx_can.c ****       /*Clear LEC bits */
1652:.//FWLIB/src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1653:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1654:.//FWLIB/src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1655:.//FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1656:.//FWLIB/src/stm32f4xx_can.c ****        break;
1657:.//FWLIB/src/stm32f4xx_can.c ****     default:
1658:.//FWLIB/src/stm32f4xx_can.c ****        break;
1659:.//FWLIB/src/stm32f4xx_can.c ****    }
1660:.//FWLIB/src/stm32f4xx_can.c **** }
1661:.//FWLIB/src/stm32f4xx_can.c ****  /**
1662:.//FWLIB/src/stm32f4xx_can.c ****   * @}
1663:.//FWLIB/src/stm32f4xx_can.c ****   */
1664:.//FWLIB/src/stm32f4xx_can.c **** 
1665:.//FWLIB/src/stm32f4xx_can.c **** /**
1666:.//FWLIB/src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1667:.//FWLIB/src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1668:.//FWLIB/src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1669:.//FWLIB/src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1670:.//FWLIB/src/stm32f4xx_can.c ****   */
1671:.//FWLIB/src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1672:.//FWLIB/src/stm32f4xx_can.c **** {
  29              		.loc 1 1672 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1673:.//FWLIB/src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
1674:.//FWLIB/src/stm32f4xx_can.c ****   
1675:.//FWLIB/src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  35              		.loc 1 1675 0
  36 0000 0842     		tst	r0, r1
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 31


  37 0002 01D0     		beq	.L3
1676:.//FWLIB/src/stm32f4xx_can.c ****   {
1677:.//FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is set */
1678:.//FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = SET;
  38              		.loc 1 1678 0
  39 0004 0120     		movs	r0, #1
  40              	.LVL1:
  41 0006 7047     		bx	lr
  42              	.LVL2:
  43              	.L3:
1679:.//FWLIB/src/stm32f4xx_can.c ****   }
1680:.//FWLIB/src/stm32f4xx_can.c ****   else
1681:.//FWLIB/src/stm32f4xx_can.c ****   {
1682:.//FWLIB/src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1683:.//FWLIB/src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
  44              		.loc 1 1683 0
  45 0008 0020     		movs	r0, #0
  46              	.LVL3:
1684:.//FWLIB/src/stm32f4xx_can.c ****   }
1685:.//FWLIB/src/stm32f4xx_can.c ****   return pendingbitstatus;
1686:.//FWLIB/src/stm32f4xx_can.c **** }
  47              		.loc 1 1686 0
  48 000a 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE136:
  52              		.section	.text.CAN_DeInit,"ax",%progbits
  53              		.align	2
  54              		.global	CAN_DeInit
  55              		.thumb
  56              		.thumb_func
  58              	CAN_DeInit:
  59              	.LFB112:
 167:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
  60              		.loc 1 167 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
 171:.//FWLIB/src/stm32f4xx_can.c ****   {
  70              		.loc 1 171 0
  71 0002 0C4B     		ldr	r3, .L8
  72 0004 9842     		cmp	r0, r3
  73 0006 0AD1     		bne	.L5
 174:.//FWLIB/src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
  74              		.loc 1 174 0
  75 0008 0121     		movs	r1, #1
  76 000a 4FF00070 		mov	r0, #33554432
  77              	.LVL5:
  78 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  79              	.LVL6:
 176:.//FWLIB/src/stm32f4xx_can.c ****   }
  80              		.loc 1 176 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 32


  81 0012 0021     		movs	r1, #0
  82 0014 4FF00070 		mov	r0, #33554432
  83 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  84              	.LVL7:
  85 001c 08BD     		pop	{r3, pc}
  86              	.LVL8:
  87              	.L5:
 181:.//FWLIB/src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  88              		.loc 1 181 0
  89 001e 0121     		movs	r1, #1
  90 0020 4FF08060 		mov	r0, #67108864
  91              	.LVL9:
  92 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93              	.LVL10:
 183:.//FWLIB/src/stm32f4xx_can.c ****   }
  94              		.loc 1 183 0
  95 0028 0021     		movs	r1, #0
  96 002a 4FF08060 		mov	r0, #67108864
  97 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              	.LVL11:
  99 0032 08BD     		pop	{r3, pc}
 100              	.L9:
 101              		.align	2
 102              	.L8:
 103 0034 00640040 		.word	1073767424
 104              		.cfi_endproc
 105              	.LFE112:
 107              		.section	.text.CAN_Init,"ax",%progbits
 108              		.align	2
 109              		.global	CAN_Init
 110              		.thumb
 111              		.thumb_func
 113              	CAN_Init:
 114              	.LFB113:
 197:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 115              		.loc 1 197 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL12:
 215:.//FWLIB/src/stm32f4xx_can.c **** 
 121              		.loc 1 215 0
 122 0000 0368     		ldr	r3, [r0]
 123 0002 23F00203 		bic	r3, r3, #2
 124 0006 0360     		str	r3, [r0]
 218:.//FWLIB/src/stm32f4xx_can.c **** 
 125              		.loc 1 218 0
 126 0008 0368     		ldr	r3, [r0]
 127 000a 43F00103 		orr	r3, r3, #1
 128 000e 0360     		str	r3, [r0]
 199:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 129              		.loc 1 199 0
 130 0010 0023     		movs	r3, #0
 221:.//FWLIB/src/stm32f4xx_can.c ****   {
 131              		.loc 1 221 0
 132 0012 00E0     		b	.L11
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 33


 133              	.LVL13:
 134              	.L13:
 223:.//FWLIB/src/stm32f4xx_can.c ****   }
 135              		.loc 1 223 0
 136 0014 0133     		adds	r3, r3, #1
 137              	.LVL14:
 138              	.L11:
 221:.//FWLIB/src/stm32f4xx_can.c ****   {
 139              		.loc 1 221 0
 140 0016 4268     		ldr	r2, [r0, #4]
 141 0018 12F0010F 		tst	r2, #1
 142 001c 03D1     		bne	.L12
 221:.//FWLIB/src/stm32f4xx_can.c ****   {
 143              		.loc 1 221 0 is_stmt 0 discriminator 1
 144 001e 4FF6FF72 		movw	r2, #65535
 145 0022 9342     		cmp	r3, r2
 146 0024 F6D1     		bne	.L13
 147              	.L12:
 227:.//FWLIB/src/stm32f4xx_can.c ****   {
 148              		.loc 1 227 0 is_stmt 1
 149 0026 4368     		ldr	r3, [r0, #4]
 150              	.LVL15:
 151 0028 13F0010F 		tst	r3, #1
 152 002c 6BD0     		beq	.L30
 234:.//FWLIB/src/stm32f4xx_can.c ****     {
 153              		.loc 1 234 0
 154 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 155 0030 012B     		cmp	r3, #1
 156 0032 04D1     		bne	.L15
 236:.//FWLIB/src/stm32f4xx_can.c ****     }
 157              		.loc 1 236 0
 158 0034 0368     		ldr	r3, [r0]
 159 0036 43F08003 		orr	r3, r3, #128
 160 003a 0360     		str	r3, [r0]
 161 003c 03E0     		b	.L16
 162              	.L15:
 240:.//FWLIB/src/stm32f4xx_can.c ****     }
 163              		.loc 1 240 0
 164 003e 0368     		ldr	r3, [r0]
 165 0040 23F08003 		bic	r3, r3, #128
 166 0044 0360     		str	r3, [r0]
 167              	.L16:
 244:.//FWLIB/src/stm32f4xx_can.c ****     {
 168              		.loc 1 244 0
 169 0046 CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 170 0048 012B     		cmp	r3, #1
 171 004a 04D1     		bne	.L17
 246:.//FWLIB/src/stm32f4xx_can.c ****     }
 172              		.loc 1 246 0
 173 004c 0368     		ldr	r3, [r0]
 174 004e 43F04003 		orr	r3, r3, #64
 175 0052 0360     		str	r3, [r0]
 176 0054 03E0     		b	.L18
 177              	.L17:
 250:.//FWLIB/src/stm32f4xx_can.c ****     }
 178              		.loc 1 250 0
 179 0056 0368     		ldr	r3, [r0]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 34


 180 0058 23F04003 		bic	r3, r3, #64
 181 005c 0360     		str	r3, [r0]
 182              	.L18:
 254:.//FWLIB/src/stm32f4xx_can.c ****     {
 183              		.loc 1 254 0
 184 005e 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 185 0060 012B     		cmp	r3, #1
 186 0062 04D1     		bne	.L19
 256:.//FWLIB/src/stm32f4xx_can.c ****     }
 187              		.loc 1 256 0
 188 0064 0368     		ldr	r3, [r0]
 189 0066 43F02003 		orr	r3, r3, #32
 190 006a 0360     		str	r3, [r0]
 191 006c 03E0     		b	.L20
 192              	.L19:
 260:.//FWLIB/src/stm32f4xx_can.c ****     }
 193              		.loc 1 260 0
 194 006e 0368     		ldr	r3, [r0]
 195 0070 23F02003 		bic	r3, r3, #32
 196 0074 0360     		str	r3, [r0]
 197              	.L20:
 264:.//FWLIB/src/stm32f4xx_can.c ****     {
 198              		.loc 1 264 0
 199 0076 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 200 0078 012B     		cmp	r3, #1
 201 007a 04D1     		bne	.L21
 266:.//FWLIB/src/stm32f4xx_can.c ****     }
 202              		.loc 1 266 0
 203 007c 0368     		ldr	r3, [r0]
 204 007e 43F01003 		orr	r3, r3, #16
 205 0082 0360     		str	r3, [r0]
 206 0084 03E0     		b	.L22
 207              	.L21:
 270:.//FWLIB/src/stm32f4xx_can.c ****     }
 208              		.loc 1 270 0
 209 0086 0368     		ldr	r3, [r0]
 210 0088 23F01003 		bic	r3, r3, #16
 211 008c 0360     		str	r3, [r0]
 212              	.L22:
 274:.//FWLIB/src/stm32f4xx_can.c ****     {
 213              		.loc 1 274 0
 214 008e 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 215 0090 012B     		cmp	r3, #1
 216 0092 04D1     		bne	.L23
 276:.//FWLIB/src/stm32f4xx_can.c ****     }
 217              		.loc 1 276 0
 218 0094 0368     		ldr	r3, [r0]
 219 0096 43F00803 		orr	r3, r3, #8
 220 009a 0360     		str	r3, [r0]
 221 009c 03E0     		b	.L24
 222              	.L23:
 280:.//FWLIB/src/stm32f4xx_can.c ****     }
 223              		.loc 1 280 0
 224 009e 0368     		ldr	r3, [r0]
 225 00a0 23F00803 		bic	r3, r3, #8
 226 00a4 0360     		str	r3, [r0]
 227              	.L24:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 35


 284:.//FWLIB/src/stm32f4xx_can.c ****     {
 228              		.loc 1 284 0
 229 00a6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 230 00a8 012B     		cmp	r3, #1
 231 00aa 04D1     		bne	.L25
 286:.//FWLIB/src/stm32f4xx_can.c ****     }
 232              		.loc 1 286 0
 233 00ac 0368     		ldr	r3, [r0]
 234 00ae 43F00403 		orr	r3, r3, #4
 235 00b2 0360     		str	r3, [r0]
 236 00b4 03E0     		b	.L26
 237              	.L25:
 290:.//FWLIB/src/stm32f4xx_can.c ****     }
 238              		.loc 1 290 0
 239 00b6 0368     		ldr	r3, [r0]
 240 00b8 23F00403 		bic	r3, r3, #4
 241 00bc 0360     		str	r3, [r0]
 242              	.L26:
 294:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 243              		.loc 1 294 0
 244 00be 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 295:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 245              		.loc 1 295 0
 246 00c0 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 247 00c2 1B06     		lsls	r3, r3, #24
 294:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 248              		.loc 1 294 0
 249 00c4 43EA8273 		orr	r3, r3, r2, lsl #30
 296:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 250              		.loc 1 296 0
 251 00c8 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 295:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 252              		.loc 1 295 0
 253 00ca 43EA0243 		orr	r3, r3, r2, lsl #16
 297:.//FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 254              		.loc 1 297 0
 255 00ce 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 296:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 256              		.loc 1 296 0
 257 00d0 43EA0253 		orr	r3, r3, r2, lsl #20
 298:.//FWLIB/src/stm32f4xx_can.c **** 
 258              		.loc 1 298 0
 259 00d4 0A88     		ldrh	r2, [r1]
 260 00d6 013A     		subs	r2, r2, #1
 297:.//FWLIB/src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 261              		.loc 1 297 0
 262 00d8 1343     		orrs	r3, r3, r2
 294:.//FWLIB/src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 263              		.loc 1 294 0
 264 00da C361     		str	r3, [r0, #28]
 301:.//FWLIB/src/stm32f4xx_can.c **** 
 265              		.loc 1 301 0
 266 00dc 0368     		ldr	r3, [r0]
 267 00de 23F00103 		bic	r3, r3, #1
 268 00e2 0360     		str	r3, [r0]
 269              	.LVL16:
 304:.//FWLIB/src/stm32f4xx_can.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 36


 270              		.loc 1 304 0
 271 00e4 0023     		movs	r3, #0
 306:.//FWLIB/src/stm32f4xx_can.c ****    {
 272              		.loc 1 306 0
 273 00e6 00E0     		b	.L27
 274              	.LVL17:
 275              	.L29:
 308:.//FWLIB/src/stm32f4xx_can.c ****    }
 276              		.loc 1 308 0
 277 00e8 0133     		adds	r3, r3, #1
 278              	.LVL18:
 279              	.L27:
 306:.//FWLIB/src/stm32f4xx_can.c ****    {
 280              		.loc 1 306 0
 281 00ea 4268     		ldr	r2, [r0, #4]
 282 00ec 12F0010F 		tst	r2, #1
 283 00f0 03D0     		beq	.L28
 306:.//FWLIB/src/stm32f4xx_can.c ****    {
 284              		.loc 1 306 0 is_stmt 0 discriminator 1
 285 00f2 4FF6FF72 		movw	r2, #65535
 286 00f6 9342     		cmp	r3, r2
 287 00f8 F6D1     		bne	.L29
 288              	.L28:
 312:.//FWLIB/src/stm32f4xx_can.c ****     {
 289              		.loc 1 312 0 is_stmt 1
 290 00fa 4368     		ldr	r3, [r0, #4]
 291              	.LVL19:
 292 00fc 13F0010F 		tst	r3, #1
 293 0100 03D0     		beq	.L31
 314:.//FWLIB/src/stm32f4xx_can.c ****     }
 294              		.loc 1 314 0
 295 0102 0020     		movs	r0, #0
 296              	.LVL20:
 297 0104 7047     		bx	lr
 298              	.LVL21:
 299              	.L30:
 229:.//FWLIB/src/stm32f4xx_can.c ****   }
 300              		.loc 1 229 0
 301 0106 0020     		movs	r0, #0
 302              	.LVL22:
 303 0108 7047     		bx	lr
 304              	.LVL23:
 305              	.L31:
 318:.//FWLIB/src/stm32f4xx_can.c ****     }
 306              		.loc 1 318 0
 307 010a 0120     		movs	r0, #1
 308              	.LVL24:
 324:.//FWLIB/src/stm32f4xx_can.c **** 
 309              		.loc 1 324 0
 310 010c 7047     		bx	lr
 311              		.cfi_endproc
 312              	.LFE113:
 314 010e 00BF     		.section	.text.CAN_FilterInit,"ax",%progbits
 315              		.align	2
 316              		.global	CAN_FilterInit
 317              		.thumb
 318              		.thumb_func
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 37


 320              	CAN_FilterInit:
 321              	.LFB114:
 334:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 322              		.loc 1 334 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327              	.LVL25:
 328 0000 70B4     		push	{r4, r5, r6}
 329              	.LCFI1:
 330              		.cfi_def_cfa_offset 12
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 6, -4
 334              	.LVL26:
 343:.//FWLIB/src/stm32f4xx_can.c **** 
 335              		.loc 1 343 0
 336 0002 837A     		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 337 0004 0122     		movs	r2, #1
 338 0006 02FA03F3 		lsl	r3, r2, r3
 339              	.LVL27:
 346:.//FWLIB/src/stm32f4xx_can.c **** 
 340              		.loc 1 346 0
 341 000a 394A     		ldr	r2, .L41
 342 000c D2F80012 		ldr	r1, [r2, #512]
 343 0010 41F00101 		orr	r1, r1, #1
 344 0014 C2F80012 		str	r1, [r2, #512]
 349:.//FWLIB/src/stm32f4xx_can.c **** 
 345              		.loc 1 349 0
 346 0018 D2F81C12 		ldr	r1, [r2, #540]
 347 001c DC43     		mvns	r4, r3
 348 001e 2140     		ands	r1, r1, r4
 349 0020 C2F81C12 		str	r1, [r2, #540]
 352:.//FWLIB/src/stm32f4xx_can.c ****   {
 350              		.loc 1 352 0
 351 0024 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 352 0026 B2B9     		cbnz	r2, .L33
 355:.//FWLIB/src/stm32f4xx_can.c **** 
 353              		.loc 1 355 0
 354 0028 314A     		ldr	r2, .L41
 355 002a D2F80C12 		ldr	r1, [r2, #524]
 356 002e 2140     		ands	r1, r1, r4
 357 0030 C2F80C12 		str	r1, [r2, #524]
 359:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 358              		.loc 1 359 0
 359 0034 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 360:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 360              		.loc 1 360 0
 361 0036 C688     		ldrh	r6, [r0, #6]
 361:.//FWLIB/src/stm32f4xx_can.c **** 
 362              		.loc 1 361 0
 363 0038 4588     		ldrh	r5, [r0, #2]
 360:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 364              		.loc 1 360 0
 365 003a 45EA0645 		orr	r5, r5, r6, lsl #16
 359:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 38


 366              		.loc 1 359 0
 367 003e 4831     		adds	r1, r1, #72
 368 0040 42F83150 		str	r5, [r2, r1, lsl #3]
 365:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 369              		.loc 1 365 0
 370 0044 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 366:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 371              		.loc 1 366 0
 372 0046 8688     		ldrh	r6, [r0, #4]
 367:.//FWLIB/src/stm32f4xx_can.c ****   }
 373              		.loc 1 367 0
 374 0048 0188     		ldrh	r1, [r0]
 366:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 375              		.loc 1 366 0
 376 004a 41EA0641 		orr	r1, r1, r6, lsl #16
 365:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 377              		.loc 1 365 0
 378 004e 4835     		adds	r5, r5, #72
 379 0050 02EBC502 		add	r2, r2, r5, lsl #3
 380 0054 5160     		str	r1, [r2, #4]
 381              	.L33:
 370:.//FWLIB/src/stm32f4xx_can.c ****   {
 382              		.loc 1 370 0
 383 0056 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 384 0058 012A     		cmp	r2, #1
 385 005a 16D1     		bne	.L34
 373:.//FWLIB/src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 386              		.loc 1 373 0
 387 005c 244A     		ldr	r2, .L41
 388 005e D2F80C12 		ldr	r1, [r2, #524]
 389 0062 1943     		orrs	r1, r1, r3
 390 0064 C2F80C12 		str	r1, [r2, #524]
 375:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 391              		.loc 1 375 0
 392 0068 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 376:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 393              		.loc 1 376 0
 394 006a 0688     		ldrh	r6, [r0]
 377:.//FWLIB/src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 395              		.loc 1 377 0
 396 006c 4588     		ldrh	r5, [r0, #2]
 376:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 397              		.loc 1 376 0
 398 006e 45EA0645 		orr	r5, r5, r6, lsl #16
 375:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 399              		.loc 1 375 0
 400 0072 4831     		adds	r1, r1, #72
 401 0074 42F83150 		str	r5, [r2, r1, lsl #3]
 379:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 402              		.loc 1 379 0
 403 0078 857A     		ldrb	r5, [r0, #10]	@ zero_extendqisi2
 380:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 404              		.loc 1 380 0
 405 007a 8688     		ldrh	r6, [r0, #4]
 381:.//FWLIB/src/stm32f4xx_can.c ****   }
 406              		.loc 1 381 0
 407 007c C188     		ldrh	r1, [r0, #6]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 39


 380:.//FWLIB/src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 408              		.loc 1 380 0
 409 007e 41EA0641 		orr	r1, r1, r6, lsl #16
 379:.//FWLIB/src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 410              		.loc 1 379 0
 411 0082 4835     		adds	r5, r5, #72
 412 0084 02EBC502 		add	r2, r2, r5, lsl #3
 413 0088 5160     		str	r1, [r2, #4]
 414              	.L34:
 385:.//FWLIB/src/stm32f4xx_can.c ****   {
 415              		.loc 1 385 0
 416 008a C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 417 008c 32B9     		cbnz	r2, .L35
 388:.//FWLIB/src/stm32f4xx_can.c ****   }
 418              		.loc 1 388 0
 419 008e 1849     		ldr	r1, .L41
 420 0090 D1F80422 		ldr	r2, [r1, #516]
 421 0094 2240     		ands	r2, r2, r4
 422 0096 C1F80422 		str	r2, [r1, #516]
 423 009a 05E0     		b	.L36
 424              	.L35:
 393:.//FWLIB/src/stm32f4xx_can.c ****   }
 425              		.loc 1 393 0
 426 009c 1449     		ldr	r1, .L41
 427 009e D1F80422 		ldr	r2, [r1, #516]
 428 00a2 1A43     		orrs	r2, r2, r3
 429 00a4 C1F80422 		str	r2, [r1, #516]
 430              	.L36:
 397:.//FWLIB/src/stm32f4xx_can.c ****   {
 431              		.loc 1 397 0
 432 00a8 0289     		ldrh	r2, [r0, #8]
 433 00aa 2AB9     		cbnz	r2, .L37
 400:.//FWLIB/src/stm32f4xx_can.c ****   }
 434              		.loc 1 400 0
 435 00ac 1049     		ldr	r1, .L41
 436 00ae D1F81422 		ldr	r2, [r1, #532]
 437 00b2 1440     		ands	r4, r4, r2
 438 00b4 C1F81442 		str	r4, [r1, #532]
 439              	.L37:
 403:.//FWLIB/src/stm32f4xx_can.c ****   {
 440              		.loc 1 403 0
 441 00b8 0289     		ldrh	r2, [r0, #8]
 442 00ba 012A     		cmp	r2, #1
 443 00bc 05D1     		bne	.L38
 406:.//FWLIB/src/stm32f4xx_can.c ****   }
 444              		.loc 1 406 0
 445 00be 0C49     		ldr	r1, .L41
 446 00c0 D1F81422 		ldr	r2, [r1, #532]
 447 00c4 1A43     		orrs	r2, r2, r3
 448 00c6 C1F81422 		str	r2, [r1, #532]
 449              	.L38:
 410:.//FWLIB/src/stm32f4xx_can.c ****   {
 450              		.loc 1 410 0
 451 00ca 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 452 00cc 012A     		cmp	r2, #1
 453 00ce 05D1     		bne	.L39
 412:.//FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 40


 454              		.loc 1 412 0
 455 00d0 0749     		ldr	r1, .L41
 456 00d2 D1F81C22 		ldr	r2, [r1, #540]
 457 00d6 1343     		orrs	r3, r3, r2
 458              	.LVL28:
 459 00d8 C1F81C32 		str	r3, [r1, #540]
 460              	.L39:
 416:.//FWLIB/src/stm32f4xx_can.c **** }
 461              		.loc 1 416 0
 462 00dc 044A     		ldr	r2, .L41
 463 00de D2F80032 		ldr	r3, [r2, #512]
 464 00e2 23F00103 		bic	r3, r3, #1
 465 00e6 C2F80032 		str	r3, [r2, #512]
 417:.//FWLIB/src/stm32f4xx_can.c **** 
 466              		.loc 1 417 0
 467 00ea 70BC     		pop	{r4, r5, r6}
 468              	.LCFI2:
 469              		.cfi_restore 6
 470              		.cfi_restore 5
 471              		.cfi_restore 4
 472              		.cfi_def_cfa_offset 0
 473 00ec 7047     		bx	lr
 474              	.L42:
 475 00ee 00BF     		.align	2
 476              	.L41:
 477 00f0 00640040 		.word	1073767424
 478              		.cfi_endproc
 479              	.LFE114:
 481              		.section	.text.CAN_StructInit,"ax",%progbits
 482              		.align	2
 483              		.global	CAN_StructInit
 484              		.thumb
 485              		.thumb_func
 487              	CAN_StructInit:
 488              	.LFB115:
 425:.//FWLIB/src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
 489              		.loc 1 425 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494              	.LVL29:
 429:.//FWLIB/src/stm32f4xx_can.c ****   
 495              		.loc 1 429 0
 496 0000 0023     		movs	r3, #0
 497 0002 8371     		strb	r3, [r0, #6]
 432:.//FWLIB/src/stm32f4xx_can.c ****   
 498              		.loc 1 432 0
 499 0004 C371     		strb	r3, [r0, #7]
 435:.//FWLIB/src/stm32f4xx_can.c ****   
 500              		.loc 1 435 0
 501 0006 0372     		strb	r3, [r0, #8]
 438:.//FWLIB/src/stm32f4xx_can.c ****   
 502              		.loc 1 438 0
 503 0008 4372     		strb	r3, [r0, #9]
 441:.//FWLIB/src/stm32f4xx_can.c ****   
 504              		.loc 1 441 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 41


 505 000a 8372     		strb	r3, [r0, #10]
 444:.//FWLIB/src/stm32f4xx_can.c ****   
 506              		.loc 1 444 0
 507 000c C372     		strb	r3, [r0, #11]
 447:.//FWLIB/src/stm32f4xx_can.c ****   
 508              		.loc 1 447 0
 509 000e 8370     		strb	r3, [r0, #2]
 450:.//FWLIB/src/stm32f4xx_can.c ****   
 510              		.loc 1 450 0
 511 0010 C370     		strb	r3, [r0, #3]
 453:.//FWLIB/src/stm32f4xx_can.c ****   
 512              		.loc 1 453 0
 513 0012 0323     		movs	r3, #3
 514 0014 0371     		strb	r3, [r0, #4]
 456:.//FWLIB/src/stm32f4xx_can.c ****   
 515              		.loc 1 456 0
 516 0016 0223     		movs	r3, #2
 517 0018 4371     		strb	r3, [r0, #5]
 459:.//FWLIB/src/stm32f4xx_can.c **** }
 518              		.loc 1 459 0
 519 001a 0123     		movs	r3, #1
 520 001c 0380     		strh	r3, [r0]	@ movhi
 521 001e 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE115:
 525              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 526              		.align	2
 527              		.global	CAN_SlaveStartBank
 528              		.thumb
 529              		.thumb_func
 531              	CAN_SlaveStartBank:
 532              	.LFB116:
 468:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 533              		.loc 1 468 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 538              	.LVL30:
 473:.//FWLIB/src/stm32f4xx_can.c ****   
 539              		.loc 1 473 0
 540 0000 0D4B     		ldr	r3, .L45
 541 0002 D3F80022 		ldr	r2, [r3, #512]
 542 0006 42F00102 		orr	r2, r2, #1
 543 000a C3F80022 		str	r2, [r3, #512]
 476:.//FWLIB/src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 544              		.loc 1 476 0
 545 000e D3F80022 		ldr	r2, [r3, #512]
 546 0012 22F47C52 		bic	r2, r2, #16128
 547 0016 22F00E02 		bic	r2, r2, #14
 548 001a C3F80022 		str	r2, [r3, #512]
 477:.//FWLIB/src/stm32f4xx_can.c ****   
 549              		.loc 1 477 0
 550 001e D3F80022 		ldr	r2, [r3, #512]
 551 0022 42EA0020 		orr	r0, r2, r0, lsl #8
 552              	.LVL31:
 553 0026 C3F80002 		str	r0, [r3, #512]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 42


 480:.//FWLIB/src/stm32f4xx_can.c **** }
 554              		.loc 1 480 0
 555 002a D3F80022 		ldr	r2, [r3, #512]
 556 002e 22F00102 		bic	r2, r2, #1
 557 0032 C3F80022 		str	r2, [r3, #512]
 558 0036 7047     		bx	lr
 559              	.L46:
 560              		.align	2
 561              	.L45:
 562 0038 00640040 		.word	1073767424
 563              		.cfi_endproc
 564              	.LFE116:
 566              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 567              		.align	2
 568              		.global	CAN_DBGFreeze
 569              		.thumb
 570              		.thumb_func
 572              	CAN_DBGFreeze:
 573              	.LFB117:
 493:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 574              		.loc 1 493 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579              	.LVL32:
 498:.//FWLIB/src/stm32f4xx_can.c ****   {
 580              		.loc 1 498 0
 581 0000 21B1     		cbz	r1, .L48
 501:.//FWLIB/src/stm32f4xx_can.c ****   }
 582              		.loc 1 501 0
 583 0002 0368     		ldr	r3, [r0]
 584 0004 43F48033 		orr	r3, r3, #65536
 585 0008 0360     		str	r3, [r0]
 586 000a 7047     		bx	lr
 587              	.L48:
 506:.//FWLIB/src/stm32f4xx_can.c ****   }
 588              		.loc 1 506 0
 589 000c 0368     		ldr	r3, [r0]
 590 000e 23F48033 		bic	r3, r3, #65536
 591 0012 0360     		str	r3, [r0]
 592 0014 7047     		bx	lr
 593              		.cfi_endproc
 594              	.LFE117:
 596 0016 00BF     		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 597              		.align	2
 598              		.global	CAN_TTComModeCmd
 599              		.thumb
 600              		.thumb_func
 602              	CAN_TTComModeCmd:
 603              	.LFB118:
 523:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 604              		.loc 1 523 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608              		@ link register save eliminated.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 43


 609              	.LVL33:
 527:.//FWLIB/src/stm32f4xx_can.c ****   {
 610              		.loc 1 527 0
 611 0000 B1B1     		cbz	r1, .L51
 530:.//FWLIB/src/stm32f4xx_can.c **** 
 612              		.loc 1 530 0
 613 0002 0368     		ldr	r3, [r0]
 614 0004 43F08003 		orr	r3, r3, #128
 615 0008 0360     		str	r3, [r0]
 533:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 616              		.loc 1 533 0
 617 000a D0F88431 		ldr	r3, [r0, #388]
 618 000e 43F48073 		orr	r3, r3, #256
 619 0012 C0F88431 		str	r3, [r0, #388]
 534:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 620              		.loc 1 534 0
 621 0016 D0F89431 		ldr	r3, [r0, #404]
 622 001a 43F48073 		orr	r3, r3, #256
 623 001e C0F89431 		str	r3, [r0, #404]
 535:.//FWLIB/src/stm32f4xx_can.c ****   }
 624              		.loc 1 535 0
 625 0022 D0F8A431 		ldr	r3, [r0, #420]
 626 0026 43F48073 		orr	r3, r3, #256
 627 002a C0F8A431 		str	r3, [r0, #420]
 628 002e 7047     		bx	lr
 629              	.L51:
 540:.//FWLIB/src/stm32f4xx_can.c **** 
 630              		.loc 1 540 0
 631 0030 0368     		ldr	r3, [r0]
 632 0032 23F08003 		bic	r3, r3, #128
 633 0036 0360     		str	r3, [r0]
 543:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 634              		.loc 1 543 0
 635 0038 D0F88431 		ldr	r3, [r0, #388]
 636 003c 23F48073 		bic	r3, r3, #256
 637 0040 C0F88431 		str	r3, [r0, #388]
 544:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 638              		.loc 1 544 0
 639 0044 D0F89431 		ldr	r3, [r0, #404]
 640 0048 23F48073 		bic	r3, r3, #256
 641 004c C0F89431 		str	r3, [r0, #404]
 545:.//FWLIB/src/stm32f4xx_can.c ****   }
 642              		.loc 1 545 0
 643 0050 D0F8A431 		ldr	r3, [r0, #420]
 644 0054 23F48073 		bic	r3, r3, #256
 645 0058 C0F8A431 		str	r3, [r0, #420]
 646 005c 7047     		bx	lr
 647              		.cfi_endproc
 648              	.LFE118:
 650 005e 00BF     		.section	.text.CAN_Transmit,"ax",%progbits
 651              		.align	2
 652              		.global	CAN_Transmit
 653              		.thumb
 654              		.thumb_func
 656              	CAN_Transmit:
 657              	.LFB119:
 577:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 44


 658              		.loc 1 577 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663              	.LVL34:
 664 0000 0346     		mov	r3, r0
 665              	.LVL35:
 586:.//FWLIB/src/stm32f4xx_can.c ****   {
 666              		.loc 1 586 0
 667 0002 8268     		ldr	r2, [r0, #8]
 668 0004 12F0806F 		tst	r2, #67108864
 669 0008 09D1     		bne	.L58
 590:.//FWLIB/src/stm32f4xx_can.c ****   {
 670              		.loc 1 590 0
 671 000a 8268     		ldr	r2, [r0, #8]
 672 000c 12F0006F 		tst	r2, #134217728
 673 0010 07D1     		bne	.L59
 594:.//FWLIB/src/stm32f4xx_can.c ****   {
 674              		.loc 1 594 0
 675 0012 8268     		ldr	r2, [r0, #8]
 676 0014 12F0805F 		tst	r2, #268435456
 677 0018 05D0     		beq	.L60
 596:.//FWLIB/src/stm32f4xx_can.c ****   }
 678              		.loc 1 596 0
 679 001a 0220     		movs	r0, #2
 680              	.LVL36:
 681 001c 04E0     		b	.L54
 682              	.LVL37:
 683              	.L58:
 588:.//FWLIB/src/stm32f4xx_can.c ****   }
 684              		.loc 1 588 0
 685 001e 0020     		movs	r0, #0
 686              	.LVL38:
 687 0020 02E0     		b	.L54
 688              	.LVL39:
 689              	.L59:
 592:.//FWLIB/src/stm32f4xx_can.c ****   }
 690              		.loc 1 592 0
 691 0022 0120     		movs	r0, #1
 692              	.LVL40:
 693 0024 00E0     		b	.L54
 694              	.LVL41:
 695              	.L60:
 600:.//FWLIB/src/stm32f4xx_can.c ****   }
 696              		.loc 1 600 0
 697 0026 0420     		movs	r0, #4
 698              	.LVL42:
 699              	.L54:
 603:.//FWLIB/src/stm32f4xx_can.c ****   {
 700              		.loc 1 603 0
 701 0028 0428     		cmp	r0, #4
 702 002a 4FD0     		beq	.L63
 577:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 703              		.loc 1 577 0
 704 002c F0B4     		push	{r4, r5, r6, r7}
 705              	.LCFI3:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 45


 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 4, -16
 708              		.cfi_offset 5, -12
 709              		.cfi_offset 6, -8
 710              		.cfi_offset 7, -4
 606:.//FWLIB/src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 711              		.loc 1 606 0
 712 002e 0546     		mov	r5, r0
 713 0030 00F11802 		add	r2, r0, #24
 714 0034 1201     		lsls	r2, r2, #4
 715 0036 9C58     		ldr	r4, [r3, r2]
 716 0038 04F00104 		and	r4, r4, #1
 717 003c 9C50     		str	r4, [r3, r2]
 607:.//FWLIB/src/stm32f4xx_can.c ****     {
 718              		.loc 1 607 0
 719 003e 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 720 0040 52B9     		cbnz	r2, .L56
 610:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 721              		.loc 1 610 0
 722 0042 00F11806 		add	r6, r0, #24
 723 0046 3601     		lsls	r6, r6, #4
 724 0048 9F59     		ldr	r7, [r3, r6]
 725 004a 0A68     		ldr	r2, [r1]
 611:.//FWLIB/src/stm32f4xx_can.c ****     }
 726              		.loc 1 611 0
 727 004c 4C7A     		ldrb	r4, [r1, #9]	@ zero_extendqisi2
 610:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 728              		.loc 1 610 0
 729 004e 44EA4252 		orr	r2, r4, r2, lsl #21
 730 0052 3A43     		orrs	r2, r2, r7
 731 0054 9A51     		str	r2, [r3, r6]
 732 0056 0AE0     		b	.L57
 733              	.L56:
 616:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 734              		.loc 1 616 0
 735 0058 00F11806 		add	r6, r0, #24
 736 005c 3601     		lsls	r6, r6, #4
 737 005e 9F59     		ldr	r7, [r3, r6]
 738 0060 4C68     		ldr	r4, [r1, #4]
 739 0062 42EAC404 		orr	r4, r2, r4, lsl #3
 618:.//FWLIB/src/stm32f4xx_can.c ****     }
 740              		.loc 1 618 0
 741 0066 4A7A     		ldrb	r2, [r1, #9]	@ zero_extendqisi2
 617:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 742              		.loc 1 617 0
 743 0068 2243     		orrs	r2, r2, r4
 616:.//FWLIB/src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 744              		.loc 1 616 0
 745 006a 3A43     		orrs	r2, r2, r7
 746 006c 9A51     		str	r2, [r3, r6]
 747              	.L57:
 622:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 748              		.loc 1 622 0
 749 006e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 750 0070 02F00F02 		and	r2, r2, #15
 751 0074 8A72     		strb	r2, [r1, #10]
 623:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 46


 752              		.loc 1 623 0
 753 0076 05F11804 		add	r4, r5, #24
 754 007a 2401     		lsls	r4, r4, #4
 755 007c 1A19     		adds	r2, r3, r4
 756 007e 5668     		ldr	r6, [r2, #4]
 757 0080 26F00F06 		bic	r6, r6, #15
 758 0084 5660     		str	r6, [r2, #4]
 624:.//FWLIB/src/stm32f4xx_can.c **** 
 759              		.loc 1 624 0
 760 0086 5668     		ldr	r6, [r2, #4]
 761 0088 8F7A     		ldrb	r7, [r1, #10]	@ zero_extendqisi2
 762 008a 3E43     		orrs	r6, r6, r7
 763 008c 5660     		str	r6, [r2, #4]
 627:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 764              		.loc 1 627 0
 765 008e 8E7B     		ldrb	r6, [r1, #14]	@ zero_extendqisi2
 628:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 766              		.loc 1 628 0
 767 0090 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 768 0092 1204     		lsls	r2, r2, #16
 627:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 769              		.loc 1 627 0
 770 0094 42EA0662 		orr	r2, r2, r6, lsl #24
 629:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 771              		.loc 1 629 0
 772 0098 0E7B     		ldrb	r6, [r1, #12]	@ zero_extendqisi2
 628:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 773              		.loc 1 628 0
 774 009a 42EA0622 		orr	r2, r2, r6, lsl #8
 630:.//FWLIB/src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 775              		.loc 1 630 0
 776 009e CE7A     		ldrb	r6, [r1, #11]	@ zero_extendqisi2
 629:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 777              		.loc 1 629 0
 778 00a0 3243     		orrs	r2, r2, r6
 627:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 779              		.loc 1 627 0
 780 00a2 03EB0515 		add	r5, r3, r5, lsl #4
 781 00a6 C5F88821 		str	r2, [r5, #392]
 631:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 782              		.loc 1 631 0
 783 00aa 8E7C     		ldrb	r6, [r1, #18]	@ zero_extendqisi2
 632:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 784              		.loc 1 632 0
 785 00ac 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 786 00ae 1204     		lsls	r2, r2, #16
 631:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 787              		.loc 1 631 0
 788 00b0 42EA0662 		orr	r2, r2, r6, lsl #24
 633:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 789              		.loc 1 633 0
 790 00b4 0E7C     		ldrb	r6, [r1, #16]	@ zero_extendqisi2
 632:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 791              		.loc 1 632 0
 792 00b6 42EA0622 		orr	r2, r2, r6, lsl #8
 634:.//FWLIB/src/stm32f4xx_can.c ****     /* Request transmission */
 793              		.loc 1 634 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 47


 794 00ba C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 795              	.LVL43:
 633:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 796              		.loc 1 633 0
 797 00bc 0A43     		orrs	r2, r2, r1
 631:.//FWLIB/src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 798              		.loc 1 631 0
 799 00be C5F88C21 		str	r2, [r5, #396]
 636:.//FWLIB/src/stm32f4xx_can.c ****   }
 800              		.loc 1 636 0
 801 00c2 1A59     		ldr	r2, [r3, r4]
 802 00c4 42F00102 		orr	r2, r2, #1
 803 00c8 1A51     		str	r2, [r3, r4]
 639:.//FWLIB/src/stm32f4xx_can.c **** 
 804              		.loc 1 639 0
 805 00ca F0BC     		pop	{r4, r5, r6, r7}
 806              	.LCFI4:
 807              		.cfi_restore 7
 808              		.cfi_restore 6
 809              		.cfi_restore 5
 810              		.cfi_restore 4
 811              		.cfi_def_cfa_offset 0
 812              	.L63:
 813 00cc 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE119:
 817 00ce 00BF     		.section	.text.CAN_TransmitStatus,"ax",%progbits
 818              		.align	2
 819              		.global	CAN_TransmitStatus
 820              		.thumb
 821              		.thumb_func
 823              	CAN_TransmitStatus:
 824              	.LFB120:
 649:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t state = 0;
 825              		.loc 1 649 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830              	.LVL44:
 656:.//FWLIB/src/stm32f4xx_can.c ****   {
 831              		.loc 1 656 0
 832 0000 0129     		cmp	r1, #1
 833 0002 0DD0     		beq	.L66
 834 0004 11B1     		cbz	r1, .L67
 835 0006 0229     		cmp	r1, #2
 836 0008 0ED0     		beq	.L68
 837 000a 15E0     		b	.L77
 838              	.L67:
 659:.//FWLIB/src/stm32f4xx_can.c ****       break;
 839              		.loc 1 659 0
 840 000c 8368     		ldr	r3, [r0, #8]
 841 000e 23F07B43 		bic	r3, r3, #-83886080
 842 0012 23F47F03 		bic	r3, r3, #16711680
 843 0016 23F47F43 		bic	r3, r3, #65280
 844 001a 23F0FC03 		bic	r3, r3, #252
 845              	.LVL45:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 48


 660:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 846              		.loc 1 660 0
 847 001e 0CE0     		b	.L65
 848              	.LVL46:
 849              	.L66:
 662:.//FWLIB/src/stm32f4xx_can.c ****       break;
 850              		.loc 1 662 0
 851 0020 8268     		ldr	r2, [r0, #8]
 852 0022 114B     		ldr	r3, .L78
 853 0024 1340     		ands	r3, r3, r2
 854              	.LVL47:
 663:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 855              		.loc 1 663 0
 856 0026 08E0     		b	.L65
 857              	.LVL48:
 858              	.L68:
 665:.//FWLIB/src/stm32f4xx_can.c ****       break;
 859              		.loc 1 665 0
 860 0028 8368     		ldr	r3, [r0, #8]
 861 002a 23F06F43 		bic	r3, r3, #-285212672
 862 002e 23F47C03 		bic	r3, r3, #16515072
 863 0032 1B0C     		lsrs	r3, r3, #16
 864 0034 1B04     		lsls	r3, r3, #16
 865              	.LVL49:
 666:.//FWLIB/src/stm32f4xx_can.c ****     default:
 866              		.loc 1 666 0
 867 0036 00E0     		b	.L65
 868              	.LVL50:
 869              	.L77:
 668:.//FWLIB/src/stm32f4xx_can.c ****       break;
 870              		.loc 1 668 0
 871 0038 0023     		movs	r3, #0
 872              	.LVL51:
 873              	.L65:
 671:.//FWLIB/src/stm32f4xx_can.c ****   {
 874              		.loc 1 671 0
 875 003a 0C4A     		ldr	r2, .L78+4
 876 003c 9342     		cmp	r3, r2
 877 003e 0BD0     		beq	.L70
 878 0040 01D8     		bhi	.L71
 879 0042 3BB1     		cbz	r3, .L72
 880 0044 0EE0     		b	.L76
 881              	.L71:
 882 0046 084A     		ldr	r2, .L78
 883 0048 9342     		cmp	r3, r2
 884 004a 07D0     		beq	.L73
 885 004c 084A     		ldr	r2, .L78+8
 886 004e 9342     		cmp	r3, r2
 887 0050 06D0     		beq	.L74
 888 0052 07E0     		b	.L76
 889              	.L72:
 674:.//FWLIB/src/stm32f4xx_can.c ****       break;
 890              		.loc 1 674 0
 891 0054 0220     		movs	r0, #2
 892              	.LVL52:
 893 0056 7047     		bx	lr
 894              	.LVL53:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 49


 895              	.L70:
 684:.//FWLIB/src/stm32f4xx_can.c ****       break;
 896              		.loc 1 684 0
 897 0058 0120     		movs	r0, #1
 898              	.LVL54:
 685:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 899              		.loc 1 685 0
 900 005a 7047     		bx	lr
 901              	.LVL55:
 902              	.L73:
 686:.//FWLIB/src/stm32f4xx_can.c ****       break;
 903              		.loc 1 686 0
 904 005c 0120     		movs	r0, #1
 905              	.LVL56:
 687:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 906              		.loc 1 687 0
 907 005e 7047     		bx	lr
 908              	.LVL57:
 909              	.L74:
 688:.//FWLIB/src/stm32f4xx_can.c ****       break;
 910              		.loc 1 688 0
 911 0060 0120     		movs	r0, #1
 912              	.LVL58:
 689:.//FWLIB/src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 913              		.loc 1 689 0
 914 0062 7047     		bx	lr
 915              	.LVL59:
 916              	.L76:
 677:.//FWLIB/src/stm32f4xx_can.c ****       break;
 917              		.loc 1 677 0
 918 0064 0020     		movs	r0, #0
 919              	.LVL60:
 694:.//FWLIB/src/stm32f4xx_can.c **** 
 920              		.loc 1 694 0
 921 0066 7047     		bx	lr
 922              	.L79:
 923              		.align	2
 924              	.L78:
 925 0068 00030008 		.word	134218496
 926 006c 03000004 		.word	67108867
 927 0070 00000310 		.word	268632064
 928              		.cfi_endproc
 929              	.LFE120:
 931              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 932              		.align	2
 933              		.global	CAN_CancelTransmit
 934              		.thumb
 935              		.thumb_func
 937              	CAN_CancelTransmit:
 938              	.LFB121:
 703:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 939              		.loc 1 703 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 944              	.LVL61:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 50


 708:.//FWLIB/src/stm32f4xx_can.c ****   {
 945              		.loc 1 708 0
 946 0000 0129     		cmp	r1, #1
 947 0002 08D0     		beq	.L82
 948 0004 11B1     		cbz	r1, .L83
 949 0006 0229     		cmp	r1, #2
 950 0008 0AD0     		beq	.L84
 951 000a 7047     		bx	lr
 952              	.L83:
 710:.//FWLIB/src/stm32f4xx_can.c ****       break;
 953              		.loc 1 710 0
 954 000c 8368     		ldr	r3, [r0, #8]
 955 000e 43F08003 		orr	r3, r3, #128
 956 0012 8360     		str	r3, [r0, #8]
 711:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 957              		.loc 1 711 0
 958 0014 7047     		bx	lr
 959              	.L82:
 712:.//FWLIB/src/stm32f4xx_can.c ****       break;
 960              		.loc 1 712 0
 961 0016 8368     		ldr	r3, [r0, #8]
 962 0018 43F40043 		orr	r3, r3, #32768
 963 001c 8360     		str	r3, [r0, #8]
 713:.//FWLIB/src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 964              		.loc 1 713 0
 965 001e 7047     		bx	lr
 966              	.L84:
 714:.//FWLIB/src/stm32f4xx_can.c ****       break;
 967              		.loc 1 714 0
 968 0020 8368     		ldr	r3, [r0, #8]
 969 0022 43F40003 		orr	r3, r3, #8388608
 970 0026 8360     		str	r3, [r0, #8]
 971 0028 7047     		bx	lr
 972              		.cfi_endproc
 973              	.LFE121:
 975 002a 00BF     		.section	.text.CAN_Receive,"ax",%progbits
 976              		.align	2
 977              		.global	CAN_Receive
 978              		.thumb
 979              		.thumb_func
 981              	CAN_Receive:
 982              	.LFB122:
 750:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 983              		.loc 1 750 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988              	.LVL62:
 989 0000 10B4     		push	{r4}
 990              	.LCFI5:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 4, -4
 755:.//FWLIB/src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 993              		.loc 1 755 0
 994 0002 01F11B03 		add	r3, r1, #27
 995 0006 1B01     		lsls	r3, r3, #4
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 51


 996 0008 C358     		ldr	r3, [r0, r3]
 997 000a 03F00403 		and	r3, r3, #4
 998 000e DBB2     		uxtb	r3, r3
 999 0010 1372     		strb	r3, [r2, #8]
 756:.//FWLIB/src/stm32f4xx_can.c ****   {
 1000              		.loc 1 756 0
 1001 0012 33B9     		cbnz	r3, .L86
 758:.//FWLIB/src/stm32f4xx_can.c ****   }
 1002              		.loc 1 758 0
 1003 0014 01F11B03 		add	r3, r1, #27
 1004 0018 1B01     		lsls	r3, r3, #4
 1005 001a C358     		ldr	r3, [r0, r3]
 1006 001c 5B0D     		lsrs	r3, r3, #21
 1007 001e 1360     		str	r3, [r2]
 1008 0020 05E0     		b	.L87
 1009              	.L86:
 762:.//FWLIB/src/stm32f4xx_can.c ****   }
 1010              		.loc 1 762 0
 1011 0022 01F11B03 		add	r3, r1, #27
 1012 0026 1B01     		lsls	r3, r3, #4
 1013 0028 C358     		ldr	r3, [r0, r3]
 1014 002a DB08     		lsrs	r3, r3, #3
 1015 002c 5360     		str	r3, [r2, #4]
 1016              	.L87:
 765:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the DLC */
 1017              		.loc 1 765 0
 1018 002e 01F11B03 		add	r3, r1, #27
 1019 0032 1B01     		lsls	r3, r3, #4
 1020 0034 C418     		adds	r4, r0, r3
 1021 0036 C358     		ldr	r3, [r0, r3]
 1022 0038 03F00203 		and	r3, r3, #2
 1023 003c 5372     		strb	r3, [r2, #9]
 767:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the FMI */
 1024              		.loc 1 767 0
 1025 003e 6368     		ldr	r3, [r4, #4]
 1026 0040 03F00F03 		and	r3, r3, #15
 1027 0044 9372     		strb	r3, [r2, #10]
 769:.//FWLIB/src/stm32f4xx_can.c ****   /* Get the data field */
 1028              		.loc 1 769 0
 1029 0046 6368     		ldr	r3, [r4, #4]
 1030 0048 1B0A     		lsrs	r3, r3, #8
 1031 004a D374     		strb	r3, [r2, #19]
 771:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1032              		.loc 1 771 0
 1033 004c 00EB0113 		add	r3, r0, r1, lsl #4
 1034 0050 D3F8B841 		ldr	r4, [r3, #440]
 1035 0054 D472     		strb	r4, [r2, #11]
 772:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1036              		.loc 1 772 0
 1037 0056 D3F8B841 		ldr	r4, [r3, #440]
 1038 005a 240A     		lsrs	r4, r4, #8
 1039 005c 1473     		strb	r4, [r2, #12]
 773:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1040              		.loc 1 773 0
 1041 005e D3F8B841 		ldr	r4, [r3, #440]
 1042 0062 240C     		lsrs	r4, r4, #16
 1043 0064 5473     		strb	r4, [r2, #13]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 52


 774:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1044              		.loc 1 774 0
 1045 0066 D3F8B841 		ldr	r4, [r3, #440]
 1046 006a 240E     		lsrs	r4, r4, #24
 1047 006c 9473     		strb	r4, [r2, #14]
 775:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1048              		.loc 1 775 0
 1049 006e D3F8BC41 		ldr	r4, [r3, #444]
 1050 0072 D473     		strb	r4, [r2, #15]
 776:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1051              		.loc 1 776 0
 1052 0074 D3F8BC41 		ldr	r4, [r3, #444]
 1053 0078 240A     		lsrs	r4, r4, #8
 1054 007a 1474     		strb	r4, [r2, #16]
 777:.//FWLIB/src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1055              		.loc 1 777 0
 1056 007c D3F8BC41 		ldr	r4, [r3, #444]
 1057 0080 240C     		lsrs	r4, r4, #16
 1058 0082 5474     		strb	r4, [r2, #17]
 778:.//FWLIB/src/stm32f4xx_can.c ****   /* Release the FIFO */
 1059              		.loc 1 778 0
 1060 0084 D3F8BC31 		ldr	r3, [r3, #444]
 1061 0088 1B0E     		lsrs	r3, r3, #24
 1062 008a 9374     		strb	r3, [r2, #18]
 781:.//FWLIB/src/stm32f4xx_can.c ****   {
 1063              		.loc 1 781 0
 1064 008c 21B9     		cbnz	r1, .L88
 783:.//FWLIB/src/stm32f4xx_can.c ****   }
 1065              		.loc 1 783 0
 1066 008e C368     		ldr	r3, [r0, #12]
 1067 0090 43F02003 		orr	r3, r3, #32
 1068 0094 C360     		str	r3, [r0, #12]
 1069 0096 03E0     		b	.L85
 1070              	.L88:
 788:.//FWLIB/src/stm32f4xx_can.c ****   }
 1071              		.loc 1 788 0
 1072 0098 0369     		ldr	r3, [r0, #16]
 1073 009a 43F02003 		orr	r3, r3, #32
 1074 009e 0361     		str	r3, [r0, #16]
 1075              	.L85:
 790:.//FWLIB/src/stm32f4xx_can.c **** 
 1076              		.loc 1 790 0
 1077 00a0 5DF8044B 		ldr	r4, [sp], #4
 1078              	.LCFI6:
 1079              		.cfi_restore 4
 1080              		.cfi_def_cfa_offset 0
 1081 00a4 7047     		bx	lr
 1082              		.cfi_endproc
 1083              	.LFE122:
 1085 00a6 00BF     		.section	.text.CAN_FIFORelease,"ax",%progbits
 1086              		.align	2
 1087              		.global	CAN_FIFORelease
 1088              		.thumb
 1089              		.thumb_func
 1091              	CAN_FIFORelease:
 1092              	.LFB123:
 799:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 53


 1093              		.loc 1 799 0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 0
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097              		@ link register save eliminated.
 1098              	.LVL63:
 804:.//FWLIB/src/stm32f4xx_can.c ****   {
 1099              		.loc 1 804 0
 1100 0000 21B9     		cbnz	r1, .L92
 806:.//FWLIB/src/stm32f4xx_can.c ****   }
 1101              		.loc 1 806 0
 1102 0002 C368     		ldr	r3, [r0, #12]
 1103 0004 43F02003 		orr	r3, r3, #32
 1104 0008 C360     		str	r3, [r0, #12]
 1105 000a 7047     		bx	lr
 1106              	.L92:
 811:.//FWLIB/src/stm32f4xx_can.c ****   }
 1107              		.loc 1 811 0
 1108 000c 0369     		ldr	r3, [r0, #16]
 1109 000e 43F02003 		orr	r3, r3, #32
 1110 0012 0361     		str	r3, [r0, #16]
 1111 0014 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE123:
 1115 0016 00BF     		.section	.text.CAN_MessagePending,"ax",%progbits
 1116              		.align	2
 1117              		.global	CAN_MessagePending
 1118              		.thumb
 1119              		.thumb_func
 1121              	CAN_MessagePending:
 1122              	.LFB124:
 822:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1123              		.loc 1 822 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128              	.LVL64:
 827:.//FWLIB/src/stm32f4xx_can.c ****   {
 1129              		.loc 1 827 0
 1130 0000 19B9     		cbnz	r1, .L95
 829:.//FWLIB/src/stm32f4xx_can.c ****   }
 1131              		.loc 1 829 0
 1132 0002 C068     		ldr	r0, [r0, #12]
 1133              	.LVL65:
 1134 0004 00F00300 		and	r0, r0, #3
 1135              	.LVL66:
 1136 0008 7047     		bx	lr
 1137              	.LVL67:
 1138              	.L95:
 831:.//FWLIB/src/stm32f4xx_can.c ****   {
 1139              		.loc 1 831 0
 1140 000a 0129     		cmp	r1, #1
 1141 000c 03D1     		bne	.L97
 833:.//FWLIB/src/stm32f4xx_can.c ****   }
 1142              		.loc 1 833 0
 1143 000e 0069     		ldr	r0, [r0, #16]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 54


 1144              	.LVL68:
 1145 0010 00F00300 		and	r0, r0, #3
 1146              	.LVL69:
 1147 0014 7047     		bx	lr
 1148              	.LVL70:
 1149              	.L97:
 837:.//FWLIB/src/stm32f4xx_can.c ****   }
 1150              		.loc 1 837 0
 1151 0016 0020     		movs	r0, #0
 1152              	.LVL71:
 840:.//FWLIB/src/stm32f4xx_can.c **** /**
 1153              		.loc 1 840 0
 1154 0018 7047     		bx	lr
 1155              		.cfi_endproc
 1156              	.LFE124:
 1158 001a 00BF     		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1159              		.align	2
 1160              		.global	CAN_OperatingModeRequest
 1161              		.thumb
 1162              		.thumb_func
 1164              	CAN_OperatingModeRequest:
 1165              	.LFB125:
 872:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1166              		.loc 1 872 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 0, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171              	.LVL72:
 882:.//FWLIB/src/stm32f4xx_can.c ****   {
 1172              		.loc 1 882 0
 1173 0000 B9B9     		cbnz	r1, .L99
 885:.//FWLIB/src/stm32f4xx_can.c **** 
 1174              		.loc 1 885 0
 1175 0002 0368     		ldr	r3, [r0]
 1176 0004 23F00303 		bic	r3, r3, #3
 1177 0008 43F00103 		orr	r3, r3, #1
 1178 000c 0360     		str	r3, [r0]
 876:.//FWLIB/src/stm32f4xx_can.c **** 
 1179              		.loc 1 876 0
 1180 000e 4FF6FF72 		movw	r2, #65535
 888:.//FWLIB/src/stm32f4xx_can.c ****     {
 1181              		.loc 1 888 0
 1182 0012 00E0     		b	.L100
 1183              	.LVL73:
 1184              	.L102:
 890:.//FWLIB/src/stm32f4xx_can.c ****     }
 1185              		.loc 1 890 0
 1186 0014 013A     		subs	r2, r2, #1
 1187              	.LVL74:
 1188              	.L100:
 888:.//FWLIB/src/stm32f4xx_can.c ****     {
 1189              		.loc 1 888 0
 1190 0016 4368     		ldr	r3, [r0, #4]
 1191 0018 03F00303 		and	r3, r3, #3
 1192 001c 012B     		cmp	r3, #1
 1193 001e 01D0     		beq	.L101
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 55


 888:.//FWLIB/src/stm32f4xx_can.c ****     {
 1194              		.loc 1 888 0 is_stmt 0 discriminator 1
 1195 0020 002A     		cmp	r2, #0
 1196 0022 F7D1     		bne	.L102
 1197              	.L101:
 892:.//FWLIB/src/stm32f4xx_can.c ****     {
 1198              		.loc 1 892 0 is_stmt 1
 1199 0024 4368     		ldr	r3, [r0, #4]
 1200 0026 03F00303 		and	r3, r3, #3
 1201 002a 012B     		cmp	r3, #1
 1202 002c 31D0     		beq	.L111
 894:.//FWLIB/src/stm32f4xx_can.c ****     }
 1203              		.loc 1 894 0
 1204 002e 0020     		movs	r0, #0
 1205              	.LVL75:
 1206 0030 7047     		bx	lr
 1207              	.LVL76:
 1208              	.L99:
 901:.//FWLIB/src/stm32f4xx_can.c ****   {
 1209              		.loc 1 901 0
 1210 0032 0129     		cmp	r1, #1
 1211 0034 13D1     		bne	.L104
 904:.//FWLIB/src/stm32f4xx_can.c **** 
 1212              		.loc 1 904 0
 1213 0036 0368     		ldr	r3, [r0]
 1214 0038 23F00303 		bic	r3, r3, #3
 1215 003c 0360     		str	r3, [r0]
 876:.//FWLIB/src/stm32f4xx_can.c **** 
 1216              		.loc 1 876 0
 1217 003e 4FF6FF73 		movw	r3, #65535
 907:.//FWLIB/src/stm32f4xx_can.c ****     {
 1218              		.loc 1 907 0
 1219 0042 00E0     		b	.L105
 1220              	.LVL77:
 1221              	.L107:
 909:.//FWLIB/src/stm32f4xx_can.c ****     }
 1222              		.loc 1 909 0
 1223 0044 013B     		subs	r3, r3, #1
 1224              	.LVL78:
 1225              	.L105:
 907:.//FWLIB/src/stm32f4xx_can.c ****     {
 1226              		.loc 1 907 0
 1227 0046 4268     		ldr	r2, [r0, #4]
 1228 0048 12F0030F 		tst	r2, #3
 1229 004c 01D0     		beq	.L106
 907:.//FWLIB/src/stm32f4xx_can.c ****     {
 1230              		.loc 1 907 0 is_stmt 0 discriminator 1
 1231 004e 002B     		cmp	r3, #0
 1232 0050 F8D1     		bne	.L107
 1233              	.L106:
 911:.//FWLIB/src/stm32f4xx_can.c ****     {
 1234              		.loc 1 911 0 is_stmt 1
 1235 0052 4368     		ldr	r3, [r0, #4]
 1236              	.LVL79:
 1237 0054 13F0030F 		tst	r3, #3
 1238 0058 1DD0     		beq	.L112
 913:.//FWLIB/src/stm32f4xx_can.c ****     }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 56


 1239              		.loc 1 913 0
 1240 005a 0020     		movs	r0, #0
 1241              	.LVL80:
 1242 005c 7047     		bx	lr
 1243              	.LVL81:
 1244              	.L104:
 920:.//FWLIB/src/stm32f4xx_can.c ****   {
 1245              		.loc 1 920 0
 1246 005e 0229     		cmp	r1, #2
 1247 0060 1BD1     		bne	.L113
 923:.//FWLIB/src/stm32f4xx_can.c **** 
 1248              		.loc 1 923 0
 1249 0062 0368     		ldr	r3, [r0]
 1250 0064 23F00303 		bic	r3, r3, #3
 1251 0068 43F00203 		orr	r3, r3, #2
 1252 006c 0360     		str	r3, [r0]
 876:.//FWLIB/src/stm32f4xx_can.c **** 
 1253              		.loc 1 876 0
 1254 006e 4FF6FF72 		movw	r2, #65535
 926:.//FWLIB/src/stm32f4xx_can.c ****     {
 1255              		.loc 1 926 0
 1256 0072 00E0     		b	.L108
 1257              	.LVL82:
 1258              	.L110:
 928:.//FWLIB/src/stm32f4xx_can.c ****     }
 1259              		.loc 1 928 0
 1260 0074 013A     		subs	r2, r2, #1
 1261              	.LVL83:
 1262              	.L108:
 926:.//FWLIB/src/stm32f4xx_can.c ****     {
 1263              		.loc 1 926 0
 1264 0076 4368     		ldr	r3, [r0, #4]
 1265 0078 03F00303 		and	r3, r3, #3
 1266 007c 022B     		cmp	r3, #2
 1267 007e 01D0     		beq	.L109
 926:.//FWLIB/src/stm32f4xx_can.c ****     {
 1268              		.loc 1 926 0 is_stmt 0 discriminator 1
 1269 0080 002A     		cmp	r2, #0
 1270 0082 F7D1     		bne	.L110
 1271              	.L109:
 930:.//FWLIB/src/stm32f4xx_can.c ****     {
 1272              		.loc 1 930 0 is_stmt 1
 1273 0084 4368     		ldr	r3, [r0, #4]
 1274 0086 03F00303 		and	r3, r3, #3
 1275 008a 022B     		cmp	r3, #2
 1276 008c 07D0     		beq	.L114
 932:.//FWLIB/src/stm32f4xx_can.c ****     }
 1277              		.loc 1 932 0
 1278 008e 0020     		movs	r0, #0
 1279              	.LVL84:
 1280 0090 7047     		bx	lr
 1281              	.LVL85:
 1282              	.L111:
 898:.//FWLIB/src/stm32f4xx_can.c ****     }
 1283              		.loc 1 898 0
 1284 0092 0120     		movs	r0, #1
 1285              	.LVL86:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 57


 1286 0094 7047     		bx	lr
 1287              	.LVL87:
 1288              	.L112:
 917:.//FWLIB/src/stm32f4xx_can.c ****     }
 1289              		.loc 1 917 0
 1290 0096 0120     		movs	r0, #1
 1291              	.LVL88:
 1292 0098 7047     		bx	lr
 1293              	.LVL89:
 1294              	.L113:
 941:.//FWLIB/src/stm32f4xx_can.c ****   }
 1295              		.loc 1 941 0
 1296 009a 0020     		movs	r0, #0
 1297              	.LVL90:
 1298 009c 7047     		bx	lr
 1299              	.LVL91:
 1300              	.L114:
 936:.//FWLIB/src/stm32f4xx_can.c ****     }
 1301              		.loc 1 936 0
 1302 009e 0120     		movs	r0, #1
 1303              	.LVL92:
 945:.//FWLIB/src/stm32f4xx_can.c **** 
 1304              		.loc 1 945 0
 1305 00a0 7047     		bx	lr
 1306              		.cfi_endproc
 1307              	.LFE125:
 1309 00a2 00BF     		.section	.text.CAN_Sleep,"ax",%progbits
 1310              		.align	2
 1311              		.global	CAN_Sleep
 1312              		.thumb
 1313              		.thumb_func
 1315              	CAN_Sleep:
 1316              	.LFB126:
 953:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1317              		.loc 1 953 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322              	.LVL93:
 960:.//FWLIB/src/stm32f4xx_can.c ****    
 1323              		.loc 1 960 0
 1324 0000 0368     		ldr	r3, [r0]
 1325 0002 23F00303 		bic	r3, r3, #3
 1326 0006 43F00203 		orr	r3, r3, #2
 1327 000a 0360     		str	r3, [r0]
 963:.//FWLIB/src/stm32f4xx_can.c ****   {
 1328              		.loc 1 963 0
 1329 000c 4368     		ldr	r3, [r0, #4]
 1330 000e 03F00303 		and	r3, r3, #3
 1331 0012 022B     		cmp	r3, #2
 1332 0014 01D0     		beq	.L117
 954:.//FWLIB/src/stm32f4xx_can.c ****   
 1333              		.loc 1 954 0
 1334 0016 0020     		movs	r0, #0
 1335              	.LVL94:
 1336 0018 7047     		bx	lr
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 58


 1337              	.LVL95:
 1338              	.L117:
 966:.//FWLIB/src/stm32f4xx_can.c ****   }
 1339              		.loc 1 966 0
 1340 001a 0120     		movs	r0, #1
 1341              	.LVL96:
 970:.//FWLIB/src/stm32f4xx_can.c **** 
 1342              		.loc 1 970 0
 1343 001c 7047     		bx	lr
 1344              		.cfi_endproc
 1345              	.LFE126:
 1347 001e 00BF     		.section	.text.CAN_WakeUp,"ax",%progbits
 1348              		.align	2
 1349              		.global	CAN_WakeUp
 1350              		.thumb
 1351              		.thumb_func
 1353              	CAN_WakeUp:
 1354              	.LFB127:
 978:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1355              		.loc 1 978 0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 0
 1358              		@ frame_needed = 0, uses_anonymous_args = 0
 1359              		@ link register save eliminated.
 1360              	.LVL97:
 986:.//FWLIB/src/stm32f4xx_can.c ****     
 1361              		.loc 1 986 0
 1362 0000 0368     		ldr	r3, [r0]
 1363 0002 23F00203 		bic	r3, r3, #2
 1364 0006 0360     		str	r3, [r0]
 979:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1365              		.loc 1 979 0
 1366 0008 4FF6FF73 		movw	r3, #65535
 989:.//FWLIB/src/stm32f4xx_can.c ****   {
 1367              		.loc 1 989 0
 1368 000c 00E0     		b	.L119
 1369              	.LVL98:
 1370              	.L121:
 991:.//FWLIB/src/stm32f4xx_can.c ****   }
 1371              		.loc 1 991 0
 1372 000e 013B     		subs	r3, r3, #1
 1373              	.LVL99:
 1374              	.L119:
 989:.//FWLIB/src/stm32f4xx_can.c ****   {
 1375              		.loc 1 989 0
 1376 0010 4268     		ldr	r2, [r0, #4]
 1377 0012 12F0020F 		tst	r2, #2
 1378 0016 01D0     		beq	.L120
 989:.//FWLIB/src/stm32f4xx_can.c ****   {
 1379              		.loc 1 989 0 is_stmt 0 discriminator 1
 1380 0018 002B     		cmp	r3, #0
 1381 001a F8D1     		bne	.L121
 1382              	.L120:
 993:.//FWLIB/src/stm32f4xx_can.c ****   {
 1383              		.loc 1 993 0 is_stmt 1
 1384 001c 4368     		ldr	r3, [r0, #4]
 1385              	.LVL100:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 59


 1386 001e 13F0020F 		tst	r3, #2
 1387 0022 01D0     		beq	.L123
 980:.//FWLIB/src/stm32f4xx_can.c ****   
 1388              		.loc 1 980 0
 1389 0024 0020     		movs	r0, #0
 1390              	.LVL101:
 1391 0026 7047     		bx	lr
 1392              	.LVL102:
 1393              	.L123:
 996:.//FWLIB/src/stm32f4xx_can.c ****   }
 1394              		.loc 1 996 0
 1395 0028 0120     		movs	r0, #1
 1396              	.LVL103:
1000:.//FWLIB/src/stm32f4xx_can.c **** /**
 1397              		.loc 1 1000 0
 1398 002a 7047     		bx	lr
 1399              		.cfi_endproc
 1400              	.LFE127:
 1402              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1403              		.align	2
 1404              		.global	CAN_GetLastErrorCode
 1405              		.thumb
 1406              		.thumb_func
 1408              	CAN_GetLastErrorCode:
 1409              	.LFB128:
1040:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 1410              		.loc 1 1040 0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415              	.LVL104:
1047:.//FWLIB/src/stm32f4xx_can.c ****   
 1416              		.loc 1 1047 0
 1417 0000 8069     		ldr	r0, [r0, #24]
 1418              	.LVL105:
1051:.//FWLIB/src/stm32f4xx_can.c **** 
 1419              		.loc 1 1051 0
 1420 0002 00F07000 		and	r0, r0, #112
 1421              	.LVL106:
 1422 0006 7047     		bx	lr
 1423              		.cfi_endproc
 1424              	.LFE128:
 1426              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1427              		.align	2
 1428              		.global	CAN_GetReceiveErrorCounter
 1429              		.thumb
 1430              		.thumb_func
 1432              	CAN_GetReceiveErrorCounter:
 1433              	.LFB129:
1065:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1434              		.loc 1 1065 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              		@ link register save eliminated.
 1439              	.LVL107:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 60


1072:.//FWLIB/src/stm32f4xx_can.c ****   
 1440              		.loc 1 1072 0
 1441 0000 8069     		ldr	r0, [r0, #24]
 1442              	.LVL108:
1076:.//FWLIB/src/stm32f4xx_can.c **** 
 1443              		.loc 1 1076 0
 1444 0002 000E     		lsrs	r0, r0, #24
 1445              	.LVL109:
 1446 0004 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE129:
 1450 0006 00BF     		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1451              		.align	2
 1452              		.global	CAN_GetLSBTransmitErrorCounter
 1453              		.thumb
 1454              		.thumb_func
 1456              	CAN_GetLSBTransmitErrorCounter:
 1457              	.LFB130:
1085:.//FWLIB/src/stm32f4xx_can.c ****   uint8_t counter=0;
 1458              		.loc 1 1085 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 0, uses_anonymous_args = 0
 1462              		@ link register save eliminated.
 1463              	.LVL110:
1092:.//FWLIB/src/stm32f4xx_can.c ****   
 1464              		.loc 1 1092 0
 1465 0000 8069     		ldr	r0, [r0, #24]
 1466              	.LVL111:
1096:.//FWLIB/src/stm32f4xx_can.c **** /**
 1467              		.loc 1 1096 0
 1468 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1469              	.LVL112:
 1470 0006 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE130:
 1474              		.section	.text.CAN_ITConfig,"ax",%progbits
 1475              		.align	2
 1476              		.global	CAN_ITConfig
 1477              		.thumb
 1478              		.thumb_func
 1480              	CAN_ITConfig:
 1481              	.LFB131:
1290:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1482              		.loc 1 1290 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487              	.LVL113:
1296:.//FWLIB/src/stm32f4xx_can.c ****   {
 1488              		.loc 1 1296 0
 1489 0000 1AB1     		cbz	r2, .L128
1299:.//FWLIB/src/stm32f4xx_can.c ****   }
 1490              		.loc 1 1299 0
 1491 0002 4369     		ldr	r3, [r0, #20]
 1492 0004 1943     		orrs	r1, r1, r3
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 61


 1493              	.LVL114:
 1494 0006 4161     		str	r1, [r0, #20]
 1495 0008 7047     		bx	lr
 1496              	.LVL115:
 1497              	.L128:
1304:.//FWLIB/src/stm32f4xx_can.c ****   }
 1498              		.loc 1 1304 0
 1499 000a 4369     		ldr	r3, [r0, #20]
 1500 000c 23EA0101 		bic	r1, r3, r1
 1501              	.LVL116:
 1502 0010 4161     		str	r1, [r0, #20]
 1503 0012 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE131:
 1507              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1508              		.align	2
 1509              		.global	CAN_GetFlagStatus
 1510              		.thumb
 1511              		.thumb_func
 1513              	CAN_GetFlagStatus:
 1514              	.LFB132:
1330:.//FWLIB/src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
 1515              		.loc 1 1330 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 0
 1518              		@ frame_needed = 0, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520              	.LVL117:
1338:.//FWLIB/src/stm32f4xx_can.c ****   { 
 1521              		.loc 1 1338 0
 1522 0000 11F4700F 		tst	r1, #15728640
 1523 0004 06D0     		beq	.L131
1341:.//FWLIB/src/stm32f4xx_can.c ****     { 
 1524              		.loc 1 1341 0
 1525 0006 8369     		ldr	r3, [r0, #24]
 1526 0008 1940     		ands	r1, r1, r3
 1527              	.LVL118:
 1528 000a C1F31301 		ubfx	r1, r1, #0, #20
 1529 000e 31B3     		cbz	r1, .L136
1344:.//FWLIB/src/stm32f4xx_can.c ****     }
 1530              		.loc 1 1344 0
 1531 0010 0120     		movs	r0, #1
 1532              	.LVL119:
 1533 0012 7047     		bx	lr
 1534              	.LVL120:
 1535              	.L131:
1352:.//FWLIB/src/stm32f4xx_can.c ****   { 
 1536              		.loc 1 1352 0
 1537 0014 11F0807F 		tst	r1, #16777216
 1538 0018 06D0     		beq	.L133
1355:.//FWLIB/src/stm32f4xx_can.c ****     { 
 1539              		.loc 1 1355 0
 1540 001a 4368     		ldr	r3, [r0, #4]
 1541 001c 1940     		ands	r1, r1, r3
 1542              	.LVL121:
 1543 001e C1F31301 		ubfx	r1, r1, #0, #20
 1544 0022 F1B1     		cbz	r1, .L137
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 62


1358:.//FWLIB/src/stm32f4xx_can.c ****     }
 1545              		.loc 1 1358 0
 1546 0024 0120     		movs	r0, #1
 1547              	.LVL122:
 1548 0026 7047     		bx	lr
 1549              	.LVL123:
 1550              	.L133:
1366:.//FWLIB/src/stm32f4xx_can.c ****   { 
 1551              		.loc 1 1366 0
 1552 0028 11F0006F 		tst	r1, #134217728
 1553 002c 06D0     		beq	.L134
1369:.//FWLIB/src/stm32f4xx_can.c ****     { 
 1554              		.loc 1 1369 0
 1555 002e 8368     		ldr	r3, [r0, #8]
 1556 0030 1940     		ands	r1, r1, r3
 1557              	.LVL124:
 1558 0032 C1F31301 		ubfx	r1, r1, #0, #20
 1559 0036 B1B1     		cbz	r1, .L138
1372:.//FWLIB/src/stm32f4xx_can.c ****     }
 1560              		.loc 1 1372 0
 1561 0038 0120     		movs	r0, #1
 1562              	.LVL125:
 1563 003a 7047     		bx	lr
 1564              	.LVL126:
 1565              	.L134:
1380:.//FWLIB/src/stm32f4xx_can.c ****   { 
 1566              		.loc 1 1380 0
 1567 003c 11F0007F 		tst	r1, #33554432
 1568 0040 06D0     		beq	.L135
1383:.//FWLIB/src/stm32f4xx_can.c ****     { 
 1569              		.loc 1 1383 0
 1570 0042 C368     		ldr	r3, [r0, #12]
 1571 0044 1940     		ands	r1, r1, r3
 1572              	.LVL127:
 1573 0046 C1F31301 		ubfx	r1, r1, #0, #20
 1574 004a 71B1     		cbz	r1, .L139
1386:.//FWLIB/src/stm32f4xx_can.c ****     }
 1575              		.loc 1 1386 0
 1576 004c 0120     		movs	r0, #1
 1577              	.LVL128:
 1578 004e 7047     		bx	lr
 1579              	.LVL129:
 1580              	.L135:
1397:.//FWLIB/src/stm32f4xx_can.c ****     { 
 1581              		.loc 1 1397 0
 1582 0050 0369     		ldr	r3, [r0, #16]
 1583 0052 1940     		ands	r1, r1, r3
 1584              	.LVL130:
 1585 0054 C1F31301 		ubfx	r1, r1, #0, #20
 1586 0058 49B1     		cbz	r1, .L140
1400:.//FWLIB/src/stm32f4xx_can.c ****     }
 1587              		.loc 1 1400 0
 1588 005a 0120     		movs	r0, #1
 1589              	.LVL131:
 1590 005c 7047     		bx	lr
 1591              	.LVL132:
 1592              	.L136:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 63


1349:.//FWLIB/src/stm32f4xx_can.c ****     }
 1593              		.loc 1 1349 0
 1594 005e 0020     		movs	r0, #0
 1595              	.LVL133:
 1596 0060 7047     		bx	lr
 1597              	.LVL134:
 1598              	.L137:
1363:.//FWLIB/src/stm32f4xx_can.c ****     }
 1599              		.loc 1 1363 0
 1600 0062 0020     		movs	r0, #0
 1601              	.LVL135:
 1602 0064 7047     		bx	lr
 1603              	.LVL136:
 1604              	.L138:
1377:.//FWLIB/src/stm32f4xx_can.c ****     }
 1605              		.loc 1 1377 0
 1606 0066 0020     		movs	r0, #0
 1607              	.LVL137:
 1608 0068 7047     		bx	lr
 1609              	.LVL138:
 1610              	.L139:
1391:.//FWLIB/src/stm32f4xx_can.c ****     }
 1611              		.loc 1 1391 0
 1612 006a 0020     		movs	r0, #0
 1613              	.LVL139:
 1614 006c 7047     		bx	lr
 1615              	.LVL140:
 1616              	.L140:
1405:.//FWLIB/src/stm32f4xx_can.c ****     }
 1617              		.loc 1 1405 0
 1618 006e 0020     		movs	r0, #0
 1619              	.LVL141:
1410:.//FWLIB/src/stm32f4xx_can.c **** 
 1620              		.loc 1 1410 0
 1621 0070 7047     		bx	lr
 1622              		.cfi_endproc
 1623              	.LFE132:
 1625 0072 00BF     		.section	.text.CAN_ClearFlag,"ax",%progbits
 1626              		.align	2
 1627              		.global	CAN_ClearFlag
 1628              		.thumb
 1629              		.thumb_func
 1631              	CAN_ClearFlag:
 1632              	.LFB133:
1430:.//FWLIB/src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 1633              		.loc 1 1430 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              		@ link register save eliminated.
 1638              	.LVL142:
1436:.//FWLIB/src/stm32f4xx_can.c ****   {
 1639              		.loc 1 1436 0
 1640 0000 0C4B     		ldr	r3, .L147
 1641 0002 9942     		cmp	r1, r3
 1642 0004 02D1     		bne	.L142
1439:.//FWLIB/src/stm32f4xx_can.c ****   }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 64


 1643              		.loc 1 1439 0
 1644 0006 0023     		movs	r3, #0
 1645 0008 8361     		str	r3, [r0, #24]
 1646 000a 7047     		bx	lr
 1647              	.L142:
1443:.//FWLIB/src/stm32f4xx_can.c **** 
 1648              		.loc 1 1443 0
 1649 000c C1F31303 		ubfx	r3, r1, #0, #20
 1650              	.LVL143:
1445:.//FWLIB/src/stm32f4xx_can.c ****     {
 1651              		.loc 1 1445 0
 1652 0010 11F0007F 		tst	r1, #33554432
 1653 0014 01D0     		beq	.L144
1448:.//FWLIB/src/stm32f4xx_can.c ****     }
 1654              		.loc 1 1448 0
 1655 0016 C360     		str	r3, [r0, #12]
 1656 0018 7047     		bx	lr
 1657              	.L144:
1450:.//FWLIB/src/stm32f4xx_can.c ****     {
 1658              		.loc 1 1450 0
 1659 001a 11F0806F 		tst	r1, #67108864
 1660 001e 01D0     		beq	.L145
1453:.//FWLIB/src/stm32f4xx_can.c ****     }
 1661              		.loc 1 1453 0
 1662 0020 0361     		str	r3, [r0, #16]
 1663 0022 7047     		bx	lr
 1664              	.L145:
1455:.//FWLIB/src/stm32f4xx_can.c ****     {
 1665              		.loc 1 1455 0
 1666 0024 11F0006F 		tst	r1, #134217728
 1667 0028 01D0     		beq	.L146
1458:.//FWLIB/src/stm32f4xx_can.c ****     }
 1668              		.loc 1 1458 0
 1669 002a 8360     		str	r3, [r0, #8]
 1670 002c 7047     		bx	lr
 1671              	.L146:
1463:.//FWLIB/src/stm32f4xx_can.c ****     }
 1672              		.loc 1 1463 0
 1673 002e 4360     		str	r3, [r0, #4]
 1674 0030 7047     		bx	lr
 1675              	.L148:
 1676 0032 00BF     		.align	2
 1677              	.L147:
 1678 0034 7000F030 		.word	821035120
 1679              		.cfi_endproc
 1680              	.LFE133:
 1682              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1683              		.align	2
 1684              		.global	CAN_GetITStatus
 1685              		.thumb
 1686              		.thumb_func
 1688              	CAN_GetITStatus:
 1689              	.LFB134:
1490:.//FWLIB/src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 1690              		.loc 1 1490 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 65


 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL144:
 1695 0000 08B5     		push	{r3, lr}
 1696              	.LCFI7:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 3, -8
 1699              		.cfi_offset 14, -4
 1700              	.LVL145:
1497:.//FWLIB/src/stm32f4xx_can.c ****  {
 1701              		.loc 1 1497 0
 1702 0002 4369     		ldr	r3, [r0, #20]
 1703 0004 0B42     		tst	r3, r1
 1704 0006 6FD0     		beq	.L168
1500:.//FWLIB/src/stm32f4xx_can.c ****     {
 1705              		.loc 1 1500 0
 1706 0008 4029     		cmp	r1, #64
 1707 000a 45D0     		beq	.L151
 1708 000c 0ED8     		bhi	.L152
 1709 000e 0429     		cmp	r1, #4
 1710 0010 2ED0     		beq	.L153
 1711 0012 04D8     		bhi	.L154
 1712 0014 0129     		cmp	r1, #1
 1713 0016 21D0     		beq	.L155
 1714 0018 0229     		cmp	r1, #2
 1715 001a 24D0     		beq	.L156
 1716 001c 66E0     		b	.L169
 1717              	.L154:
 1718 001e 1029     		cmp	r1, #16
 1719 0020 30D0     		beq	.L157
 1720 0022 2029     		cmp	r1, #32
 1721 0024 33D0     		beq	.L158
 1722 0026 0829     		cmp	r1, #8
 1723 0028 60D1     		bne	.L169
 1724 002a 26E0     		b	.L159
 1725              	.L152:
 1726 002c B1F5006F 		cmp	r1, #2048
 1727 0030 50D0     		beq	.L160
 1728 0032 09D8     		bhi	.L161
 1729 0034 B1F5007F 		cmp	r1, #512
 1730 0038 42D0     		beq	.L162
 1731 003a B1F5806F 		cmp	r1, #1024
 1732 003e 44D0     		beq	.L163
 1733 0040 B1F5807F 		cmp	r1, #256
 1734 0044 52D1     		bne	.L169
 1735 0046 36E0     		b	.L164
 1736              	.L161:
 1737 0048 B1F5803F 		cmp	r1, #65536
 1738 004c 29D0     		beq	.L165
 1739 004e B1F5003F 		cmp	r1, #131072
 1740 0052 2BD0     		beq	.L166
 1741 0054 B1F5004F 		cmp	r1, #32768
 1742 0058 48D1     		bne	.L169
 1743 005a 40E0     		b	.L167
 1744              	.L155:
1504:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1745              		.loc 1 1504 0
 1746 005c 8068     		ldr	r0, [r0, #8]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 66


 1747              	.LVL146:
 1748 005e 2449     		ldr	r1, .L171
 1749              	.LVL147:
 1750 0060 FFF7FEFF 		bl	CheckITStatus
 1751              	.LVL148:
1505:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
 1752              		.loc 1 1505 0
 1753 0064 08BD     		pop	{r3, pc}
 1754              	.LVL149:
 1755              	.L156:
1508:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1756              		.loc 1 1508 0
 1757 0066 C068     		ldr	r0, [r0, #12]
 1758              	.LVL150:
 1759 0068 0321     		movs	r1, #3
 1760              	.LVL151:
 1761 006a FFF7FEFF 		bl	CheckITStatus
 1762              	.LVL152:
1509:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF0:
 1763              		.loc 1 1509 0
 1764 006e 08BD     		pop	{r3, pc}
 1765              	.LVL153:
 1766              	.L153:
1512:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1767              		.loc 1 1512 0
 1768 0070 C068     		ldr	r0, [r0, #12]
 1769              	.LVL154:
 1770 0072 0821     		movs	r1, #8
 1771              	.LVL155:
 1772 0074 FFF7FEFF 		bl	CheckITStatus
 1773              	.LVL156:
1513:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
 1774              		.loc 1 1513 0
 1775 0078 08BD     		pop	{r3, pc}
 1776              	.LVL157:
 1777              	.L159:
1516:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1778              		.loc 1 1516 0
 1779 007a C068     		ldr	r0, [r0, #12]
 1780              	.LVL158:
 1781 007c 1021     		movs	r1, #16
 1782              	.LVL159:
 1783 007e FFF7FEFF 		bl	CheckITStatus
 1784              	.LVL160:
1517:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
 1785              		.loc 1 1517 0
 1786 0082 08BD     		pop	{r3, pc}
 1787              	.LVL161:
 1788              	.L157:
1520:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1789              		.loc 1 1520 0
 1790 0084 0069     		ldr	r0, [r0, #16]
 1791              	.LVL162:
 1792 0086 0321     		movs	r1, #3
 1793              	.LVL163:
 1794 0088 FFF7FEFF 		bl	CheckITStatus
 1795              	.LVL164:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 67


1521:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FF1:
 1796              		.loc 1 1521 0
 1797 008c 08BD     		pop	{r3, pc}
 1798              	.LVL165:
 1799              	.L158:
1524:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1800              		.loc 1 1524 0
 1801 008e 0069     		ldr	r0, [r0, #16]
 1802              	.LVL166:
 1803 0090 0821     		movs	r1, #8
 1804              	.LVL167:
 1805 0092 FFF7FEFF 		bl	CheckITStatus
 1806              	.LVL168:
1525:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
 1807              		.loc 1 1525 0
 1808 0096 08BD     		pop	{r3, pc}
 1809              	.LVL169:
 1810              	.L151:
1528:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1811              		.loc 1 1528 0
 1812 0098 0069     		ldr	r0, [r0, #16]
 1813              	.LVL170:
 1814 009a 1021     		movs	r1, #16
 1815              	.LVL171:
 1816 009c FFF7FEFF 		bl	CheckITStatus
 1817              	.LVL172:
1529:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_WKU:
 1818              		.loc 1 1529 0
 1819 00a0 08BD     		pop	{r3, pc}
 1820              	.LVL173:
 1821              	.L165:
1532:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1822              		.loc 1 1532 0
 1823 00a2 4068     		ldr	r0, [r0, #4]
 1824              	.LVL174:
 1825 00a4 0821     		movs	r1, #8
 1826              	.LVL175:
 1827 00a6 FFF7FEFF 		bl	CheckITStatus
 1828              	.LVL176:
1533:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_SLK:
 1829              		.loc 1 1533 0
 1830 00aa 08BD     		pop	{r3, pc}
 1831              	.LVL177:
 1832              	.L166:
1536:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1833              		.loc 1 1536 0
 1834 00ac 4068     		ldr	r0, [r0, #4]
 1835              	.LVL178:
 1836 00ae 1021     		movs	r1, #16
 1837              	.LVL179:
 1838 00b0 FFF7FEFF 		bl	CheckITStatus
 1839              	.LVL180:
1537:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EWG:
 1840              		.loc 1 1537 0
 1841 00b4 08BD     		pop	{r3, pc}
 1842              	.LVL181:
 1843              	.L164:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 68


1540:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1844              		.loc 1 1540 0
 1845 00b6 8069     		ldr	r0, [r0, #24]
 1846              	.LVL182:
 1847 00b8 0121     		movs	r1, #1
 1848              	.LVL183:
 1849 00ba FFF7FEFF 		bl	CheckITStatus
 1850              	.LVL184:
1541:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_EPV:
 1851              		.loc 1 1541 0
 1852 00be 08BD     		pop	{r3, pc}
 1853              	.LVL185:
 1854              	.L162:
1544:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1855              		.loc 1 1544 0
 1856 00c0 8069     		ldr	r0, [r0, #24]
 1857              	.LVL186:
 1858 00c2 0221     		movs	r1, #2
 1859              	.LVL187:
 1860 00c4 FFF7FEFF 		bl	CheckITStatus
 1861              	.LVL188:
1545:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_BOF:
 1862              		.loc 1 1545 0
 1863 00c8 08BD     		pop	{r3, pc}
 1864              	.LVL189:
 1865              	.L163:
1548:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1866              		.loc 1 1548 0
 1867 00ca 8069     		ldr	r0, [r0, #24]
 1868              	.LVL190:
 1869 00cc 0421     		movs	r1, #4
 1870              	.LVL191:
 1871 00ce FFF7FEFF 		bl	CheckITStatus
 1872              	.LVL192:
1549:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_LEC:
 1873              		.loc 1 1549 0
 1874 00d2 08BD     		pop	{r3, pc}
 1875              	.LVL193:
 1876              	.L160:
1552:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1877              		.loc 1 1552 0
 1878 00d4 8069     		ldr	r0, [r0, #24]
 1879              	.LVL194:
 1880 00d6 7021     		movs	r1, #112
 1881              	.LVL195:
 1882 00d8 FFF7FEFF 		bl	CheckITStatus
 1883              	.LVL196:
1553:.//FWLIB/src/stm32f4xx_can.c ****       case CAN_IT_ERR:
 1884              		.loc 1 1553 0
 1885 00dc 08BD     		pop	{r3, pc}
 1886              	.LVL197:
 1887              	.L167:
1556:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1888              		.loc 1 1556 0
 1889 00de 4068     		ldr	r0, [r0, #4]
 1890              	.LVL198:
 1891 00e0 0421     		movs	r1, #4
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 69


 1892              	.LVL199:
 1893 00e2 FFF7FEFF 		bl	CheckITStatus
 1894              	.LVL200:
1557:.//FWLIB/src/stm32f4xx_can.c ****       default:
 1895              		.loc 1 1557 0
 1896 00e6 08BD     		pop	{r3, pc}
 1897              	.LVL201:
 1898              	.L168:
1567:.//FWLIB/src/stm32f4xx_can.c ****   }
 1899              		.loc 1 1567 0
 1900 00e8 0020     		movs	r0, #0
 1901              	.LVL202:
 1902 00ea 08BD     		pop	{r3, pc}
 1903              	.LVL203:
 1904              	.L169:
1560:.//FWLIB/src/stm32f4xx_can.c ****         break;
 1905              		.loc 1 1560 0
 1906 00ec 0020     		movs	r0, #0
 1907              	.LVL204:
1572:.//FWLIB/src/stm32f4xx_can.c **** 
 1908              		.loc 1 1572 0
 1909 00ee 08BD     		pop	{r3, pc}
 1910              	.L172:
 1911              		.align	2
 1912              	.L171:
 1913 00f0 01010100 		.word	65793
 1914              		.cfi_endproc
 1915              	.LFE134:
 1917              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1918              		.align	2
 1919              		.global	CAN_ClearITPendingBit
 1920              		.thumb
 1921              		.thumb_func
 1923              	CAN_ClearITPendingBit:
 1924              	.LFB135:
1594:.//FWLIB/src/stm32f4xx_can.c ****   /* Check the parameters */
 1925              		.loc 1 1594 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              		@ link register save eliminated.
 1930              	.LVL205:
1599:.//FWLIB/src/stm32f4xx_can.c ****   {
 1931              		.loc 1 1599 0
 1932 0000 B1F5807F 		cmp	r1, #256
 1933 0004 37D0     		beq	.L175
 1934 0006 0CD8     		bhi	.L176
 1935 0008 0829     		cmp	r1, #8
 1936 000a 25D0     		beq	.L177
 1937 000c 04D8     		bhi	.L178
 1938 000e 0129     		cmp	r1, #1
 1939 0010 1CD0     		beq	.L179
 1940 0012 0429     		cmp	r1, #4
 1941 0014 1DD0     		beq	.L180
 1942 0016 7047     		bx	lr
 1943              	.L178:
 1944 0018 2029     		cmp	r1, #32
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 70


 1945 001a 20D0     		beq	.L181
 1946 001c 4029     		cmp	r1, #64
 1947 001e 21D0     		beq	.L182
 1948 0020 7047     		bx	lr
 1949              	.L176:
 1950 0022 B1F5006F 		cmp	r1, #2048
 1951 0026 2FD0     		beq	.L183
 1952 0028 06D8     		bhi	.L184
 1953 002a B1F5007F 		cmp	r1, #512
 1954 002e 25D0     		beq	.L185
 1955 0030 B1F5806F 		cmp	r1, #1024
 1956 0034 25D0     		beq	.L186
 1957 0036 7047     		bx	lr
 1958              	.L184:
 1959 0038 B1F5803F 		cmp	r1, #65536
 1960 003c 15D0     		beq	.L187
 1961 003e B1F5003F 		cmp	r1, #131072
 1962 0042 15D0     		beq	.L188
 1963 0044 B1F5004F 		cmp	r1, #32768
 1964 0048 27D1     		bne	.L173
 1965 004a 22E0     		b	.L189
 1966              	.L179:
1603:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1967              		.loc 1 1603 0
 1968 004c 134B     		ldr	r3, .L190
 1969 004e 8360     		str	r3, [r0, #8]
1604:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 1970              		.loc 1 1604 0
 1971 0050 7047     		bx	lr
 1972              	.L180:
1607:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1973              		.loc 1 1607 0
 1974 0052 0823     		movs	r3, #8
 1975 0054 C360     		str	r3, [r0, #12]
1608:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 1976              		.loc 1 1608 0
 1977 0056 7047     		bx	lr
 1978              	.L177:
1611:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1979              		.loc 1 1611 0
 1980 0058 1023     		movs	r3, #16
 1981 005a C360     		str	r3, [r0, #12]
1612:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 1982              		.loc 1 1612 0
 1983 005c 7047     		bx	lr
 1984              	.L181:
1615:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1985              		.loc 1 1615 0
 1986 005e 0823     		movs	r3, #8
 1987 0060 0361     		str	r3, [r0, #16]
1616:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 1988              		.loc 1 1616 0
 1989 0062 7047     		bx	lr
 1990              	.L182:
1619:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1991              		.loc 1 1619 0
 1992 0064 1023     		movs	r3, #16
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 71


 1993 0066 0361     		str	r3, [r0, #16]
1620:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 1994              		.loc 1 1620 0
 1995 0068 7047     		bx	lr
 1996              	.L187:
1623:.//FWLIB/src/stm32f4xx_can.c ****       break;
 1997              		.loc 1 1623 0
 1998 006a 0823     		movs	r3, #8
 1999 006c 4360     		str	r3, [r0, #4]
1624:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 2000              		.loc 1 1624 0
 2001 006e 7047     		bx	lr
 2002              	.L188:
1627:.//FWLIB/src/stm32f4xx_can.c ****       break;
 2003              		.loc 1 1627 0
 2004 0070 1023     		movs	r3, #16
 2005 0072 4360     		str	r3, [r0, #4]
1628:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 2006              		.loc 1 1628 0
 2007 0074 7047     		bx	lr
 2008              	.L175:
1631:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 2009              		.loc 1 1631 0
 2010 0076 0423     		movs	r3, #4
 2011 0078 4360     		str	r3, [r0, #4]
1633:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 2012              		.loc 1 1633 0
 2013 007a 7047     		bx	lr
 2014              	.L185:
1636:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2015              		.loc 1 1636 0
 2016 007c 0423     		movs	r3, #4
 2017 007e 4360     		str	r3, [r0, #4]
1638:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 2018              		.loc 1 1638 0
 2019 0080 7047     		bx	lr
 2020              	.L186:
1641:.//FWLIB/src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 2021              		.loc 1 1641 0
 2022 0082 0423     		movs	r3, #4
 2023 0084 4360     		str	r3, [r0, #4]
1643:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 2024              		.loc 1 1643 0
 2025 0086 7047     		bx	lr
 2026              	.L183:
1646:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2027              		.loc 1 1646 0
 2028 0088 0023     		movs	r3, #0
 2029 008a 8361     		str	r3, [r0, #24]
1648:.//FWLIB/src/stm32f4xx_can.c ****       break;
 2030              		.loc 1 1648 0
 2031 008c 0423     		movs	r3, #4
 2032 008e 4360     		str	r3, [r0, #4]
1649:.//FWLIB/src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 2033              		.loc 1 1649 0
 2034 0090 7047     		bx	lr
 2035              	.L189:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 72


1652:.//FWLIB/src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 2036              		.loc 1 1652 0
 2037 0092 0023     		movs	r3, #0
 2038 0094 8361     		str	r3, [r0, #24]
1654:.//FWLIB/src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 2039              		.loc 1 1654 0
 2040 0096 0423     		movs	r3, #4
 2041 0098 4360     		str	r3, [r0, #4]
 2042              	.L173:
 2043 009a 7047     		bx	lr
 2044              	.L191:
 2045              		.align	2
 2046              	.L190:
 2047 009c 01010100 		.word	65793
 2048              		.cfi_endproc
 2049              	.LFE135:
 2051              		.text
 2052              	.Letext0:
 2053              		.file 2 "/Users/ertuil/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 2054              		.file 3 "/Users/ertuil/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 2055              		.file 4 "USER/stm32f4xx.h"
 2056              		.file 5 "FWLIB/inc/stm32f4xx_can.h"
 2057              		.file 6 "CORE/core_cm4.h"
 2058              		.file 7 "FWLIB/inc/stm32f4xx_rcc.h"
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:22     .text.CheckITStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:26     .text.CheckITStatus:0000000000000000 CheckITStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:53     .text.CAN_DeInit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:58     .text.CAN_DeInit:0000000000000000 CAN_DeInit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:103    .text.CAN_DeInit:0000000000000034 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:108    .text.CAN_Init:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:113    .text.CAN_Init:0000000000000000 CAN_Init
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:315    .text.CAN_FilterInit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:320    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:477    .text.CAN_FilterInit:00000000000000f0 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:482    .text.CAN_StructInit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:487    .text.CAN_StructInit:0000000000000000 CAN_StructInit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:526    .text.CAN_SlaveStartBank:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:531    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:562    .text.CAN_SlaveStartBank:0000000000000038 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:567    .text.CAN_DBGFreeze:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:572    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:597    .text.CAN_TTComModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:602    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:651    .text.CAN_Transmit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:656    .text.CAN_Transmit:0000000000000000 CAN_Transmit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:818    .text.CAN_TransmitStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:823    .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:925    .text.CAN_TransmitStatus:0000000000000068 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:932    .text.CAN_CancelTransmit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:937    .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:976    .text.CAN_Receive:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:981    .text.CAN_Receive:0000000000000000 CAN_Receive
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1086   .text.CAN_FIFORelease:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1091   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1116   .text.CAN_MessagePending:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1121   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1159   .text.CAN_OperatingModeRequest:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1164   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1310   .text.CAN_Sleep:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1315   .text.CAN_Sleep:0000000000000000 CAN_Sleep
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1348   .text.CAN_WakeUp:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1353   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1403   .text.CAN_GetLastErrorCode:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1408   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1427   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1432   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1451   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1456   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1475   .text.CAN_ITConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1480   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1508   .text.CAN_GetFlagStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1513   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1626   .text.CAN_ClearFlag:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1631   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1678   .text.CAN_ClearFlag:0000000000000034 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1683   .text.CAN_GetITStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1688   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1913   .text.CAN_GetITStatus:00000000000000f0 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1918   .text.CAN_ClearITPendingBit:0000000000000000 $t
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s 			page 74


/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:1923   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccqEh4f8.s:2047   .text.CAN_ClearITPendingBit:000000000000009c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
