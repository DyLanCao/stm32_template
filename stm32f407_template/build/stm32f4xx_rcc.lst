ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_rcc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.RCC_DeInit,"ax",%progbits
  22              		.align	2
  23              		.global	RCC_DeInit
  24              		.thumb
  25              		.thumb_func
  27              	RCC_DeInit:
  28              	.LFB112:
  29              		.file 1 ".//FWLIB/src/stm32f4xx_rcc.c"
   1:.//FWLIB/src/stm32f4xx_rcc.c **** /**
   2:.//FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:.//FWLIB/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:.//FWLIB/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:.//FWLIB/src/stm32f4xx_rcc.c ****   * @version V1.4.0
   6:.//FWLIB/src/stm32f4xx_rcc.c ****   * @date    04-August-2014
   7:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:.//FWLIB/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:.//FWLIB/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:.//FWLIB/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:.//FWLIB/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:.//FWLIB/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  14:.//FWLIB/src/stm32f4xx_rcc.c ****  @verbatim                
  15:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:.//FWLIB/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:.//FWLIB/src/stm32f4xx_rcc.c ****     [..]  
  19:.//FWLIB/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:.//FWLIB/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:.//FWLIB/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:.//FWLIB/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:.//FWLIB/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:.//FWLIB/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:.//FWLIB/src/stm32f4xx_rcc.c ****     [..]          
  29:.//FWLIB/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 2


  30:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:.//FWLIB/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:.//FWLIB/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:.//FWLIB/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:.//FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:.//FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:.//FWLIB/src/stm32f4xx_rcc.c ****   * @attention
  40:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  41:.//FWLIB/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  42:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  43:.//FWLIB/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:.//FWLIB/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:.//FWLIB/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  47:.//FWLIB/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  49:.//FWLIB/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:.//FWLIB/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:.//FWLIB/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:.//FWLIB/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:.//FWLIB/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:.//FWLIB/src/stm32f4xx_rcc.c ****   *
  55:.//FWLIB/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:.//FWLIB/src/stm32f4xx_rcc.c ****   */
  57:.//FWLIB/src/stm32f4xx_rcc.c **** 
  58:.//FWLIB/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:.//FWLIB/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:.//FWLIB/src/stm32f4xx_rcc.c **** 
  61:.//FWLIB/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
  63:.//FWLIB/src/stm32f4xx_rcc.c ****   */
  64:.//FWLIB/src/stm32f4xx_rcc.c **** 
  65:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
  68:.//FWLIB/src/stm32f4xx_rcc.c ****   */ 
  69:.//FWLIB/src/stm32f4xx_rcc.c **** 
  70:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:.//FWLIB/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:.//FWLIB/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:.//FWLIB/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:.//FWLIB/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:.//FWLIB/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:.//FWLIB/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:.//FWLIB/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 3


  87:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:.//FWLIB/src/stm32f4xx_rcc.c **** 
  89:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:.//FWLIB/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:.//FWLIB/src/stm32f4xx_rcc.c **** 
  93:.//FWLIB/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:.//FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:.//FWLIB/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:.//FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:.//FWLIB/src/stm32f4xx_rcc.c **** 
  99:.//FWLIB/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:.//FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:.//FWLIB/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:.//FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:.//FWLIB/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:.//FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:.//FWLIB/src/stm32f4xx_rcc.c **** 
 108:.//FWLIB/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:.//FWLIB/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:.//FWLIB/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:.//FWLIB/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:.//FWLIB/src/stm32f4xx_rcc.c **** 
 114:.//FWLIB/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:.//FWLIB/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:.//FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:.//FWLIB/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:.//FWLIB/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:.//FWLIB/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:.//FWLIB/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 121:.//FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 122:.//FWLIB/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 123:.//FWLIB/src/stm32f4xx_rcc.c **** 
 124:.//FWLIB/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 125:.//FWLIB/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 126:.//FWLIB/src/stm32f4xx_rcc.c **** 
 127:.//FWLIB/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 128:.//FWLIB/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 129:.//FWLIB/src/stm32f4xx_rcc.c **** 
 130:.//FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 131:.//FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 132:.//FWLIB/src/stm32f4xx_rcc.c **** 
 133:.//FWLIB/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 134:.//FWLIB/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 135:.//FWLIB/src/stm32f4xx_rcc.c **** 
 136:.//FWLIB/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 137:.//FWLIB/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 138:.//FWLIB/src/stm32f4xx_rcc.c **** 
 139:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 140:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 141:.//FWLIB/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 142:.//FWLIB/src/stm32f4xx_rcc.c **** 
 143:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 4


 144:.//FWLIB/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 145:.//FWLIB/src/stm32f4xx_rcc.c **** 
 146:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 147:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
 148:.//FWLIB/src/stm32f4xx_rcc.c ****   */ 
 149:.//FWLIB/src/stm32f4xx_rcc.c **** 
 150:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 151:.//FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 152:.//FWLIB/src/stm32f4xx_rcc.c ****  *
 153:.//FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 154:.//FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================
 155:.//FWLIB/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 156:.//FWLIB/src/stm32f4xx_rcc.c ****  ===================================================================================  
 157:.//FWLIB/src/stm32f4xx_rcc.c ****     [..]
 158:.//FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 159:.//FWLIB/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 160:.//FWLIB/src/stm32f4xx_rcc.c ****   
 161:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 162:.//FWLIB/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 163:.//FWLIB/src/stm32f4xx_rcc.c **** 
 164:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 165:.//FWLIB/src/stm32f4xx_rcc.c ****           clock source.
 166:.//FWLIB/src/stm32f4xx_rcc.c **** 
 167:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 168:.//FWLIB/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 169:.//FWLIB/src/stm32f4xx_rcc.c **** 
 170:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 171:.//FWLIB/src/stm32f4xx_rcc.c **** 
 172:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 173:.//FWLIB/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 174:.//FWLIB/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 175:.//FWLIB/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 176:.//FWLIB/src/stm32f4xx_rcc.c **** 
 177:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 178:.//FWLIB/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 179:.//FWLIB/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 180:.//FWLIB/src/stm32f4xx_rcc.c ****      
 181:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 182:.//FWLIB/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx devices.
 183:.//FWLIB/src/stm32f4xx_rcc.c ****   
 184:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 185:.//FWLIB/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 186:.//FWLIB/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 187:.//FWLIB/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 188:.//FWLIB/src/stm32f4xx_rcc.c ****          exception vector.   
 189:.//FWLIB/src/stm32f4xx_rcc.c **** 
 190:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 191:.//FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 192:.//FWLIB/src/stm32f4xx_rcc.c **** 
 193:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 194:.//FWLIB/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 195:.//FWLIB/src/stm32f4xx_rcc.c ****  @endverbatim
 196:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
 197:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 198:.//FWLIB/src/stm32f4xx_rcc.c **** 
 199:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 200:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 5


 201:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 202:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 203:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 204:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 205:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 206:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 207:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 208:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 209:.//FWLIB/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 210:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 211:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 212:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 213:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 214:.//FWLIB/src/stm32f4xx_rcc.c **** {
  30              		.loc 1 214 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 215:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 216:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  35              		.loc 1 216 0
  36 0000 0E4B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38 0004 42F00102 		orr	r2, r2, #1
  39 0008 1A60     		str	r2, [r3]
 217:.//FWLIB/src/stm32f4xx_rcc.c **** 
 218:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 219:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  40              		.loc 1 219 0
  41 000a 0021     		movs	r1, #0
  42 000c 9960     		str	r1, [r3, #8]
 220:.//FWLIB/src/stm32f4xx_rcc.c **** 
 221:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
 222:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  43              		.loc 1 222 0
  44 000e 1A68     		ldr	r2, [r3]
  45 0010 22F0A852 		bic	r2, r2, #352321536
  46 0014 22F41022 		bic	r2, r2, #589824
  47 0018 1A60     		str	r2, [r3]
 223:.//FWLIB/src/stm32f4xx_rcc.c **** 
 224:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 225:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  48              		.loc 1 225 0
  49 001a 094A     		ldr	r2, .L2+4
  50 001c 5A60     		str	r2, [r3, #4]
 226:.//FWLIB/src/stm32f4xx_rcc.c **** 
 227:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 228:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  51              		.loc 1 228 0
  52 001e 094A     		ldr	r2, .L2+8
  53 0020 C3F88420 		str	r2, [r3, #132]
 229:.//FWLIB/src/stm32f4xx_rcc.c **** 
 230:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
 231:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  54              		.loc 1 231 0
  55 0024 02F18062 		add	r2, r2, #67108864
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 6


  56 0028 C3F88820 		str	r2, [r3, #136]
 232:.//FWLIB/src/stm32f4xx_rcc.c ****  
 233:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 234:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  57              		.loc 1 234 0
  58 002c 1A68     		ldr	r2, [r3]
  59 002e 22F48022 		bic	r2, r2, #262144
  60 0032 1A60     		str	r2, [r3]
 235:.//FWLIB/src/stm32f4xx_rcc.c **** 
 236:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 237:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  61              		.loc 1 237 0
  62 0034 D960     		str	r1, [r3, #12]
 238:.//FWLIB/src/stm32f4xx_rcc.c **** 
 239:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
 240:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000; 
  63              		.loc 1 240 0
  64 0036 C3F88C10 		str	r1, [r3, #140]
  65 003a 7047     		bx	lr
  66              	.L3:
  67              		.align	2
  68              	.L2:
  69 003c 00380240 		.word	1073887232
  70 0040 10300024 		.word	603992080
  71 0044 00300020 		.word	536883200
  72              		.cfi_endproc
  73              	.LFE112:
  75              		.section	.text.RCC_HSEConfig,"ax",%progbits
  76              		.align	2
  77              		.global	RCC_HSEConfig
  78              		.thumb
  79              		.thumb_func
  81              	RCC_HSEConfig:
  82              	.LFB113:
 241:.//FWLIB/src/stm32f4xx_rcc.c **** }
 242:.//FWLIB/src/stm32f4xx_rcc.c **** 
 243:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 244:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 245:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 246:.//FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 247:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 248:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 249:.//FWLIB/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 250:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 251:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 252:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 253:.//FWLIB/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 254:.//FWLIB/src/stm32f4xx_rcc.c ****   *         function.    
 255:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 256:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 257:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 258:.//FWLIB/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 259:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 260:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 261:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 262:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 263:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 7


 264:.//FWLIB/src/stm32f4xx_rcc.c **** {
  83              		.loc 1 264 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88              	.LVL0:
 265:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 266:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 267:.//FWLIB/src/stm32f4xx_rcc.c **** 
 268:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 269:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  89              		.loc 1 269 0
  90 0000 024B     		ldr	r3, .L5
  91 0002 0022     		movs	r2, #0
  92 0004 1A70     		strb	r2, [r3]
 270:.//FWLIB/src/stm32f4xx_rcc.c **** 
 271:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 272:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  93              		.loc 1 272 0
  94 0006 1870     		strb	r0, [r3]
  95 0008 7047     		bx	lr
  96              	.L6:
  97 000a 00BF     		.align	2
  98              	.L5:
  99 000c 02380240 		.word	1073887234
 100              		.cfi_endproc
 101              	.LFE113:
 103              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 104              		.align	2
 105              		.global	RCC_AdjustHSICalibrationValue
 106              		.thumb
 107              		.thumb_func
 109              	RCC_AdjustHSICalibrationValue:
 110              	.LFB115:
 273:.//FWLIB/src/stm32f4xx_rcc.c **** }
 274:.//FWLIB/src/stm32f4xx_rcc.c **** 
 275:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 276:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 277:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 278:.//FWLIB/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 279:.//FWLIB/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 280:.//FWLIB/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 281:.//FWLIB/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 282:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 283:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 284:.//FWLIB/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 285:.//FWLIB/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 286:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 287:.//FWLIB/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 288:.//FWLIB/src/stm32f4xx_rcc.c **** {
 289:.//FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 290:.//FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 291:.//FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 292:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:.//FWLIB/src/stm32f4xx_rcc.c ****   do
 294:.//FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 8


 295:.//FWLIB/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 296:.//FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 297:.//FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 298:.//FWLIB/src/stm32f4xx_rcc.c **** 
 299:.//FWLIB/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 300:.//FWLIB/src/stm32f4xx_rcc.c ****   {
 301:.//FWLIB/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 302:.//FWLIB/src/stm32f4xx_rcc.c ****   }
 303:.//FWLIB/src/stm32f4xx_rcc.c ****   else
 304:.//FWLIB/src/stm32f4xx_rcc.c ****   {
 305:.//FWLIB/src/stm32f4xx_rcc.c ****     status = ERROR;
 306:.//FWLIB/src/stm32f4xx_rcc.c ****   }
 307:.//FWLIB/src/stm32f4xx_rcc.c ****   return (status);
 308:.//FWLIB/src/stm32f4xx_rcc.c **** }
 309:.//FWLIB/src/stm32f4xx_rcc.c **** 
 310:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 311:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 312:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 313:.//FWLIB/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 314:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 315:.//FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 316:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 317:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 318:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 319:.//FWLIB/src/stm32f4xx_rcc.c **** {
 111              		.loc 1 319 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.LVL1:
 320:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 321:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 322:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 323:.//FWLIB/src/stm32f4xx_rcc.c **** 
 324:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 117              		.loc 1 324 0
 118 0000 034A     		ldr	r2, .L8
 119 0002 1368     		ldr	r3, [r2]
 120              	.LVL2:
 325:.//FWLIB/src/stm32f4xx_rcc.c **** 
 326:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 327:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 121              		.loc 1 327 0
 122 0004 23F0F803 		bic	r3, r3, #248
 123              	.LVL3:
 328:.//FWLIB/src/stm32f4xx_rcc.c **** 
 329:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 330:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 124              		.loc 1 330 0
 125 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 126              	.LVL4:
 331:.//FWLIB/src/stm32f4xx_rcc.c **** 
 332:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 333:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 127              		.loc 1 333 0
 128 000c 1060     		str	r0, [r2]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 9


 129 000e 7047     		bx	lr
 130              	.L9:
 131              		.align	2
 132              	.L8:
 133 0010 00380240 		.word	1073887232
 134              		.cfi_endproc
 135              	.LFE115:
 137              		.section	.text.RCC_HSICmd,"ax",%progbits
 138              		.align	2
 139              		.global	RCC_HSICmd
 140              		.thumb
 141              		.thumb_func
 143              	RCC_HSICmd:
 144              	.LFB116:
 334:.//FWLIB/src/stm32f4xx_rcc.c **** }
 335:.//FWLIB/src/stm32f4xx_rcc.c **** 
 336:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 337:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 338:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 339:.//FWLIB/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 340:.//FWLIB/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 341:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 342:.//FWLIB/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 343:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 344:.//FWLIB/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 345:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 346:.//FWLIB/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 347:.//FWLIB/src/stm32f4xx_rcc.c ****   *         system clock source.  
 348:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 349:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 350:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 351:.//FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 352:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 353:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 354:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:.//FWLIB/src/stm32f4xx_rcc.c **** {
 145              		.loc 1 355 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150              	.LVL5:
 356:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 357:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:.//FWLIB/src/stm32f4xx_rcc.c **** 
 359:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 151              		.loc 1 359 0
 152 0000 014B     		ldr	r3, .L11
 153 0002 1860     		str	r0, [r3]
 154 0004 7047     		bx	lr
 155              	.L12:
 156 0006 00BF     		.align	2
 157              	.L11:
 158 0008 00004742 		.word	1111949312
 159              		.cfi_endproc
 160              	.LFE116:
 162              		.section	.text.RCC_LSEConfig,"ax",%progbits
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 10


 163              		.align	2
 164              		.global	RCC_LSEConfig
 165              		.thumb
 166              		.thumb_func
 168              	RCC_LSEConfig:
 169              	.LFB117:
 360:.//FWLIB/src/stm32f4xx_rcc.c **** }
 361:.//FWLIB/src/stm32f4xx_rcc.c **** 
 362:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 363:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 364:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 365:.//FWLIB/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 366:.//FWLIB/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 367:.//FWLIB/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 368:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 369:.//FWLIB/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 370:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 371:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 372:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 373:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 374:.//FWLIB/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 375:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 376:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 377:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 378:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 379:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 380:.//FWLIB/src/stm32f4xx_rcc.c **** {
 170              		.loc 1 380 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL6:
 381:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 382:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 383:.//FWLIB/src/stm32f4xx_rcc.c **** 
 384:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 385:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 386:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 176              		.loc 1 386 0
 177 0000 084B     		ldr	r3, .L17
 178 0002 0022     		movs	r2, #0
 179 0004 1A70     		strb	r2, [r3]
 387:.//FWLIB/src/stm32f4xx_rcc.c **** 
 388:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 389:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 180              		.loc 1 389 0
 181 0006 1A70     		strb	r2, [r3]
 390:.//FWLIB/src/stm32f4xx_rcc.c **** 
 391:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 392:.//FWLIB/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 182              		.loc 1 392 0
 183 0008 0128     		cmp	r0, #1
 184 000a 02D0     		beq	.L15
 185 000c 0428     		cmp	r0, #4
 186 000e 04D0     		beq	.L16
 187 0010 7047     		bx	lr
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 11


 188              	.L15:
 393:.//FWLIB/src/stm32f4xx_rcc.c ****   {
 394:.//FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 395:.//FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 396:.//FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 189              		.loc 1 396 0
 190 0012 0122     		movs	r2, #1
 191 0014 034B     		ldr	r3, .L17
 192 0016 1A70     		strb	r2, [r3]
 397:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 193              		.loc 1 397 0
 194 0018 7047     		bx	lr
 195              	.L16:
 398:.//FWLIB/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 399:.//FWLIB/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 400:.//FWLIB/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 196              		.loc 1 400 0
 197 001a 0522     		movs	r2, #5
 198 001c 014B     		ldr	r3, .L17
 199 001e 1A70     		strb	r2, [r3]
 200 0020 7047     		bx	lr
 201              	.L18:
 202 0022 00BF     		.align	2
 203              	.L17:
 204 0024 70380240 		.word	1073887344
 205              		.cfi_endproc
 206              	.LFE117:
 208              		.section	.text.RCC_LSICmd,"ax",%progbits
 209              		.align	2
 210              		.global	RCC_LSICmd
 211              		.thumb
 212              		.thumb_func
 214              	RCC_LSICmd:
 215              	.LFB118:
 401:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 402:.//FWLIB/src/stm32f4xx_rcc.c ****     default:
 403:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 404:.//FWLIB/src/stm32f4xx_rcc.c ****   }
 405:.//FWLIB/src/stm32f4xx_rcc.c **** }
 406:.//FWLIB/src/stm32f4xx_rcc.c **** 
 407:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 408:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 409:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 410:.//FWLIB/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 411:.//FWLIB/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 412:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 413:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 414:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 416:.//FWLIB/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 417:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 418:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 419:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 420:.//FWLIB/src/stm32f4xx_rcc.c **** {
 216              		.loc 1 420 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 12


 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL7:
 421:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 422:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 423:.//FWLIB/src/stm32f4xx_rcc.c **** 
 424:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 222              		.loc 1 424 0
 223 0000 014B     		ldr	r3, .L20
 224 0002 1860     		str	r0, [r3]
 225 0004 7047     		bx	lr
 226              	.L21:
 227 0006 00BF     		.align	2
 228              	.L20:
 229 0008 800E4742 		.word	1111953024
 230              		.cfi_endproc
 231              	.LFE118:
 233              		.section	.text.RCC_PLLConfig,"ax",%progbits
 234              		.align	2
 235              		.global	RCC_PLLConfig
 236              		.thumb
 237              		.thumb_func
 239              	RCC_PLLConfig:
 240              	.LFB119:
 425:.//FWLIB/src/stm32f4xx_rcc.c **** }
 426:.//FWLIB/src/stm32f4xx_rcc.c **** 
 427:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 428:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 429:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 430:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 431:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 432:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 433:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 434:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 435:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 436:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 437:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 438:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 439:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 440:.//FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 441:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 442:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 443:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 444:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 445:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 446:.//FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 447:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 448:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 449:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 450:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 451:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 452:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 453:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 454:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 455:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 456:.//FWLIB/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 457:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 13


 458:.//FWLIB/src/stm32f4xx_rcc.c ****   *         correctly.
 459:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 460:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 461:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 462:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 463:.//FWLIB/src/stm32f4xx_rcc.c **** {
 241              		.loc 1 463 0
 242              		.cfi_startproc
 243              		@ args = 4, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246              	.LVL8:
 464:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 465:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 466:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 467:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 468:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 469:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 470:.//FWLIB/src/stm32f4xx_rcc.c **** 
 471:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 247              		.loc 1 471 0
 248 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 249              	.LVL9:
 250 0004 5B08     		lsrs	r3, r3, #1
 251              	.LVL10:
 252 0006 013B     		subs	r3, r3, #1
 253 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 254 000c 0843     		orrs	r0, r0, r1
 255              	.LVL11:
 256 000e 009B     		ldr	r3, [sp]
 257 0010 40EA0361 		orr	r1, r0, r3, lsl #24
 258 0014 014B     		ldr	r3, .L23
 259 0016 5960     		str	r1, [r3, #4]
 260              	.LVL12:
 261 0018 7047     		bx	lr
 262              	.L24:
 263 001a 00BF     		.align	2
 264              	.L23:
 265 001c 00380240 		.word	1073887232
 266              		.cfi_endproc
 267              	.LFE119:
 269              		.section	.text.RCC_PLLCmd,"ax",%progbits
 270              		.align	2
 271              		.global	RCC_PLLCmd
 272              		.thumb
 273              		.thumb_func
 275              	RCC_PLLCmd:
 276              	.LFB120:
 472:.//FWLIB/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 473:.//FWLIB/src/stm32f4xx_rcc.c **** }
 474:.//FWLIB/src/stm32f4xx_rcc.c **** 
 475:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 476:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 477:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 478:.//FWLIB/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 479:.//FWLIB/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 480:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 14


 481:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 482:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 483:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 484:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 485:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 486:.//FWLIB/src/stm32f4xx_rcc.c **** {
 277              		.loc 1 486 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL13:
 487:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 488:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 489:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 283              		.loc 1 489 0
 284 0000 014B     		ldr	r3, .L26
 285 0002 1860     		str	r0, [r3]
 286 0004 7047     		bx	lr
 287              	.L27:
 288 0006 00BF     		.align	2
 289              	.L26:
 290 0008 60004742 		.word	1111949408
 291              		.cfi_endproc
 292              	.LFE120:
 294              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 295              		.align	2
 296              		.global	RCC_PLLI2SConfig
 297              		.thumb
 298              		.thumb_func
 300              	RCC_PLLI2SConfig:
 301              	.LFB121:
 490:.//FWLIB/src/stm32f4xx_rcc.c **** }
 491:.//FWLIB/src/stm32f4xx_rcc.c **** 
 492:.//FWLIB/src/stm32f4xx_rcc.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx)
 493:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 494:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 495:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 496:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 497:.//FWLIB/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 498:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
 499:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 500:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 501:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 502:.//FWLIB/src/stm32f4xx_rcc.c ****   *             
 503:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 504:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 505:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 506:.//FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 507:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
 508:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 509:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 510:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 511:.//FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 512:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 513:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 514:.//FWLIB/src/stm32f4xx_rcc.c ****   */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 15


 515:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 516:.//FWLIB/src/stm32f4xx_rcc.c **** {
 302              		.loc 1 516 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307              	.LVL14:
 517:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 518:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 519:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 520:.//FWLIB/src/stm32f4xx_rcc.c **** 
 521:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 308              		.loc 1 521 0
 309 0000 0907     		lsls	r1, r1, #28
 310              	.LVL15:
 311 0002 41EA8010 		orr	r0, r1, r0, lsl #6
 312              	.LVL16:
 313 0006 024B     		ldr	r3, .L29
 314 0008 C3F88400 		str	r0, [r3, #132]
 315 000c 7047     		bx	lr
 316              	.L30:
 317 000e 00BF     		.align	2
 318              	.L29:
 319 0010 00380240 		.word	1073887232
 320              		.cfi_endproc
 321              	.LFE121:
 323              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 324              		.align	2
 325              		.global	RCC_PLLI2SCmd
 326              		.thumb
 327              		.thumb_func
 329              	RCC_PLLI2SCmd:
 330              	.LFB122:
 522:.//FWLIB/src/stm32f4xx_rcc.c **** }
 523:.//FWLIB/src/stm32f4xx_rcc.c **** 
 524:.//FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F411xE)
 525:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 526:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 527:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
 528:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 529:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
 530:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 531:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 532:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 533:.//FWLIB/src/stm32f4xx_rcc.c ****   *
 534:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 535:.//FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 536:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 537:.//FWLIB/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 538:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 539:.//FWLIB/src/stm32f4xx_rcc.c ****   *
 540:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 541:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 542:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 543:.//FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 544:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 16


 545:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 546:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 547:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 548:.//FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 549:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 550:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 551:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 552:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 553:.//FWLIB/src/stm32f4xx_rcc.c **** {
 554:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 555:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 556:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 557:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 558:.//FWLIB/src/stm32f4xx_rcc.c **** 
 559:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 560:.//FWLIB/src/stm32f4xx_rcc.c **** }
 561:.//FWLIB/src/stm32f4xx_rcc.c **** 
 562:.//FWLIB/src/stm32f4xx_rcc.c **** #elif defined (STM32F427_437xx) || defined (STM32F429_439xx)
 563:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 564:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 565:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
 566:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 567:.//FWLIB/src/stm32f4xx_rcc.c ****   *         
 568:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 569:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 570:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 571:.//FWLIB/src/stm32f4xx_rcc.c ****   *             
 572:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 573:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 574:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 575:.//FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 576:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
 577:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 578:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 579:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 
 580:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 581:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 582:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 583:.//FWLIB/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 584:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 585:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 586:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 587:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 588:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 589:.//FWLIB/src/stm32f4xx_rcc.c **** {
 590:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 591:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 592:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 593:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 594:.//FWLIB/src/stm32f4xx_rcc.c **** 
 595:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 596:.//FWLIB/src/stm32f4xx_rcc.c **** }
 597:.//FWLIB/src/stm32f4xx_rcc.c **** #else
 598:.//FWLIB/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 599:.//FWLIB/src/stm32f4xx_rcc.c **** 
 600:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 601:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 17


 602:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 603:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 604:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 605:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 606:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 607:.//FWLIB/src/stm32f4xx_rcc.c **** {
 331              		.loc 1 607 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336              	.LVL17:
 608:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 609:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 610:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 337              		.loc 1 610 0
 338 0000 014B     		ldr	r3, .L32
 339 0002 1860     		str	r0, [r3]
 340 0004 7047     		bx	lr
 341              	.L33:
 342 0006 00BF     		.align	2
 343              	.L32:
 344 0008 68004742 		.word	1111949416
 345              		.cfi_endproc
 346              	.LFE122:
 348              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 349              		.align	2
 350              		.global	RCC_PLLSAIConfig
 351              		.thumb
 352              		.thumb_func
 354              	RCC_PLLSAIConfig:
 355              	.LFB123:
 611:.//FWLIB/src/stm32f4xx_rcc.c **** }
 612:.//FWLIB/src/stm32f4xx_rcc.c **** 
 613:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 614:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 615:.//FWLIB/src/stm32f4xx_rcc.c ****   *
 616:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 617:.//FWLIB/src/stm32f4xx_rcc.c ****   *        
 618:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 619:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 620:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 621:.//FWLIB/src/stm32f4xx_rcc.c ****   *             
 622:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 623:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 624:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 625:.//FWLIB/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 626:.//FWLIB/src/stm32f4xx_rcc.c ****   *           
 627:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 628:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 629:.//FWLIB/src/stm32f4xx_rcc.c ****   *            
 630:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 631:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 632:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
 633:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 634:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 635:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 18


 636:.//FWLIB/src/stm32f4xx_rcc.c **** {
 356              		.loc 1 636 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL18:
 637:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 638:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 639:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 640:.//FWLIB/src/stm32f4xx_rcc.c **** 
 641:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 362              		.loc 1 641 0
 363 0000 0906     		lsls	r1, r1, #24
 364              	.LVL19:
 365 0002 41EA8010 		orr	r0, r1, r0, lsl #6
 366              	.LVL20:
 367 0006 40EA0272 		orr	r2, r0, r2, lsl #28
 368              	.LVL21:
 369 000a 024B     		ldr	r3, .L35
 370 000c C3F88820 		str	r2, [r3, #136]
 371 0010 7047     		bx	lr
 372              	.L36:
 373 0012 00BF     		.align	2
 374              	.L35:
 375 0014 00380240 		.word	1073887232
 376              		.cfi_endproc
 377              	.LFE123:
 379              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 380              		.align	2
 381              		.global	RCC_PLLSAICmd
 382              		.thumb
 383              		.thumb_func
 385              	RCC_PLLSAICmd:
 386              	.LFB124:
 642:.//FWLIB/src/stm32f4xx_rcc.c **** }
 643:.//FWLIB/src/stm32f4xx_rcc.c **** 
 644:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 645:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 646:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
 647:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 648:.//FWLIB/src/stm32f4xx_rcc.c ****   *       
 649:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 650:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 651:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 652:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 653:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 654:.//FWLIB/src/stm32f4xx_rcc.c **** {
 387              		.loc 1 654 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392              	.LVL22:
 655:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 656:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 657:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 19


 393              		.loc 1 657 0
 394 0000 014B     		ldr	r3, .L38
 395 0002 1860     		str	r0, [r3]
 396 0004 7047     		bx	lr
 397              	.L39:
 398 0006 00BF     		.align	2
 399              	.L38:
 400 0008 70004742 		.word	1111949424
 401              		.cfi_endproc
 402              	.LFE124:
 404              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 405              		.align	2
 406              		.global	RCC_ClockSecuritySystemCmd
 407              		.thumb
 408              		.thumb_func
 410              	RCC_ClockSecuritySystemCmd:
 411              	.LFB125:
 658:.//FWLIB/src/stm32f4xx_rcc.c **** }
 659:.//FWLIB/src/stm32f4xx_rcc.c **** 
 660:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 661:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 662:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 663:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 664:.//FWLIB/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 665:.//FWLIB/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 666:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 667:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 668:.//FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 669:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 670:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 671:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 672:.//FWLIB/src/stm32f4xx_rcc.c **** {
 412              		.loc 1 672 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LVL23:
 673:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 674:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 675:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 418              		.loc 1 675 0
 419 0000 014B     		ldr	r3, .L41
 420 0002 1860     		str	r0, [r3]
 421 0004 7047     		bx	lr
 422              	.L42:
 423 0006 00BF     		.align	2
 424              	.L41:
 425 0008 4C004742 		.word	1111949388
 426              		.cfi_endproc
 427              	.LFE125:
 429              		.section	.text.RCC_MCO1Config,"ax",%progbits
 430              		.align	2
 431              		.global	RCC_MCO1Config
 432              		.thumb
 433              		.thumb_func
 435              	RCC_MCO1Config:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 20


 436              	.LFB126:
 676:.//FWLIB/src/stm32f4xx_rcc.c **** }
 677:.//FWLIB/src/stm32f4xx_rcc.c **** 
 678:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 679:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 680:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 681:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 682:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 684:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 685:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 686:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 687:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 688:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 689:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 690:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 691:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 692:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 693:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 694:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 695:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 696:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 697:.//FWLIB/src/stm32f4xx_rcc.c **** {
 437              		.loc 1 697 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442              	.LVL24:
 698:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 699:.//FWLIB/src/stm32f4xx_rcc.c ****   
 700:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 701:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 702:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 703:.//FWLIB/src/stm32f4xx_rcc.c **** 
 704:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 443              		.loc 1 704 0
 444 0000 034A     		ldr	r2, .L44
 445 0002 9368     		ldr	r3, [r2, #8]
 446              	.LVL25:
 705:.//FWLIB/src/stm32f4xx_rcc.c **** 
 706:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 707:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 447              		.loc 1 707 0
 448 0004 23F0EC63 		bic	r3, r3, #123731968
 449              	.LVL26:
 708:.//FWLIB/src/stm32f4xx_rcc.c **** 
 709:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 710:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 450              		.loc 1 710 0
 451 0008 0143     		orrs	r1, r1, r0
 452              	.LVL27:
 453 000a 1943     		orrs	r1, r1, r3
 454              	.LVL28:
 711:.//FWLIB/src/stm32f4xx_rcc.c **** 
 712:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 713:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 21


 455              		.loc 1 713 0
 456 000c 9160     		str	r1, [r2, #8]
 457 000e 7047     		bx	lr
 458              	.L45:
 459              		.align	2
 460              	.L44:
 461 0010 00380240 		.word	1073887232
 462              		.cfi_endproc
 463              	.LFE126:
 465              		.section	.text.RCC_MCO2Config,"ax",%progbits
 466              		.align	2
 467              		.global	RCC_MCO2Config
 468              		.thumb
 469              		.thumb_func
 471              	RCC_MCO2Config:
 472              	.LFB127:
 714:.//FWLIB/src/stm32f4xx_rcc.c **** }
 715:.//FWLIB/src/stm32f4xx_rcc.c **** 
 716:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 717:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 718:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 719:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 720:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 721:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 722:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 723:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 724:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 725:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 726:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 727:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 728:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 729:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 730:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 731:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 732:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 733:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 734:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 735:.//FWLIB/src/stm32f4xx_rcc.c **** {
 473              		.loc 1 735 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              	.LVL29:
 736:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 737:.//FWLIB/src/stm32f4xx_rcc.c ****   
 738:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 739:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 740:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 741:.//FWLIB/src/stm32f4xx_rcc.c ****   
 742:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 479              		.loc 1 742 0
 480 0000 034A     		ldr	r2, .L47
 481 0002 9368     		ldr	r3, [r2, #8]
 482              	.LVL30:
 743:.//FWLIB/src/stm32f4xx_rcc.c ****   
 744:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 22


 745:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 483              		.loc 1 745 0
 484 0004 23F07843 		bic	r3, r3, #-134217728
 485              	.LVL31:
 746:.//FWLIB/src/stm32f4xx_rcc.c **** 
 747:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 748:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 486              		.loc 1 748 0
 487 0008 0143     		orrs	r1, r1, r0
 488              	.LVL32:
 489 000a 1943     		orrs	r1, r1, r3
 490              	.LVL33:
 749:.//FWLIB/src/stm32f4xx_rcc.c **** 
 750:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 751:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 491              		.loc 1 751 0
 492 000c 9160     		str	r1, [r2, #8]
 493 000e 7047     		bx	lr
 494              	.L48:
 495              		.align	2
 496              	.L47:
 497 0010 00380240 		.word	1073887232
 498              		.cfi_endproc
 499              	.LFE127:
 501              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 502              		.align	2
 503              		.global	RCC_SYSCLKConfig
 504              		.thumb
 505              		.thumb_func
 507              	RCC_SYSCLKConfig:
 508              	.LFB128:
 752:.//FWLIB/src/stm32f4xx_rcc.c **** }
 753:.//FWLIB/src/stm32f4xx_rcc.c **** 
 754:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 755:.//FWLIB/src/stm32f4xx_rcc.c ****   * @}
 756:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 757:.//FWLIB/src/stm32f4xx_rcc.c **** 
 758:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 759:.//FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 760:.//FWLIB/src/stm32f4xx_rcc.c ****  *
 761:.//FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
 762:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
 763:.//FWLIB/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 764:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
 765:.//FWLIB/src/stm32f4xx_rcc.c ****     [..]
 766:.//FWLIB/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 767:.//FWLIB/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 768:.//FWLIB/src/stm32f4xx_rcc.c ****   
 769:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 770:.//FWLIB/src/stm32f4xx_rcc.c ****           HSE and PLL.
 771:.//FWLIB/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 772:.//FWLIB/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 773:.//FWLIB/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 774:.//FWLIB/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 775:.//FWLIB/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 776:.//FWLIB/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 777:.//FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 23


 778:.//FWLIB/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 779:.//FWLIB/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 780:.//FWLIB/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 781:.//FWLIB/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 782:.//FWLIB/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 783:.//FWLIB/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 784:.//FWLIB/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 785:.//FWLIB/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 786:.//FWLIB/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 787:.//FWLIB/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 788:.//FWLIB/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 789:.//FWLIB/src/stm32f4xx_rcc.c ****        
 790:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
 791:.//FWLIB/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
 792:.//FWLIB/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
 793:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 794:.//FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 795:.//FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 796:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 797:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 798:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 799:.//FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 800:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 801:.//FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 802:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 803:.//FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 804:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 805:.//FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 806:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 807:.//FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 808:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 809:.//FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 810:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 811:.//FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 812:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 813:.//FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 814:.//FWLIB/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+ 
 815:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx devices, the maximum frequency of the SYSCLK and HCLK is 180 MHz, 
 816:.//FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
 817:.//FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 818:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 819:.//FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 820:.//FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 821:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 822:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 823:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 824:.//FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 825:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 826:.//FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 827:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 828:.//FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 829:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 830:.//FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 831:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 832:.//FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 833:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 834:.//FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 24


 835:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 836:.//FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 837:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 838:.//FWLIB/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 839:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 840:.//FWLIB/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 841:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 842:.//FWLIB/src/stm32f4xx_rcc.c ****    
 843:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
 844:.//FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 845:.//FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 846:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 847:.//FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 848:.//FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 849:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 850:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 851:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 852:.//FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 853:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 854:.//FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 855:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 856:.//FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 857:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 858:.//FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 859:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 860:.//FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
 861:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 862:.//FWLIB/src/stm32f4xx_rcc.c **** 
 863:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) For STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 MHz, 
 864:.//FWLIB/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
 865:.//FWLIB/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 866:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 867:.//FWLIB/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 868:.//FWLIB/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
 869:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 870:.//FWLIB/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 871:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 872:.//FWLIB/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 873:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 874:.//FWLIB/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 875:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 876:.//FWLIB/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 877:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 878:.//FWLIB/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 879:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 880:.//FWLIB/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 881:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 882:.//FWLIB/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 883:.//FWLIB/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 884:.//FWLIB/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 885:.//FWLIB/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 886:.//FWLIB/src/stm32f4xx_rcc.c ****   
 887:.//FWLIB/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 888:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
 889:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
 890:.//FWLIB/src/stm32f4xx_rcc.c ****           [..] 
 891:.//FWLIB/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx devices:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 25


 892:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
 893:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
 894:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
 895:.//FWLIB/src/stm32f4xx_rcc.c ****           [..]  
 896:.//FWLIB/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
 897:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
 898:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
 899:.//FWLIB/src/stm32f4xx_rcc.c ****           On STM32F411xE devices:
 900:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
 901:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
 902:.//FWLIB/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
 903:.//FWLIB/src/stm32f4xx_rcc.c **** 
 904:.//FWLIB/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 905:.//FWLIB/src/stm32f4xx_rcc.c **** 
 906:.//FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
 907:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
 908:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 909:.//FWLIB/src/stm32f4xx_rcc.c **** 
 910:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 911:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 912:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 913:.//FWLIB/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 914:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 915:.//FWLIB/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 916:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 917:.//FWLIB/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 918:.//FWLIB/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 919:.//FWLIB/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 920:.//FWLIB/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 921:.//FWLIB/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 922:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 923:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 924:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 925:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 926:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 927:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 928:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 929:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 930:.//FWLIB/src/stm32f4xx_rcc.c **** {
 509              		.loc 1 930 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL34:
 931:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 932:.//FWLIB/src/stm32f4xx_rcc.c **** 
 933:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 934:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 935:.//FWLIB/src/stm32f4xx_rcc.c **** 
 936:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 515              		.loc 1 936 0
 516 0000 034A     		ldr	r2, .L50
 517 0002 9368     		ldr	r3, [r2, #8]
 518              	.LVL35:
 937:.//FWLIB/src/stm32f4xx_rcc.c **** 
 938:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 26


 939:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 519              		.loc 1 939 0
 520 0004 23F00303 		bic	r3, r3, #3
 521              	.LVL36:
 940:.//FWLIB/src/stm32f4xx_rcc.c **** 
 941:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 942:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 522              		.loc 1 942 0
 523 0008 1843     		orrs	r0, r0, r3
 524              	.LVL37:
 943:.//FWLIB/src/stm32f4xx_rcc.c **** 
 944:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 945:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 525              		.loc 1 945 0
 526 000a 9060     		str	r0, [r2, #8]
 527 000c 7047     		bx	lr
 528              	.L51:
 529 000e 00BF     		.align	2
 530              	.L50:
 531 0010 00380240 		.word	1073887232
 532              		.cfi_endproc
 533              	.LFE128:
 535              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 536              		.align	2
 537              		.global	RCC_GetSYSCLKSource
 538              		.thumb
 539              		.thumb_func
 541              	RCC_GetSYSCLKSource:
 542              	.LFB129:
 946:.//FWLIB/src/stm32f4xx_rcc.c **** }
 947:.//FWLIB/src/stm32f4xx_rcc.c **** 
 948:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 949:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 950:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
 951:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 952:.//FWLIB/src/stm32f4xx_rcc.c ****   *         of the following:
 953:.//FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 954:.//FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 955:.//FWLIB/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 956:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 957:.//FWLIB/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 958:.//FWLIB/src/stm32f4xx_rcc.c **** {
 543              		.loc 1 958 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 959:.//FWLIB/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 548              		.loc 1 959 0
 549 0000 024B     		ldr	r3, .L53
 550 0002 9868     		ldr	r0, [r3, #8]
 960:.//FWLIB/src/stm32f4xx_rcc.c **** }
 551              		.loc 1 960 0
 552 0004 00F00C00 		and	r0, r0, #12
 553 0008 7047     		bx	lr
 554              	.L54:
 555 000a 00BF     		.align	2
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 27


 556              	.L53:
 557 000c 00380240 		.word	1073887232
 558              		.cfi_endproc
 559              	.LFE129:
 561              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 562              		.align	2
 563              		.global	RCC_HCLKConfig
 564              		.thumb
 565              		.thumb_func
 567              	RCC_HCLKConfig:
 568              	.LFB130:
 961:.//FWLIB/src/stm32f4xx_rcc.c **** 
 962:.//FWLIB/src/stm32f4xx_rcc.c **** /**
 963:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 964:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 965:.//FWLIB/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 966:.//FWLIB/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 967:.//FWLIB/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 968:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 969:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 970:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 971:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 972:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 973:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 974:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 975:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 976:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 977:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 978:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 979:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 980:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
 981:.//FWLIB/src/stm32f4xx_rcc.c ****   */
 982:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 983:.//FWLIB/src/stm32f4xx_rcc.c **** {
 569              		.loc 1 983 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL38:
 984:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 985:.//FWLIB/src/stm32f4xx_rcc.c ****   
 986:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 987:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 988:.//FWLIB/src/stm32f4xx_rcc.c **** 
 989:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 575              		.loc 1 989 0
 576 0000 034A     		ldr	r2, .L56
 577 0002 9368     		ldr	r3, [r2, #8]
 578              	.LVL39:
 990:.//FWLIB/src/stm32f4xx_rcc.c **** 
 991:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 992:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 579              		.loc 1 992 0
 580 0004 23F0F003 		bic	r3, r3, #240
 581              	.LVL40:
 993:.//FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 28


 994:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 995:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 582              		.loc 1 995 0
 583 0008 1843     		orrs	r0, r0, r3
 584              	.LVL41:
 996:.//FWLIB/src/stm32f4xx_rcc.c **** 
 997:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
 998:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 585              		.loc 1 998 0
 586 000a 9060     		str	r0, [r2, #8]
 587 000c 7047     		bx	lr
 588              	.L57:
 589 000e 00BF     		.align	2
 590              	.L56:
 591 0010 00380240 		.word	1073887232
 592              		.cfi_endproc
 593              	.LFE130:
 595              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 596              		.align	2
 597              		.global	RCC_PCLK1Config
 598              		.thumb
 599              		.thumb_func
 601              	RCC_PCLK1Config:
 602              	.LFB131:
 999:.//FWLIB/src/stm32f4xx_rcc.c **** }
1000:.//FWLIB/src/stm32f4xx_rcc.c **** 
1001:.//FWLIB/src/stm32f4xx_rcc.c **** 
1002:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1003:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1004:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1005:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1006:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1007:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1008:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1009:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1010:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1011:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1012:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1013:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1014:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1015:.//FWLIB/src/stm32f4xx_rcc.c **** {
 603              		.loc 1 1015 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608              	.LVL42:
1016:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1017:.//FWLIB/src/stm32f4xx_rcc.c **** 
1018:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1019:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1020:.//FWLIB/src/stm32f4xx_rcc.c **** 
1021:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 609              		.loc 1 1021 0
 610 0000 034A     		ldr	r2, .L59
 611 0002 9368     		ldr	r3, [r2, #8]
 612              	.LVL43:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 29


1022:.//FWLIB/src/stm32f4xx_rcc.c **** 
1023:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1024:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 613              		.loc 1 1024 0
 614 0004 23F4E053 		bic	r3, r3, #7168
 615              	.LVL44:
1025:.//FWLIB/src/stm32f4xx_rcc.c **** 
1026:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1027:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 616              		.loc 1 1027 0
 617 0008 1843     		orrs	r0, r0, r3
 618              	.LVL45:
1028:.//FWLIB/src/stm32f4xx_rcc.c **** 
1029:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1030:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 619              		.loc 1 1030 0
 620 000a 9060     		str	r0, [r2, #8]
 621 000c 7047     		bx	lr
 622              	.L60:
 623 000e 00BF     		.align	2
 624              	.L59:
 625 0010 00380240 		.word	1073887232
 626              		.cfi_endproc
 627              	.LFE131:
 629              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 630              		.align	2
 631              		.global	RCC_PCLK2Config
 632              		.thumb
 633              		.thumb_func
 635              	RCC_PCLK2Config:
 636              	.LFB132:
1031:.//FWLIB/src/stm32f4xx_rcc.c **** }
1032:.//FWLIB/src/stm32f4xx_rcc.c **** 
1033:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1034:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1035:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1036:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1037:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1038:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1039:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1040:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1041:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1042:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1043:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1044:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1045:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1046:.//FWLIB/src/stm32f4xx_rcc.c **** {
 637              		.loc 1 1046 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL46:
1047:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1048:.//FWLIB/src/stm32f4xx_rcc.c **** 
1049:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1050:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 30


1051:.//FWLIB/src/stm32f4xx_rcc.c **** 
1052:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 643              		.loc 1 1052 0
 644 0000 034A     		ldr	r2, .L62
 645 0002 9368     		ldr	r3, [r2, #8]
 646              	.LVL47:
1053:.//FWLIB/src/stm32f4xx_rcc.c **** 
1054:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1055:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 647              		.loc 1 1055 0
 648 0004 23F46043 		bic	r3, r3, #57344
 649              	.LVL48:
1056:.//FWLIB/src/stm32f4xx_rcc.c **** 
1057:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1058:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 650              		.loc 1 1058 0
 651 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 652              	.LVL49:
1059:.//FWLIB/src/stm32f4xx_rcc.c **** 
1060:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1061:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 653              		.loc 1 1061 0
 654 000c 9060     		str	r0, [r2, #8]
 655 000e 7047     		bx	lr
 656              	.L63:
 657              		.align	2
 658              	.L62:
 659 0010 00380240 		.word	1073887232
 660              		.cfi_endproc
 661              	.LFE132:
 663              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 664              		.align	2
 665              		.global	RCC_GetClocksFreq
 666              		.thumb
 667              		.thumb_func
 669              	RCC_GetClocksFreq:
 670              	.LFB133:
1062:.//FWLIB/src/stm32f4xx_rcc.c **** }
1063:.//FWLIB/src/stm32f4xx_rcc.c **** 
1064:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1065:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1066:.//FWLIB/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
1067:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1068:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1069:.//FWLIB/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1070:.//FWLIB/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1071:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1072:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1073:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1074:.//FWLIB/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1075:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1076:.//FWLIB/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1077:.//FWLIB/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1078:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1079:.//FWLIB/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1080:.//FWLIB/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1081:.//FWLIB/src/stm32f4xx_rcc.c ****   *                have wrong result.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 31


1082:.//FWLIB/src/stm32f4xx_rcc.c ****   *                
1083:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1084:.//FWLIB/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1085:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
1086:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1087:.//FWLIB/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1088:.//FWLIB/src/stm32f4xx_rcc.c ****   *     
1089:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1090:.//FWLIB/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1091:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1092:.//FWLIB/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1093:.//FWLIB/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1094:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
1095:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1096:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1097:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1098:.//FWLIB/src/stm32f4xx_rcc.c **** {
 671              		.loc 1 1098 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676              	.LVL50:
 677 0000 10B4     		push	{r4}
 678              	.LCFI0:
 679              		.cfi_def_cfa_offset 4
 680              		.cfi_offset 4, -4
 681              	.LVL51:
1099:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1100:.//FWLIB/src/stm32f4xx_rcc.c **** 
1101:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1102:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 682              		.loc 1 1102 0
 683 0002 294B     		ldr	r3, .L74
 684 0004 9B68     		ldr	r3, [r3, #8]
 685 0006 03F00C03 		and	r3, r3, #12
 686              	.LVL52:
1103:.//FWLIB/src/stm32f4xx_rcc.c **** 
1104:.//FWLIB/src/stm32f4xx_rcc.c ****   switch (tmp)
 687              		.loc 1 1104 0
 688 000a 042B     		cmp	r3, #4
 689 000c 05D0     		beq	.L66
 690 000e 082B     		cmp	r3, #8
 691 0010 06D0     		beq	.L67
 692 0012 53BB     		cbnz	r3, .L72
1105:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1106:.//FWLIB/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
1107:.//FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 693              		.loc 1 1107 0
 694 0014 254B     		ldr	r3, .L74+4
 695              	.LVL53:
 696 0016 0360     		str	r3, [r0]
1108:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 697              		.loc 1 1108 0
 698 0018 29E0     		b	.L69
 699              	.LVL54:
 700              	.L66:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 32


1109:.//FWLIB/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
1110:.//FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 701              		.loc 1 1110 0
 702 001a 254B     		ldr	r3, .L74+8
 703              	.LVL55:
 704 001c 0360     		str	r3, [r0]
1111:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 705              		.loc 1 1111 0
 706 001e 26E0     		b	.L69
 707              	.LVL56:
 708              	.L67:
1112:.//FWLIB/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
1113:.//FWLIB/src/stm32f4xx_rcc.c **** 
1114:.//FWLIB/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1115:.//FWLIB/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
1116:.//FWLIB/src/stm32f4xx_rcc.c ****          */    
1117:.//FWLIB/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 709              		.loc 1 1117 0
 710 0020 214B     		ldr	r3, .L74
 711              	.LVL57:
 712 0022 5A68     		ldr	r2, [r3, #4]
 713              	.LVL58:
1118:.//FWLIB/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 714              		.loc 1 1118 0
 715 0024 5B68     		ldr	r3, [r3, #4]
 716 0026 03F03F03 		and	r3, r3, #63
 717              	.LVL59:
1119:.//FWLIB/src/stm32f4xx_rcc.c ****       
1120:.//FWLIB/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 718              		.loc 1 1120 0
 719 002a 12F4800F 		tst	r2, #4194304
 720 002e 09D0     		beq	.L70
1121:.//FWLIB/src/stm32f4xx_rcc.c ****       {
1122:.//FWLIB/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
1123:.//FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 721              		.loc 1 1123 0
 722 0030 1F4A     		ldr	r2, .L74+8
 723              	.LVL60:
 724 0032 B2FBF3F2 		udiv	r2, r2, r3
 725 0036 1C4B     		ldr	r3, .L74
 726              	.LVL61:
 727 0038 5B68     		ldr	r3, [r3, #4]
 728 003a C3F38813 		ubfx	r3, r3, #6, #9
 729 003e 03FB02F2 		mul	r2, r3, r2
 730              	.LVL62:
 731 0042 08E0     		b	.L71
 732              	.LVL63:
 733              	.L70:
1124:.//FWLIB/src/stm32f4xx_rcc.c ****       }
1125:.//FWLIB/src/stm32f4xx_rcc.c ****       else
1126:.//FWLIB/src/stm32f4xx_rcc.c ****       {
1127:.//FWLIB/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
1128:.//FWLIB/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 734              		.loc 1 1128 0
 735 0044 194A     		ldr	r2, .L74+4
 736              	.LVL64:
 737 0046 B2FBF3F3 		udiv	r3, r2, r3
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 33


 738              	.LVL65:
 739 004a 174A     		ldr	r2, .L74
 740 004c 5168     		ldr	r1, [r2, #4]
 741 004e C1F38811 		ubfx	r1, r1, #6, #9
 742 0052 01FB03F2 		mul	r2, r1, r3
 743              	.LVL66:
 744              	.L71:
1129:.//FWLIB/src/stm32f4xx_rcc.c ****       }
1130:.//FWLIB/src/stm32f4xx_rcc.c **** 
1131:.//FWLIB/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 745              		.loc 1 1131 0
 746 0056 144B     		ldr	r3, .L74
 747 0058 5B68     		ldr	r3, [r3, #4]
 748 005a C3F30143 		ubfx	r3, r3, #16, #2
 749 005e 0133     		adds	r3, r3, #1
 750 0060 5B00     		lsls	r3, r3, #1
 751              	.LVL67:
1132:.//FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 752              		.loc 1 1132 0
 753 0062 B2FBF3F3 		udiv	r3, r2, r3
 754              	.LVL68:
 755 0066 0360     		str	r3, [r0]
1133:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
 756              		.loc 1 1133 0
 757 0068 01E0     		b	.L69
 758              	.LVL69:
 759              	.L72:
1134:.//FWLIB/src/stm32f4xx_rcc.c ****     default:
1135:.//FWLIB/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 760              		.loc 1 1135 0
 761 006a 104B     		ldr	r3, .L74+4
 762              	.LVL70:
 763 006c 0360     		str	r3, [r0]
 764              	.LVL71:
 765              	.L69:
1136:.//FWLIB/src/stm32f4xx_rcc.c ****       break;
1137:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1138:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1139:.//FWLIB/src/stm32f4xx_rcc.c **** 
1140:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1141:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 766              		.loc 1 1141 0
 767 006e 0E4C     		ldr	r4, .L74
 768 0070 A368     		ldr	r3, [r4, #8]
 769              	.LVL72:
1142:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 770              		.loc 1 1142 0
 771 0072 C3F30313 		ubfx	r3, r3, #4, #4
 772              	.LVL73:
1143:.//FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 773              		.loc 1 1143 0
 774 0076 0F49     		ldr	r1, .L74+12
 775 0078 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 776              	.LVL74:
 777 007a DAB2     		uxtb	r2, r3
 778              	.LVL75:
1144:.//FWLIB/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 34


1145:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 779              		.loc 1 1145 0
 780 007c 0368     		ldr	r3, [r0]
 781 007e D340     		lsrs	r3, r3, r2
 782 0080 4360     		str	r3, [r0, #4]
1146:.//FWLIB/src/stm32f4xx_rcc.c **** 
1147:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1148:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 783              		.loc 1 1148 0
 784 0082 A268     		ldr	r2, [r4, #8]
 785              	.LVL76:
1149:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 786              		.loc 1 1149 0
 787 0084 C2F38222 		ubfx	r2, r2, #10, #3
 788              	.LVL77:
1150:.//FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 789              		.loc 1 1150 0
 790 0088 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 791              	.LVL78:
 792 008a D2B2     		uxtb	r2, r2
 793              	.LVL79:
1151:.//FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1152:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 794              		.loc 1 1152 0
 795 008c 23FA02F2 		lsr	r2, r3, r2
 796              	.LVL80:
 797 0090 8260     		str	r2, [r0, #8]
1153:.//FWLIB/src/stm32f4xx_rcc.c **** 
1154:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1155:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 798              		.loc 1 1155 0
 799 0092 A268     		ldr	r2, [r4, #8]
 800              	.LVL81:
1156:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 801              		.loc 1 1156 0
 802 0094 C2F34232 		ubfx	r2, r2, #13, #3
 803              	.LVL82:
1157:.//FWLIB/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 804              		.loc 1 1157 0
 805 0098 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 806              	.LVL83:
 807 009a D2B2     		uxtb	r2, r2
 808              	.LVL84:
1158:.//FWLIB/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1159:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 809              		.loc 1 1159 0
 810 009c D340     		lsrs	r3, r3, r2
 811 009e C360     		str	r3, [r0, #12]
1160:.//FWLIB/src/stm32f4xx_rcc.c **** }
 812              		.loc 1 1160 0
 813 00a0 5DF8044B 		ldr	r4, [sp], #4
 814              	.LCFI1:
 815              		.cfi_restore 4
 816              		.cfi_def_cfa_offset 0
 817 00a4 7047     		bx	lr
 818              	.L75:
 819 00a6 00BF     		.align	2
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 35


 820              	.L74:
 821 00a8 00380240 		.word	1073887232
 822 00ac 0024F400 		.word	16000000
 823 00b0 00127A00 		.word	8000000
 824 00b4 00000000 		.word	.LANCHOR0
 825              		.cfi_endproc
 826              	.LFE133:
 828              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 829              		.align	2
 830              		.global	RCC_RTCCLKConfig
 831              		.thumb
 832              		.thumb_func
 834              	RCC_RTCCLKConfig:
 835              	.LFB134:
1161:.//FWLIB/src/stm32f4xx_rcc.c **** 
1162:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1163:.//FWLIB/src/stm32f4xx_rcc.c ****   * @}
1164:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1165:.//FWLIB/src/stm32f4xx_rcc.c **** 
1166:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1167:.//FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1168:.//FWLIB/src/stm32f4xx_rcc.c ****  *
1169:.//FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
1170:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
1171:.//FWLIB/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1172:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
1173:.//FWLIB/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1174:.//FWLIB/src/stm32f4xx_rcc.c ****   
1175:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1176:.//FWLIB/src/stm32f4xx_rcc.c ****           by 2 to 31.
1177:.//FWLIB/src/stm32f4xx_rcc.c ****      
1178:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1179:.//FWLIB/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1180:.//FWLIB/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1181:.//FWLIB/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1182:.//FWLIB/src/stm32f4xx_rcc.c **** 
1183:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1184:.//FWLIB/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1185:.//FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1186:.//FWLIB/src/stm32f4xx_rcc.c ****      
1187:.//FWLIB/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1188:.//FWLIB/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1189:.//FWLIB/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1190:.//FWLIB/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1191:.//FWLIB/src/stm32f4xx_rcc.c **** 
1192:.//FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
1193:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
1194:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1195:.//FWLIB/src/stm32f4xx_rcc.c **** 
1196:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1197:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1198:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1199:.//FWLIB/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1200:.//FWLIB/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1201:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1202:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1203:.//FWLIB/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 36


1204:.//FWLIB/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1205:.//FWLIB/src/stm32f4xx_rcc.c ****   *    
1206:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1207:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1208:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1209:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1210:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1211:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1212:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
1213:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1214:.//FWLIB/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1215:.//FWLIB/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1216:.//FWLIB/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1217:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1218:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1219:.//FWLIB/src/stm32f4xx_rcc.c ****   *  
1220:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1221:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1222:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1223:.//FWLIB/src/stm32f4xx_rcc.c **** {
 836              		.loc 1 1223 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 0
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841              	.LVL85:
1224:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1225:.//FWLIB/src/stm32f4xx_rcc.c **** 
1226:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1227:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1228:.//FWLIB/src/stm32f4xx_rcc.c **** 
1229:.//FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 842              		.loc 1 1229 0
 843 0000 00F44073 		and	r3, r0, #768
 844 0004 B3F5407F 		cmp	r3, #768
 845 0008 09D1     		bne	.L77
1230:.//FWLIB/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1231:.//FWLIB/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 846              		.loc 1 1231 0
 847 000a 0849     		ldr	r1, .L78
 848 000c 8B68     		ldr	r3, [r1, #8]
 849              	.LVL86:
1232:.//FWLIB/src/stm32f4xx_rcc.c **** 
1233:.//FWLIB/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1234:.//FWLIB/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 850              		.loc 1 1234 0
 851 000e 23F4F812 		bic	r2, r3, #2031616
 852              	.LVL87:
1235:.//FWLIB/src/stm32f4xx_rcc.c **** 
1236:.//FWLIB/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1237:.//FWLIB/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 853              		.loc 1 1237 0
 854 0012 20F07043 		bic	r3, r0, #-268435456
 855 0016 23F44073 		bic	r3, r3, #768
 856 001a 1343     		orrs	r3, r3, r2
 857              	.LVL88:
1238:.//FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 37


1239:.//FWLIB/src/stm32f4xx_rcc.c ****     /* Store the new value */
1240:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 858              		.loc 1 1240 0
 859 001c 8B60     		str	r3, [r1, #8]
 860              	.LVL89:
 861              	.L77:
1241:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1242:.//FWLIB/src/stm32f4xx_rcc.c ****     
1243:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1244:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 862              		.loc 1 1244 0
 863 001e 034B     		ldr	r3, .L78
 864 0020 1A6F     		ldr	r2, [r3, #112]
 865 0022 C0F30B00 		ubfx	r0, r0, #0, #12
 866              	.LVL90:
 867 0026 1043     		orrs	r0, r0, r2
 868 0028 1867     		str	r0, [r3, #112]
 869 002a 7047     		bx	lr
 870              	.L79:
 871              		.align	2
 872              	.L78:
 873 002c 00380240 		.word	1073887232
 874              		.cfi_endproc
 875              	.LFE134:
 877              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 878              		.align	2
 879              		.global	RCC_RTCCLKCmd
 880              		.thumb
 881              		.thumb_func
 883              	RCC_RTCCLKCmd:
 884              	.LFB135:
1245:.//FWLIB/src/stm32f4xx_rcc.c **** }
1246:.//FWLIB/src/stm32f4xx_rcc.c **** 
1247:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1248:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1249:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1250:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1251:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1252:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1253:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1254:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1255:.//FWLIB/src/stm32f4xx_rcc.c **** {
 885              		.loc 1 1255 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              		@ link register save eliminated.
 890              	.LVL91:
1256:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1257:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1258:.//FWLIB/src/stm32f4xx_rcc.c **** 
1259:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 891              		.loc 1 1259 0
 892 0000 014B     		ldr	r3, .L81
 893 0002 1860     		str	r0, [r3]
 894 0004 7047     		bx	lr
 895              	.L82:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 38


 896 0006 00BF     		.align	2
 897              	.L81:
 898 0008 3C0E4742 		.word	1111952956
 899              		.cfi_endproc
 900              	.LFE135:
 902              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 903              		.align	2
 904              		.global	RCC_BackupResetCmd
 905              		.thumb
 906              		.thumb_func
 908              	RCC_BackupResetCmd:
 909              	.LFB136:
1260:.//FWLIB/src/stm32f4xx_rcc.c **** }
1261:.//FWLIB/src/stm32f4xx_rcc.c **** 
1262:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1263:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1264:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1265:.//FWLIB/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1266:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1267:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1268:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1269:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1270:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1271:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1272:.//FWLIB/src/stm32f4xx_rcc.c **** {
 910              		.loc 1 1272 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              		@ link register save eliminated.
 915              	.LVL92:
1273:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1274:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1275:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 916              		.loc 1 1275 0
 917 0000 014B     		ldr	r3, .L84
 918 0002 1860     		str	r0, [r3]
 919 0004 7047     		bx	lr
 920              	.L85:
 921 0006 00BF     		.align	2
 922              	.L84:
 923 0008 400E4742 		.word	1111952960
 924              		.cfi_endproc
 925              	.LFE136:
 927              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 928              		.align	2
 929              		.global	RCC_I2SCLKConfig
 930              		.thumb
 931              		.thumb_func
 933              	RCC_I2SCLKConfig:
 934              	.LFB137:
1276:.//FWLIB/src/stm32f4xx_rcc.c **** }
1277:.//FWLIB/src/stm32f4xx_rcc.c **** 
1278:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1279:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1280:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1281:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 39


1282:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1283:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1284:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1285:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1286:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1287:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1288:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1289:.//FWLIB/src/stm32f4xx_rcc.c **** {
 935              		.loc 1 1289 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              		@ link register save eliminated.
 940              	.LVL93:
1290:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1291:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1292:.//FWLIB/src/stm32f4xx_rcc.c **** 
1293:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 941              		.loc 1 1293 0
 942 0000 014B     		ldr	r3, .L87
 943 0002 1860     		str	r0, [r3]
 944 0004 7047     		bx	lr
 945              	.L88:
 946 0006 00BF     		.align	2
 947              	.L87:
 948 0008 5C014742 		.word	1111949660
 949              		.cfi_endproc
 950              	.LFE137:
 952              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 953              		.align	2
 954              		.global	RCC_SAIPLLI2SClkDivConfig
 955              		.thumb
 956              		.thumb_func
 958              	RCC_SAIPLLI2SClkDivConfig:
 959              	.LFB138:
1294:.//FWLIB/src/stm32f4xx_rcc.c **** }
1295:.//FWLIB/src/stm32f4xx_rcc.c **** 
1296:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1297:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1298:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1299:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1300:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
1301:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1302:.//FWLIB/src/stm32f4xx_rcc.c ****   *              
1303:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1304:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1305:.//FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1306:.//FWLIB/src/stm32f4xx_rcc.c ****   *              
1307:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1308:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1309:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1310:.//FWLIB/src/stm32f4xx_rcc.c **** {
 960              		.loc 1 1310 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              		@ link register save eliminated.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 40


 965              	.LVL94:
1311:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1312:.//FWLIB/src/stm32f4xx_rcc.c ****   
1313:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1314:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1315:.//FWLIB/src/stm32f4xx_rcc.c ****   
1316:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 966              		.loc 1 1316 0
 967 0000 044A     		ldr	r2, .L90
 968 0002 D2F88C30 		ldr	r3, [r2, #140]
 969              	.LVL95:
1317:.//FWLIB/src/stm32f4xx_rcc.c **** 
1318:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1319:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 970              		.loc 1 1319 0
 971 0006 23F01F03 		bic	r3, r3, #31
 972              	.LVL96:
1320:.//FWLIB/src/stm32f4xx_rcc.c **** 
1321:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1322:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 973              		.loc 1 1322 0
 974 000a 0138     		subs	r0, r0, #1
 975              	.LVL97:
 976 000c 1843     		orrs	r0, r0, r3
 977              	.LVL98:
1323:.//FWLIB/src/stm32f4xx_rcc.c **** 
1324:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1325:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 978              		.loc 1 1325 0
 979 000e C2F88C00 		str	r0, [r2, #140]
 980 0012 7047     		bx	lr
 981              	.L91:
 982              		.align	2
 983              	.L90:
 984 0014 00380240 		.word	1073887232
 985              		.cfi_endproc
 986              	.LFE138:
 988              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 989              		.align	2
 990              		.global	RCC_SAIPLLSAIClkDivConfig
 991              		.thumb
 992              		.thumb_func
 994              	RCC_SAIPLLSAIClkDivConfig:
 995              	.LFB139:
1326:.//FWLIB/src/stm32f4xx_rcc.c **** }
1327:.//FWLIB/src/stm32f4xx_rcc.c **** 
1328:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1329:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1330:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1331:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1332:.//FWLIB/src/stm32f4xx_rcc.c ****   *        
1333:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1334:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
1335:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1336:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1337:.//FWLIB/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1338:.//FWLIB/src/stm32f4xx_rcc.c ****   *              
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 41


1339:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1340:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1341:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1342:.//FWLIB/src/stm32f4xx_rcc.c **** {
 996              		.loc 1 1342 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              		@ link register save eliminated.
 1001              	.LVL99:
1343:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1344:.//FWLIB/src/stm32f4xx_rcc.c ****   
1345:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1346:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1347:.//FWLIB/src/stm32f4xx_rcc.c ****   
1348:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1002              		.loc 1 1348 0
 1003 0000 054A     		ldr	r2, .L93
 1004 0002 D2F88C30 		ldr	r3, [r2, #140]
 1005              	.LVL100:
1349:.//FWLIB/src/stm32f4xx_rcc.c **** 
1350:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1351:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1006              		.loc 1 1351 0
 1007 0006 23F4F853 		bic	r3, r3, #7936
 1008              	.LVL101:
1352:.//FWLIB/src/stm32f4xx_rcc.c **** 
1353:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1354:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1009              		.loc 1 1354 0
 1010 000a 0138     		subs	r0, r0, #1
 1011              	.LVL102:
 1012 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1013              	.LVL103:
1355:.//FWLIB/src/stm32f4xx_rcc.c **** 
1356:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1357:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1014              		.loc 1 1357 0
 1015 0010 C2F88C30 		str	r3, [r2, #140]
 1016 0014 7047     		bx	lr
 1017              	.L94:
 1018 0016 00BF     		.align	2
 1019              	.L93:
 1020 0018 00380240 		.word	1073887232
 1021              		.cfi_endproc
 1022              	.LFE139:
 1024              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1025              		.align	2
 1026              		.global	RCC_SAIBlockACLKConfig
 1027              		.thumb
 1028              		.thumb_func
 1030              	RCC_SAIBlockACLKConfig:
 1031              	.LFB140:
1358:.//FWLIB/src/stm32f4xx_rcc.c **** }
1359:.//FWLIB/src/stm32f4xx_rcc.c **** 
1360:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1361:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 42


1362:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1363:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1364:.//FWLIB/src/stm32f4xx_rcc.c ****   *       
1365:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1366:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1367:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1368:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1369:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1370:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1371:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1372:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1373:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1374:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1375:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1376:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1377:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1378:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1032              		.loc 1 1378 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 0
 1035              		@ frame_needed = 0, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
 1037              	.LVL104:
1379:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1380:.//FWLIB/src/stm32f4xx_rcc.c ****   
1381:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1382:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1383:.//FWLIB/src/stm32f4xx_rcc.c ****   
1384:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1038              		.loc 1 1384 0
 1039 0000 044A     		ldr	r2, .L96
 1040 0002 D2F88C30 		ldr	r3, [r2, #140]
 1041              	.LVL105:
1385:.//FWLIB/src/stm32f4xx_rcc.c **** 
1386:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1387:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 1042              		.loc 1 1387 0
 1043 0006 23F44013 		bic	r3, r3, #3145728
 1044              	.LVL106:
1388:.//FWLIB/src/stm32f4xx_rcc.c **** 
1389:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1390:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
 1045              		.loc 1 1390 0
 1046 000a 1843     		orrs	r0, r0, r3
 1047              	.LVL107:
1391:.//FWLIB/src/stm32f4xx_rcc.c **** 
1392:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1393:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1048              		.loc 1 1393 0
 1049 000c C2F88C00 		str	r0, [r2, #140]
 1050 0010 7047     		bx	lr
 1051              	.L97:
 1052 0012 00BF     		.align	2
 1053              	.L96:
 1054 0014 00380240 		.word	1073887232
 1055              		.cfi_endproc
 1056              	.LFE140:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 43


 1058              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1059              		.align	2
 1060              		.global	RCC_SAIBlockBCLKConfig
 1061              		.thumb
 1062              		.thumb_func
 1064              	RCC_SAIBlockBCLKConfig:
 1065              	.LFB141:
1394:.//FWLIB/src/stm32f4xx_rcc.c **** }
1395:.//FWLIB/src/stm32f4xx_rcc.c **** 
1396:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1397:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1398:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1399:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1400:.//FWLIB/src/stm32f4xx_rcc.c ****   *       
1401:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1402:.//FWLIB/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1403:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1404:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1405:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1406:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1407:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1408:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1409:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1410:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1411:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1412:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1413:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1414:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1066              		.loc 1 1414 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071              	.LVL108:
1415:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1416:.//FWLIB/src/stm32f4xx_rcc.c ****   
1417:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1418:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1419:.//FWLIB/src/stm32f4xx_rcc.c ****   
1420:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1072              		.loc 1 1420 0
 1073 0000 044A     		ldr	r2, .L99
 1074 0002 D2F88C30 		ldr	r3, [r2, #140]
 1075              	.LVL109:
1421:.//FWLIB/src/stm32f4xx_rcc.c **** 
1422:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1423:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 1076              		.loc 1 1423 0
 1077 0006 23F44003 		bic	r3, r3, #12582912
 1078              	.LVL110:
1424:.//FWLIB/src/stm32f4xx_rcc.c **** 
1425:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1426:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
 1079              		.loc 1 1426 0
 1080 000a 1843     		orrs	r0, r0, r3
 1081              	.LVL111:
1427:.//FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 44


1428:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1429:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1082              		.loc 1 1429 0
 1083 000c C2F88C00 		str	r0, [r2, #140]
 1084 0010 7047     		bx	lr
 1085              	.L100:
 1086 0012 00BF     		.align	2
 1087              	.L99:
 1088 0014 00380240 		.word	1073887232
 1089              		.cfi_endproc
 1090              	.LFE141:
 1092              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1093              		.align	2
 1094              		.global	RCC_LTDCCLKDivConfig
 1095              		.thumb
 1096              		.thumb_func
 1098              	RCC_LTDCCLKDivConfig:
 1099              	.LFB142:
1430:.//FWLIB/src/stm32f4xx_rcc.c **** }
1431:.//FWLIB/src/stm32f4xx_rcc.c **** 
1432:.//FWLIB/src/stm32f4xx_rcc.c **** 
1433:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1434:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1435:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1436:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F429xx/439xx Devices.
1437:.//FWLIB/src/stm32f4xx_rcc.c ****   *      
1438:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1439:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
1440:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1441:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 16.
1442:.//FWLIB/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1443:.//FWLIB/src/stm32f4xx_rcc.c ****   *            
1444:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1445:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1446:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1447:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1100              		.loc 1 1447 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL112:
1448:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1449:.//FWLIB/src/stm32f4xx_rcc.c ****   
1450:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1451:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1452:.//FWLIB/src/stm32f4xx_rcc.c ****   
1453:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1106              		.loc 1 1453 0
 1107 0000 044A     		ldr	r2, .L102
 1108 0002 D2F88C30 		ldr	r3, [r2, #140]
 1109              	.LVL113:
1454:.//FWLIB/src/stm32f4xx_rcc.c **** 
1455:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1456:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1110              		.loc 1 1456 0
 1111 0006 23F44033 		bic	r3, r3, #196608
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 45


 1112              	.LVL114:
1457:.//FWLIB/src/stm32f4xx_rcc.c **** 
1458:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1459:.//FWLIB/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1113              		.loc 1 1459 0
 1114 000a 1843     		orrs	r0, r0, r3
 1115              	.LVL115:
1460:.//FWLIB/src/stm32f4xx_rcc.c **** 
1461:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Store the new value */
1462:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1116              		.loc 1 1462 0
 1117 000c C2F88C00 		str	r0, [r2, #140]
 1118 0010 7047     		bx	lr
 1119              	.L103:
 1120 0012 00BF     		.align	2
 1121              	.L102:
 1122 0014 00380240 		.word	1073887232
 1123              		.cfi_endproc
 1124              	.LFE142:
 1126              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1127              		.align	2
 1128              		.global	RCC_TIMCLKPresConfig
 1129              		.thumb
 1130              		.thumb_func
 1132              	RCC_TIMCLKPresConfig:
 1133              	.LFB143:
1463:.//FWLIB/src/stm32f4xx_rcc.c **** }
1464:.//FWLIB/src/stm32f4xx_rcc.c **** 
1465:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1466:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1467:.//FWLIB/src/stm32f4xx_rcc.c ****   * 
1468:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1469:.//FWLIB/src/stm32f4xx_rcc.c ****   *   
1470:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1471:.//FWLIB/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1472:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1473:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1474:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1475:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
1476:.//FWLIB/src/stm32f4xx_rcc.c ****   *                   
1477:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1478:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1479:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1480:.//FWLIB/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1481:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1482:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1483:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1484:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1134              		.loc 1 1484 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 1139              	.LVL116:
1485:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1486:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1487:.//FWLIB/src/stm32f4xx_rcc.c **** 
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 46


1488:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1140              		.loc 1 1488 0
 1141 0000 014B     		ldr	r3, .L105
 1142 0002 1860     		str	r0, [r3]
 1143 0004 7047     		bx	lr
 1144              	.L106:
 1145 0006 00BF     		.align	2
 1146              	.L105:
 1147 0008 E0114742 		.word	1111953888
 1148              		.cfi_endproc
 1149              	.LFE143:
 1151              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1152              		.align	2
 1153              		.global	RCC_AHB1PeriphClockCmd
 1154              		.thumb
 1155              		.thumb_func
 1157              	RCC_AHB1PeriphClockCmd:
 1158              	.LFB144:
1489:.//FWLIB/src/stm32f4xx_rcc.c ****   
1490:.//FWLIB/src/stm32f4xx_rcc.c **** }
1491:.//FWLIB/src/stm32f4xx_rcc.c **** 
1492:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1493:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1494:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1495:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1496:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using it.   
1497:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1498:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1499:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1500:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1501:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1502:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1503:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1504:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1505:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1506:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1507:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1508:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1509:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
1510:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1511:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1512:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1513:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1514:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1515:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
1516:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1517:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1518:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1519:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1520:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1521:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1522:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1523:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1524:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1525:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1526:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1527:.//FWLIB/src/stm32f4xx_rcc.c **** {
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 47


 1159              		.loc 1 1527 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
 1164              	.LVL117:
1528:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1529:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1530:.//FWLIB/src/stm32f4xx_rcc.c **** 
1531:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1532:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1165              		.loc 1 1532 0
 1166 0000 21B1     		cbz	r1, .L108
1533:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1534:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1167              		.loc 1 1534 0
 1168 0002 054B     		ldr	r3, .L110
 1169 0004 1A6B     		ldr	r2, [r3, #48]
 1170 0006 1043     		orrs	r0, r0, r2
 1171              	.LVL118:
 1172 0008 1863     		str	r0, [r3, #48]
 1173 000a 7047     		bx	lr
 1174              	.LVL119:
 1175              	.L108:
1535:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1536:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1537:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1538:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1176              		.loc 1 1538 0
 1177 000c 024A     		ldr	r2, .L110
 1178 000e 136B     		ldr	r3, [r2, #48]
 1179 0010 23EA0000 		bic	r0, r3, r0
 1180              	.LVL120:
 1181 0014 1063     		str	r0, [r2, #48]
 1182 0016 7047     		bx	lr
 1183              	.L111:
 1184              		.align	2
 1185              	.L110:
 1186 0018 00380240 		.word	1073887232
 1187              		.cfi_endproc
 1188              	.LFE144:
 1190              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1191              		.align	2
 1192              		.global	RCC_AHB2PeriphClockCmd
 1193              		.thumb
 1194              		.thumb_func
 1196              	RCC_AHB2PeriphClockCmd:
 1197              	.LFB145:
1539:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1540:.//FWLIB/src/stm32f4xx_rcc.c **** }
1541:.//FWLIB/src/stm32f4xx_rcc.c **** 
1542:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1543:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1544:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1545:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1546:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1547:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 48


1548:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1549:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1550:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1551:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1552:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1553:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1554:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1555:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1556:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1557:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1558:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1559:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1198              		.loc 1 1559 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              		@ link register save eliminated.
 1203              	.LVL121:
1560:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1561:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1562:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1563:.//FWLIB/src/stm32f4xx_rcc.c **** 
1564:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1204              		.loc 1 1564 0
 1205 0000 21B1     		cbz	r1, .L113
1565:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1566:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1206              		.loc 1 1566 0
 1207 0002 054B     		ldr	r3, .L115
 1208 0004 5A6B     		ldr	r2, [r3, #52]
 1209 0006 1043     		orrs	r0, r0, r2
 1210              	.LVL122:
 1211 0008 5863     		str	r0, [r3, #52]
 1212 000a 7047     		bx	lr
 1213              	.LVL123:
 1214              	.L113:
1567:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1568:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1569:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1570:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1215              		.loc 1 1570 0
 1216 000c 024A     		ldr	r2, .L115
 1217 000e 536B     		ldr	r3, [r2, #52]
 1218 0010 23EA0000 		bic	r0, r3, r0
 1219              	.LVL124:
 1220 0014 5063     		str	r0, [r2, #52]
 1221 0016 7047     		bx	lr
 1222              	.L116:
 1223              		.align	2
 1224              	.L115:
 1225 0018 00380240 		.word	1073887232
 1226              		.cfi_endproc
 1227              	.LFE145:
 1229              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1230              		.align	2
 1231              		.global	RCC_AHB3PeriphClockCmd
 1232              		.thumb
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 49


 1233              		.thumb_func
 1235              	RCC_AHB3PeriphClockCmd:
 1236              	.LFB146:
1571:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1572:.//FWLIB/src/stm32f4xx_rcc.c **** }
1573:.//FWLIB/src/stm32f4xx_rcc.c **** 
1574:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1575:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1576:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1577:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1578:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1579:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1580:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1581:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1582:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1583:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1584:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1585:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1586:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1587:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1237              		.loc 1 1587 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              		@ link register save eliminated.
 1242              	.LVL125:
1588:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1589:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1590:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1591:.//FWLIB/src/stm32f4xx_rcc.c **** 
1592:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1243              		.loc 1 1592 0
 1244 0000 21B1     		cbz	r1, .L118
1593:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1594:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1245              		.loc 1 1594 0
 1246 0002 054B     		ldr	r3, .L120
 1247 0004 9A6B     		ldr	r2, [r3, #56]
 1248 0006 1043     		orrs	r0, r0, r2
 1249              	.LVL126:
 1250 0008 9863     		str	r0, [r3, #56]
 1251 000a 7047     		bx	lr
 1252              	.LVL127:
 1253              	.L118:
1595:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1596:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1597:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1598:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1254              		.loc 1 1598 0
 1255 000c 024A     		ldr	r2, .L120
 1256 000e 936B     		ldr	r3, [r2, #56]
 1257 0010 23EA0000 		bic	r0, r3, r0
 1258              	.LVL128:
 1259 0014 9063     		str	r0, [r2, #56]
 1260 0016 7047     		bx	lr
 1261              	.L121:
 1262              		.align	2
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 50


 1263              	.L120:
 1264 0018 00380240 		.word	1073887232
 1265              		.cfi_endproc
 1266              	.LFE146:
 1268              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1269              		.align	2
 1270              		.global	RCC_APB1PeriphClockCmd
 1271              		.thumb
 1272              		.thumb_func
 1274              	RCC_APB1PeriphClockCmd:
 1275              	.LFB147:
1599:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1600:.//FWLIB/src/stm32f4xx_rcc.c **** }
1601:.//FWLIB/src/stm32f4xx_rcc.c **** 
1602:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1603:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1604:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1605:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1606:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using it. 
1607:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1608:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1609:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1610:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1611:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1612:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1613:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1614:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1615:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1616:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1617:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1618:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1619:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1620:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1621:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1622:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1623:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1624:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1625:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1626:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1627:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1628:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1629:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1630:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1631:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1632:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1633:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1634:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1635:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1636:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1637:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1638:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1639:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1276              		.loc 1 1639 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 51


 1281              	.LVL129:
1640:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1641:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1642:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1643:.//FWLIB/src/stm32f4xx_rcc.c **** 
1644:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1282              		.loc 1 1644 0
 1283 0000 21B1     		cbz	r1, .L123
1645:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1646:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1284              		.loc 1 1646 0
 1285 0002 054B     		ldr	r3, .L125
 1286 0004 1A6C     		ldr	r2, [r3, #64]
 1287 0006 1043     		orrs	r0, r0, r2
 1288              	.LVL130:
 1289 0008 1864     		str	r0, [r3, #64]
 1290 000a 7047     		bx	lr
 1291              	.LVL131:
 1292              	.L123:
1647:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1648:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1649:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1650:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1293              		.loc 1 1650 0
 1294 000c 024A     		ldr	r2, .L125
 1295 000e 136C     		ldr	r3, [r2, #64]
 1296 0010 23EA0000 		bic	r0, r3, r0
 1297              	.LVL132:
 1298 0014 1064     		str	r0, [r2, #64]
 1299 0016 7047     		bx	lr
 1300              	.L126:
 1301              		.align	2
 1302              	.L125:
 1303 0018 00380240 		.word	1073887232
 1304              		.cfi_endproc
 1305              	.LFE147:
 1307              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1308              		.align	2
 1309              		.global	RCC_APB2PeriphClockCmd
 1310              		.thumb
 1311              		.thumb_func
 1313              	RCC_APB2PeriphClockCmd:
 1314              	.LFB148:
1651:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1652:.//FWLIB/src/stm32f4xx_rcc.c **** }
1653:.//FWLIB/src/stm32f4xx_rcc.c **** 
1654:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1655:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1656:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1657:.//FWLIB/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1658:.//FWLIB/src/stm32f4xx_rcc.c ****   *         using it.
1659:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1660:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1661:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1662:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1663:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1664:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 52


1665:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1666:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1667:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1668:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1669:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1670:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1671:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1672:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1673:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1674:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1675:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1676:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1677:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1678:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices) 
1679:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1680:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1681:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1682:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1683:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1684:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1315              		.loc 1 1684 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320              	.LVL133:
1685:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1686:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1687:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1688:.//FWLIB/src/stm32f4xx_rcc.c **** 
1689:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1321              		.loc 1 1689 0
 1322 0000 21B1     		cbz	r1, .L128
1690:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1691:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1323              		.loc 1 1691 0
 1324 0002 054B     		ldr	r3, .L130
 1325 0004 5A6C     		ldr	r2, [r3, #68]
 1326 0006 1043     		orrs	r0, r0, r2
 1327              	.LVL134:
 1328 0008 5864     		str	r0, [r3, #68]
 1329 000a 7047     		bx	lr
 1330              	.LVL135:
 1331              	.L128:
1692:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1693:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1694:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1695:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1332              		.loc 1 1695 0
 1333 000c 024A     		ldr	r2, .L130
 1334 000e 536C     		ldr	r3, [r2, #68]
 1335 0010 23EA0000 		bic	r0, r3, r0
 1336              	.LVL136:
 1337 0014 5064     		str	r0, [r2, #68]
 1338 0016 7047     		bx	lr
 1339              	.L131:
 1340              		.align	2
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 53


 1341              	.L130:
 1342 0018 00380240 		.word	1073887232
 1343              		.cfi_endproc
 1344              	.LFE148:
 1346              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1347              		.align	2
 1348              		.global	RCC_AHB1PeriphResetCmd
 1349              		.thumb
 1350              		.thumb_func
 1352              	RCC_AHB1PeriphResetCmd:
 1353              	.LFB149:
1696:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1697:.//FWLIB/src/stm32f4xx_rcc.c **** }
1698:.//FWLIB/src/stm32f4xx_rcc.c **** 
1699:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1700:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1701:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1702:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1703:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1704:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1705:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1706:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1707:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1708:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1709:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1710:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1711:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1712:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
1713:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
1714:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1715:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1716:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1717:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
1718:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1719:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1720:.//FWLIB/src/stm32f4xx_rcc.c ****   *                  
1721:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1722:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1723:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1724:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1725:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1726:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1354              		.loc 1 1726 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 1358              		@ link register save eliminated.
 1359              	.LVL137:
1727:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1728:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1729:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1730:.//FWLIB/src/stm32f4xx_rcc.c **** 
1731:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1360              		.loc 1 1731 0
 1361 0000 21B1     		cbz	r1, .L133
1732:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1733:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 54


 1362              		.loc 1 1733 0
 1363 0002 054B     		ldr	r3, .L135
 1364 0004 1A69     		ldr	r2, [r3, #16]
 1365 0006 1043     		orrs	r0, r0, r2
 1366              	.LVL138:
 1367 0008 1861     		str	r0, [r3, #16]
 1368 000a 7047     		bx	lr
 1369              	.LVL139:
 1370              	.L133:
1734:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1735:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1736:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1737:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1371              		.loc 1 1737 0
 1372 000c 024A     		ldr	r2, .L135
 1373 000e 1369     		ldr	r3, [r2, #16]
 1374 0010 23EA0000 		bic	r0, r3, r0
 1375              	.LVL140:
 1376 0014 1061     		str	r0, [r2, #16]
 1377 0016 7047     		bx	lr
 1378              	.L136:
 1379              		.align	2
 1380              	.L135:
 1381 0018 00380240 		.word	1073887232
 1382              		.cfi_endproc
 1383              	.LFE149:
 1385              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1386              		.align	2
 1387              		.global	RCC_AHB2PeriphResetCmd
 1388              		.thumb
 1389              		.thumb_func
 1391              	RCC_AHB2PeriphResetCmd:
 1392              	.LFB150:
1738:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1739:.//FWLIB/src/stm32f4xx_rcc.c **** }
1740:.//FWLIB/src/stm32f4xx_rcc.c **** 
1741:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1742:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1743:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1744:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1745:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1746:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1747:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1748:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1749:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1750:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1751:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1752:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1753:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1754:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1755:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1393              		.loc 1 1755 0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              		@ link register save eliminated.
 1398              	.LVL141:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 55


1756:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1758:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1759:.//FWLIB/src/stm32f4xx_rcc.c **** 
1760:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1399              		.loc 1 1760 0
 1400 0000 21B1     		cbz	r1, .L138
1761:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1762:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1401              		.loc 1 1762 0
 1402 0002 054B     		ldr	r3, .L140
 1403 0004 5A69     		ldr	r2, [r3, #20]
 1404 0006 1043     		orrs	r0, r0, r2
 1405              	.LVL142:
 1406 0008 5861     		str	r0, [r3, #20]
 1407 000a 7047     		bx	lr
 1408              	.LVL143:
 1409              	.L138:
1763:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1764:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1765:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1766:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1410              		.loc 1 1766 0
 1411 000c 024A     		ldr	r2, .L140
 1412 000e 5369     		ldr	r3, [r2, #20]
 1413 0010 23EA0000 		bic	r0, r3, r0
 1414              	.LVL144:
 1415 0014 5061     		str	r0, [r2, #20]
 1416 0016 7047     		bx	lr
 1417              	.L141:
 1418              		.align	2
 1419              	.L140:
 1420 0018 00380240 		.word	1073887232
 1421              		.cfi_endproc
 1422              	.LFE150:
 1424              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1425              		.align	2
 1426              		.global	RCC_AHB3PeriphResetCmd
 1427              		.thumb
 1428              		.thumb_func
 1430              	RCC_AHB3PeriphResetCmd:
 1431              	.LFB151:
1767:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1768:.//FWLIB/src/stm32f4xx_rcc.c **** }
1769:.//FWLIB/src/stm32f4xx_rcc.c **** 
1770:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1771:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1772:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1773:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1774:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1775:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1776:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1777:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1778:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1779:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1780:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1432              		.loc 1 1780 0
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 56


 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437              	.LVL145:
1781:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1782:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1783:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1784:.//FWLIB/src/stm32f4xx_rcc.c **** 
1785:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1438              		.loc 1 1785 0
 1439 0000 21B1     		cbz	r1, .L143
1786:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1787:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1440              		.loc 1 1787 0
 1441 0002 054B     		ldr	r3, .L145
 1442 0004 9A69     		ldr	r2, [r3, #24]
 1443 0006 1043     		orrs	r0, r0, r2
 1444              	.LVL146:
 1445 0008 9861     		str	r0, [r3, #24]
 1446 000a 7047     		bx	lr
 1447              	.LVL147:
 1448              	.L143:
1788:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1789:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1790:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1791:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1449              		.loc 1 1791 0
 1450 000c 024A     		ldr	r2, .L145
 1451 000e 9369     		ldr	r3, [r2, #24]
 1452 0010 23EA0000 		bic	r0, r3, r0
 1453              	.LVL148:
 1454 0014 9061     		str	r0, [r2, #24]
 1455 0016 7047     		bx	lr
 1456              	.L146:
 1457              		.align	2
 1458              	.L145:
 1459 0018 00380240 		.word	1073887232
 1460              		.cfi_endproc
 1461              	.LFE151:
 1463              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1464              		.align	2
 1465              		.global	RCC_APB1PeriphResetCmd
 1466              		.thumb
 1467              		.thumb_func
 1469              	RCC_APB1PeriphResetCmd:
 1470              	.LFB152:
1792:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1793:.//FWLIB/src/stm32f4xx_rcc.c **** }
1794:.//FWLIB/src/stm32f4xx_rcc.c **** 
1795:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1796:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1797:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1798:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1799:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1800:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1801:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 57


1802:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1803:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1804:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1805:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1806:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1807:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1808:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1809:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1810:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1811:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1812:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1813:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1814:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1815:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1816:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1817:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1818:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1819:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1820:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1821:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1822:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1823:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
1824:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1825:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1826:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1827:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1828:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1829:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1471              		.loc 1 1829 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 1476              	.LVL149:
1830:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1831:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1832:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1833:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1477              		.loc 1 1833 0
 1478 0000 21B1     		cbz	r1, .L148
1834:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1835:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1479              		.loc 1 1835 0
 1480 0002 054B     		ldr	r3, .L150
 1481 0004 1A6A     		ldr	r2, [r3, #32]
 1482 0006 1043     		orrs	r0, r0, r2
 1483              	.LVL150:
 1484 0008 1862     		str	r0, [r3, #32]
 1485 000a 7047     		bx	lr
 1486              	.LVL151:
 1487              	.L148:
1836:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1837:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1838:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1839:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1488              		.loc 1 1839 0
 1489 000c 024A     		ldr	r2, .L150
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 58


 1490 000e 136A     		ldr	r3, [r2, #32]
 1491 0010 23EA0000 		bic	r0, r3, r0
 1492              	.LVL152:
 1493 0014 1062     		str	r0, [r2, #32]
 1494 0016 7047     		bx	lr
 1495              	.L151:
 1496              		.align	2
 1497              	.L150:
 1498 0018 00380240 		.word	1073887232
 1499              		.cfi_endproc
 1500              	.LFE152:
 1502              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1503              		.align	2
 1504              		.global	RCC_APB2PeriphResetCmd
 1505              		.thumb
 1506              		.thumb_func
 1508              	RCC_APB2PeriphResetCmd:
 1509              	.LFB153:
1840:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1841:.//FWLIB/src/stm32f4xx_rcc.c **** }
1842:.//FWLIB/src/stm32f4xx_rcc.c **** 
1843:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1844:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1845:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1846:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1847:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1848:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1849:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1850:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1851:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1852:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1853:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1854:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1855:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1856:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
1857:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1858:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1859:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1860:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1861:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1862:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1863:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1864:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
1865:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1866:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1867:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1868:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1869:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1870:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1510              		.loc 1 1870 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515              	.LVL153:
1871:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1872:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 59


1873:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1874:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1516              		.loc 1 1874 0
 1517 0000 21B1     		cbz	r1, .L153
1875:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1876:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1518              		.loc 1 1876 0
 1519 0002 054B     		ldr	r3, .L155
 1520 0004 5A6A     		ldr	r2, [r3, #36]
 1521 0006 1043     		orrs	r0, r0, r2
 1522              	.LVL154:
 1523 0008 5862     		str	r0, [r3, #36]
 1524 000a 7047     		bx	lr
 1525              	.LVL155:
 1526              	.L153:
1877:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1878:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1879:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1880:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1527              		.loc 1 1880 0
 1528 000c 024A     		ldr	r2, .L155
 1529 000e 536A     		ldr	r3, [r2, #36]
 1530 0010 23EA0000 		bic	r0, r3, r0
 1531              	.LVL156:
 1532 0014 5062     		str	r0, [r2, #36]
 1533 0016 7047     		bx	lr
 1534              	.L156:
 1535              		.align	2
 1536              	.L155:
 1537 0018 00380240 		.word	1073887232
 1538              		.cfi_endproc
 1539              	.LFE153:
 1541              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1542              		.align	2
 1543              		.global	RCC_AHB1PeriphClockLPModeCmd
 1544              		.thumb
 1545              		.thumb_func
 1547              	RCC_AHB1PeriphClockLPModeCmd:
 1548              	.LFB154:
1881:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1882:.//FWLIB/src/stm32f4xx_rcc.c **** }
1883:.//FWLIB/src/stm32f4xx_rcc.c **** 
1884:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1885:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1886:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1887:.//FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1888:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1889:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1890:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1891:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1892:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1893:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1894:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1895:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1896:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1897:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1898:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 60


1899:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1900:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1901:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1902:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
1903:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1904:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1905:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1906:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1907:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
1908:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1909:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1910:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1911:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1912:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1913:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1914:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1915:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1916:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1917:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1918:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1919:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1549              		.loc 1 1919 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554              	.LVL157:
1920:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1921:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1922:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1923:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1555              		.loc 1 1923 0
 1556 0000 21B1     		cbz	r1, .L158
1924:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1925:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1557              		.loc 1 1925 0
 1558 0002 054B     		ldr	r3, .L160
 1559 0004 1A6D     		ldr	r2, [r3, #80]
 1560 0006 1043     		orrs	r0, r0, r2
 1561              	.LVL158:
 1562 0008 1865     		str	r0, [r3, #80]
 1563 000a 7047     		bx	lr
 1564              	.LVL159:
 1565              	.L158:
1926:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1927:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1928:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1929:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1566              		.loc 1 1929 0
 1567 000c 024A     		ldr	r2, .L160
 1568 000e 136D     		ldr	r3, [r2, #80]
 1569 0010 23EA0000 		bic	r0, r3, r0
 1570              	.LVL160:
 1571 0014 1065     		str	r0, [r2, #80]
 1572 0016 7047     		bx	lr
 1573              	.L161:
 1574              		.align	2
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 61


 1575              	.L160:
 1576 0018 00380240 		.word	1073887232
 1577              		.cfi_endproc
 1578              	.LFE154:
 1580              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1581              		.align	2
 1582              		.global	RCC_AHB2PeriphClockLPModeCmd
 1583              		.thumb
 1584              		.thumb_func
 1586              	RCC_AHB2PeriphClockLPModeCmd:
 1587              	.LFB155:
1930:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1931:.//FWLIB/src/stm32f4xx_rcc.c **** }
1932:.//FWLIB/src/stm32f4xx_rcc.c **** 
1933:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1934:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1935:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1936:.//FWLIB/src/stm32f4xx_rcc.c ****   *           power consumption.
1937:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1938:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1939:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1940:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1941:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1942:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1943:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1944:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1945:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1946:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1947:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1948:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1949:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1950:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1951:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1588              		.loc 1 1951 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592              		@ link register save eliminated.
 1593              	.LVL161:
1952:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1953:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1954:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1955:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1594              		.loc 1 1955 0
 1595 0000 21B1     		cbz	r1, .L163
1956:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1957:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1596              		.loc 1 1957 0
 1597 0002 054B     		ldr	r3, .L165
 1598 0004 5A6D     		ldr	r2, [r3, #84]
 1599 0006 1043     		orrs	r0, r0, r2
 1600              	.LVL162:
 1601 0008 5865     		str	r0, [r3, #84]
 1602 000a 7047     		bx	lr
 1603              	.LVL163:
 1604              	.L163:
1958:.//FWLIB/src/stm32f4xx_rcc.c ****   }
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 62


1959:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1960:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1961:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1605              		.loc 1 1961 0
 1606 000c 024A     		ldr	r2, .L165
 1607 000e 536D     		ldr	r3, [r2, #84]
 1608 0010 23EA0000 		bic	r0, r3, r0
 1609              	.LVL164:
 1610 0014 5065     		str	r0, [r2, #84]
 1611 0016 7047     		bx	lr
 1612              	.L166:
 1613              		.align	2
 1614              	.L165:
 1615 0018 00380240 		.word	1073887232
 1616              		.cfi_endproc
 1617              	.LFE155:
 1619              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1620              		.align	2
 1621              		.global	RCC_AHB3PeriphClockLPModeCmd
 1622              		.thumb
 1623              		.thumb_func
 1625              	RCC_AHB3PeriphClockLPModeCmd:
 1626              	.LFB156:
1962:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1963:.//FWLIB/src/stm32f4xx_rcc.c **** }
1964:.//FWLIB/src/stm32f4xx_rcc.c **** 
1965:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1966:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1967:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1968:.//FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1969:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1970:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1971:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1972:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1973:.//FWLIB/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F429x/439x devices) 
1974:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1975:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1976:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
1977:.//FWLIB/src/stm32f4xx_rcc.c ****   */
1978:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1979:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1627              		.loc 1 1979 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              		@ link register save eliminated.
 1632              	.LVL165:
1980:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1981:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1982:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1983:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1633              		.loc 1 1983 0
 1634 0000 21B1     		cbz	r1, .L168
1984:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1985:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 1635              		.loc 1 1985 0
 1636 0002 054B     		ldr	r3, .L170
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 63


 1637 0004 9A6D     		ldr	r2, [r3, #88]
 1638 0006 1043     		orrs	r0, r0, r2
 1639              	.LVL166:
 1640 0008 9865     		str	r0, [r3, #88]
 1641 000a 7047     		bx	lr
 1642              	.LVL167:
 1643              	.L168:
1986:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1987:.//FWLIB/src/stm32f4xx_rcc.c ****   else
1988:.//FWLIB/src/stm32f4xx_rcc.c ****   {
1989:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1644              		.loc 1 1989 0
 1645 000c 024A     		ldr	r2, .L170
 1646 000e 936D     		ldr	r3, [r2, #88]
 1647 0010 23EA0000 		bic	r0, r3, r0
 1648              	.LVL168:
 1649 0014 9065     		str	r0, [r2, #88]
 1650 0016 7047     		bx	lr
 1651              	.L171:
 1652              		.align	2
 1653              	.L170:
 1654 0018 00380240 		.word	1073887232
 1655              		.cfi_endproc
 1656              	.LFE156:
 1658              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1659              		.align	2
 1660              		.global	RCC_APB1PeriphClockLPModeCmd
 1661              		.thumb
 1662              		.thumb_func
 1664              	RCC_APB1PeriphClockLPModeCmd:
 1665              	.LFB157:
1990:.//FWLIB/src/stm32f4xx_rcc.c ****   }
1991:.//FWLIB/src/stm32f4xx_rcc.c **** }
1992:.//FWLIB/src/stm32f4xx_rcc.c **** 
1993:.//FWLIB/src/stm32f4xx_rcc.c **** /**
1994:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1995:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1996:.//FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
1997:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1998:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1999:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2000:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2001:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2002:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2003:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2004:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2005:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2006:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2007:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2008:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2009:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2010:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2011:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2012:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2013:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2014:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2015:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 64


2016:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2017:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2018:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2019:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2020:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2021:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2022:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2023:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2024:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2025:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2026:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2027:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2028:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2029:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2030:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2031:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1666              		.loc 1 2031 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 1671              	.LVL169:
2032:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2033:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2034:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2035:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1672              		.loc 1 2035 0
 1673 0000 21B1     		cbz	r1, .L173
2036:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2037:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1674              		.loc 1 2037 0
 1675 0002 054B     		ldr	r3, .L175
 1676 0004 1A6E     		ldr	r2, [r3, #96]
 1677 0006 1043     		orrs	r0, r0, r2
 1678              	.LVL170:
 1679 0008 1866     		str	r0, [r3, #96]
 1680 000a 7047     		bx	lr
 1681              	.LVL171:
 1682              	.L173:
2038:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2039:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2040:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2041:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1683              		.loc 1 2041 0
 1684 000c 024A     		ldr	r2, .L175
 1685 000e 136E     		ldr	r3, [r2, #96]
 1686 0010 23EA0000 		bic	r0, r3, r0
 1687              	.LVL172:
 1688 0014 1066     		str	r0, [r2, #96]
 1689 0016 7047     		bx	lr
 1690              	.L176:
 1691              		.align	2
 1692              	.L175:
 1693 0018 00380240 		.word	1073887232
 1694              		.cfi_endproc
 1695              	.LFE157:
 1697              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 65


 1698              		.align	2
 1699              		.global	RCC_APB2PeriphClockLPModeCmd
 1700              		.thumb
 1701              		.thumb_func
 1703              	RCC_APB2PeriphClockLPModeCmd:
 1704              	.LFB158:
2042:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2043:.//FWLIB/src/stm32f4xx_rcc.c **** }
2044:.//FWLIB/src/stm32f4xx_rcc.c **** 
2045:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2046:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2047:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2048:.//FWLIB/src/stm32f4xx_rcc.c ****   *         power consumption.
2049:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2050:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2051:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2052:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2053:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2054:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2055:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2056:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2057:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2058:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2059:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2060:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2061:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2062:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2063:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2064:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2065:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2066:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2067:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2068:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2069:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
2070:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
2071:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2072:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2073:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2074:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2075:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2076:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1705              		.loc 1 2076 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              		@ link register save eliminated.
 1710              	.LVL173:
2077:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2078:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2079:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2080:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1711              		.loc 1 2080 0
 1712 0000 21B1     		cbz	r1, .L178
2081:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2082:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1713              		.loc 1 2082 0
 1714 0002 054B     		ldr	r3, .L180
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 66


 1715 0004 5A6E     		ldr	r2, [r3, #100]
 1716 0006 1043     		orrs	r0, r0, r2
 1717              	.LVL174:
 1718 0008 5866     		str	r0, [r3, #100]
 1719 000a 7047     		bx	lr
 1720              	.LVL175:
 1721              	.L178:
2083:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2084:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2085:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2086:.//FWLIB/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1722              		.loc 1 2086 0
 1723 000c 024A     		ldr	r2, .L180
 1724 000e 536E     		ldr	r3, [r2, #100]
 1725 0010 23EA0000 		bic	r0, r3, r0
 1726              	.LVL176:
 1727 0014 5066     		str	r0, [r2, #100]
 1728 0016 7047     		bx	lr
 1729              	.L181:
 1730              		.align	2
 1731              	.L180:
 1732 0018 00380240 		.word	1073887232
 1733              		.cfi_endproc
 1734              	.LFE158:
 1736              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1737              		.align	2
 1738              		.global	RCC_LSEModeConfig
 1739              		.thumb
 1740              		.thumb_func
 1742              	RCC_LSEModeConfig:
 1743              	.LFB159:
2087:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2088:.//FWLIB/src/stm32f4xx_rcc.c **** }
2089:.//FWLIB/src/stm32f4xx_rcc.c **** 
2090:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2091:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2092:.//FWLIB/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F411xx devices.
2093:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2094:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2095:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2096:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2097:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2098:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2099:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t Mode)
2100:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1744              		.loc 1 2100 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 0, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749              	.LVL177:
2101:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2102:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(Mode));
2103:.//FWLIB/src/stm32f4xx_rcc.c ****   
2104:.//FWLIB/src/stm32f4xx_rcc.c ****   if(Mode == RCC_LSE_HIGHDRIVE_MODE)
 1750              		.loc 1 2104 0
 1751 0000 0128     		cmp	r0, #1
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 67


 1752 0002 05D1     		bne	.L183
2105:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2106:.//FWLIB/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1753              		.loc 1 2106 0
 1754 0004 054A     		ldr	r2, .L185
 1755 0006 136F     		ldr	r3, [r2, #112]
 1756 0008 43F00803 		orr	r3, r3, #8
 1757 000c 1367     		str	r3, [r2, #112]
 1758 000e 7047     		bx	lr
 1759              	.L183:
2107:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2108:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2109:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2110:.//FWLIB/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1760              		.loc 1 2110 0
 1761 0010 024A     		ldr	r2, .L185
 1762 0012 136F     		ldr	r3, [r2, #112]
 1763 0014 23F00803 		bic	r3, r3, #8
 1764 0018 1367     		str	r3, [r2, #112]
 1765 001a 7047     		bx	lr
 1766              	.L186:
 1767              		.align	2
 1768              	.L185:
 1769 001c 00380240 		.word	1073887232
 1770              		.cfi_endproc
 1771              	.LFE159:
 1773              		.section	.text.RCC_ITConfig,"ax",%progbits
 1774              		.align	2
 1775              		.global	RCC_ITConfig
 1776              		.thumb
 1777              		.thumb_func
 1779              	RCC_ITConfig:
 1780              	.LFB160:
2111:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2112:.//FWLIB/src/stm32f4xx_rcc.c **** }
2113:.//FWLIB/src/stm32f4xx_rcc.c **** 
2114:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2115:.//FWLIB/src/stm32f4xx_rcc.c ****   * @}
2116:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2117:.//FWLIB/src/stm32f4xx_rcc.c **** 
2118:.//FWLIB/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2119:.//FWLIB/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2120:.//FWLIB/src/stm32f4xx_rcc.c ****  *
2121:.//FWLIB/src/stm32f4xx_rcc.c **** @verbatim   
2122:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================
2123:.//FWLIB/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
2124:.//FWLIB/src/stm32f4xx_rcc.c ****  ===============================================================================  
2125:.//FWLIB/src/stm32f4xx_rcc.c **** 
2126:.//FWLIB/src/stm32f4xx_rcc.c **** @endverbatim
2127:.//FWLIB/src/stm32f4xx_rcc.c ****   * @{
2128:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2129:.//FWLIB/src/stm32f4xx_rcc.c **** 
2130:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2131:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
2132:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
2133:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2134:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 68


2135:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2136:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2137:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2138:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2139:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
2140:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)
2141:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
2142:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2143:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2144:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2145:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
2146:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1781              		.loc 1 2146 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786              	.LVL178:
2147:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2148:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
2149:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2150:.//FWLIB/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1787              		.loc 1 2150 0
 1788 0000 21B1     		cbz	r1, .L188
2151:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2152:.//FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
2153:.//FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1789              		.loc 1 2153 0
 1790 0002 054B     		ldr	r3, .L190
 1791 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1792 0006 1043     		orrs	r0, r0, r2
 1793              	.LVL179:
 1794 0008 1870     		strb	r0, [r3]
 1795 000a 7047     		bx	lr
 1796              	.LVL180:
 1797              	.L188:
2154:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2155:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2156:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2157:.//FWLIB/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
2158:.//FWLIB/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1798              		.loc 1 2158 0
 1799 000c 024A     		ldr	r2, .L190
 1800 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1801 0010 23EA0000 		bic	r0, r3, r0
 1802              	.LVL181:
 1803 0014 1070     		strb	r0, [r2]
 1804 0016 7047     		bx	lr
 1805              	.L191:
 1806              		.align	2
 1807              	.L190:
 1808 0018 0D380240 		.word	1073887245
 1809              		.cfi_endproc
 1810              	.LFE160:
 1812              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1813              		.align	2
 1814              		.global	RCC_GetFlagStatus
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 69


 1815              		.thumb
 1816              		.thumb_func
 1818              	RCC_GetFlagStatus:
 1819              	.LFB161:
2159:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2160:.//FWLIB/src/stm32f4xx_rcc.c **** }
2161:.//FWLIB/src/stm32f4xx_rcc.c **** 
2162:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2163:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
2164:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
2165:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2166:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
2167:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
2168:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
2169:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
2170:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx devices)
2171:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
2172:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
2173:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
2174:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
2175:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
2176:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
2177:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
2178:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
2179:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
2180:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
2181:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2182:.//FWLIB/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
2183:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1820              		.loc 1 2183 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825              	.LVL182:
2184:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
2185:.//FWLIB/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
2186:.//FWLIB/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
2187:.//FWLIB/src/stm32f4xx_rcc.c **** 
2188:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2189:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
2190:.//FWLIB/src/stm32f4xx_rcc.c **** 
2191:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
2192:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1826              		.loc 1 2192 0
 1827 0000 4309     		lsrs	r3, r0, #5
 1828              	.LVL183:
2193:.//FWLIB/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1829              		.loc 1 2193 0
 1830 0002 012B     		cmp	r3, #1
 1831 0004 02D1     		bne	.L193
2194:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2195:.//FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 1832              		.loc 1 2195 0
 1833 0006 0A4B     		ldr	r3, .L198
 1834              	.LVL184:
 1835 0008 1B68     		ldr	r3, [r3]
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 70


 1836              	.LVL185:
 1837 000a 06E0     		b	.L194
 1838              	.LVL186:
 1839              	.L193:
2196:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2197:.//FWLIB/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1840              		.loc 1 2197 0
 1841 000c 022B     		cmp	r3, #2
 1842 000e 02D1     		bne	.L195
2198:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2199:.//FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 1843              		.loc 1 2199 0
 1844 0010 074B     		ldr	r3, .L198
 1845              	.LVL187:
 1846 0012 1B6F     		ldr	r3, [r3, #112]
 1847              	.LVL188:
 1848 0014 01E0     		b	.L194
 1849              	.LVL189:
 1850              	.L195:
2200:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2201:.//FWLIB/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
2202:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2203:.//FWLIB/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1851              		.loc 1 2203 0
 1852 0016 064B     		ldr	r3, .L198
 1853              	.LVL190:
 1854 0018 5B6F     		ldr	r3, [r3, #116]
 1855              	.LVL191:
 1856              	.L194:
2204:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2205:.//FWLIB/src/stm32f4xx_rcc.c **** 
2206:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Get the flag position */
2207:.//FWLIB/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1857              		.loc 1 2207 0
 1858 001a 00F01F00 		and	r0, r0, #31
 1859              	.LVL192:
2208:.//FWLIB/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1860              		.loc 1 2208 0
 1861 001e 23FA00F0 		lsr	r0, r3, r0
 1862              	.LVL193:
 1863 0022 10F0010F 		tst	r0, #1
 1864 0026 01D0     		beq	.L197
2209:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2210:.//FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 1865              		.loc 1 2210 0
 1866 0028 0120     		movs	r0, #1
 1867 002a 7047     		bx	lr
 1868              	.L197:
2211:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2212:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2213:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2214:.//FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1869              		.loc 1 2214 0
 1870 002c 0020     		movs	r0, #0
 1871              	.LVL194:
2215:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2216:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Return the flag status */
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 71


2217:.//FWLIB/src/stm32f4xx_rcc.c ****   return bitstatus;
2218:.//FWLIB/src/stm32f4xx_rcc.c **** }
 1872              		.loc 1 2218 0
 1873 002e 7047     		bx	lr
 1874              	.L199:
 1875              		.align	2
 1876              	.L198:
 1877 0030 00380240 		.word	1073887232
 1878              		.cfi_endproc
 1879              	.LFE161:
 1881              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1882              		.align	2
 1883              		.global	RCC_WaitForHSEStartUp
 1884              		.thumb
 1885              		.thumb_func
 1887              	RCC_WaitForHSEStartUp:
 1888              	.LFB114:
 288:.//FWLIB/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1889              		.loc 1 288 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 8
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893 0000 00B5     		push	{lr}
 1894              	.LCFI2:
 1895              		.cfi_def_cfa_offset 4
 1896              		.cfi_offset 14, -4
 1897 0002 83B0     		sub	sp, sp, #12
 1898              	.LCFI3:
 1899              		.cfi_def_cfa_offset 16
 289:.//FWLIB/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 1900              		.loc 1 289 0
 1901 0004 0023     		movs	r3, #0
 1902 0006 0193     		str	r3, [sp, #4]
 1903              	.LVL195:
 1904              	.L202:
 295:.//FWLIB/src/stm32f4xx_rcc.c ****     startupcounter++;
 1905              		.loc 1 295 0 discriminator 2
 1906 0008 3120     		movs	r0, #49
 1907 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1908              	.LVL196:
 296:.//FWLIB/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 1909              		.loc 1 296 0 discriminator 2
 1910 000e 019B     		ldr	r3, [sp, #4]
 1911 0010 0133     		adds	r3, r3, #1
 1912 0012 0193     		str	r3, [sp, #4]
 297:.//FWLIB/src/stm32f4xx_rcc.c **** 
 1913              		.loc 1 297 0 discriminator 2
 1914 0014 019B     		ldr	r3, [sp, #4]
 1915 0016 B3F5A04F 		cmp	r3, #20480
 1916 001a 01D0     		beq	.L201
 297:.//FWLIB/src/stm32f4xx_rcc.c **** 
 1917              		.loc 1 297 0 is_stmt 0 discriminator 1
 1918 001c 0028     		cmp	r0, #0
 1919 001e F3D0     		beq	.L202
 1920              	.L201:
 299:.//FWLIB/src/stm32f4xx_rcc.c ****   {
 1921              		.loc 1 299 0 is_stmt 1
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 72


 1922 0020 3120     		movs	r0, #49
 1923              	.LVL197:
 1924 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1925              	.LVL198:
 1926 0026 08B1     		cbz	r0, .L204
 301:.//FWLIB/src/stm32f4xx_rcc.c ****   }
 1927              		.loc 1 301 0
 1928 0028 0120     		movs	r0, #1
 1929 002a 00E0     		b	.L203
 1930              	.L204:
 305:.//FWLIB/src/stm32f4xx_rcc.c ****   }
 1931              		.loc 1 305 0
 1932 002c 0020     		movs	r0, #0
 1933              	.L203:
 1934              	.LVL199:
 308:.//FWLIB/src/stm32f4xx_rcc.c **** 
 1935              		.loc 1 308 0
 1936 002e 03B0     		add	sp, sp, #12
 1937              	.LCFI4:
 1938              		.cfi_def_cfa_offset 4
 1939              		@ sp needed
 1940 0030 5DF804FB 		ldr	pc, [sp], #4
 1941              		.cfi_endproc
 1942              	.LFE114:
 1944              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1945              		.align	2
 1946              		.global	RCC_ClearFlag
 1947              		.thumb
 1948              		.thumb_func
 1950              	RCC_ClearFlag:
 1951              	.LFB162:
2219:.//FWLIB/src/stm32f4xx_rcc.c **** 
2220:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2221:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
2222:.//FWLIB/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
2223:.//FWLIB/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
2224:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  None
2225:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2226:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2227:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
2228:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1952              		.loc 1 2228 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 0
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956              		@ link register save eliminated.
2229:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
2230:.//FWLIB/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1957              		.loc 1 2230 0
 1958 0000 024A     		ldr	r2, .L207
 1959 0002 536F     		ldr	r3, [r2, #116]
 1960 0004 43F08073 		orr	r3, r3, #16777216
 1961 0008 5367     		str	r3, [r2, #116]
 1962 000a 7047     		bx	lr
 1963              	.L208:
 1964              		.align	2
 1965              	.L207:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 73


 1966 000c 00380240 		.word	1073887232
 1967              		.cfi_endproc
 1968              	.LFE162:
 1970              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1971              		.align	2
 1972              		.global	RCC_GetITStatus
 1973              		.thumb
 1974              		.thumb_func
 1976              	RCC_GetITStatus:
 1977              	.LFB163:
2231:.//FWLIB/src/stm32f4xx_rcc.c **** }
2232:.//FWLIB/src/stm32f4xx_rcc.c **** 
2233:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2234:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
2235:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
2236:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2237:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2238:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2239:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2240:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2241:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2242:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt           
2243:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devi
2244:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2245:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
2246:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2247:.//FWLIB/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
2248:.//FWLIB/src/stm32f4xx_rcc.c **** {
 1978              		.loc 1 2248 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983              	.LVL200:
2249:.//FWLIB/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
2250:.//FWLIB/src/stm32f4xx_rcc.c **** 
2251:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2252:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
2253:.//FWLIB/src/stm32f4xx_rcc.c **** 
2254:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
2255:.//FWLIB/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1984              		.loc 1 2255 0
 1985 0000 034B     		ldr	r3, .L212
 1986 0002 DB68     		ldr	r3, [r3, #12]
 1987 0004 1842     		tst	r0, r3
 1988 0006 01D0     		beq	.L211
2256:.//FWLIB/src/stm32f4xx_rcc.c ****   {
2257:.//FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 1989              		.loc 1 2257 0
 1990 0008 0120     		movs	r0, #1
 1991              	.LVL201:
 1992 000a 7047     		bx	lr
 1993              	.LVL202:
 1994              	.L211:
2258:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2259:.//FWLIB/src/stm32f4xx_rcc.c ****   else
2260:.//FWLIB/src/stm32f4xx_rcc.c ****   {
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 74


2261:.//FWLIB/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 1995              		.loc 1 2261 0
 1996 000c 0020     		movs	r0, #0
 1997              	.LVL203:
2262:.//FWLIB/src/stm32f4xx_rcc.c ****   }
2263:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
2264:.//FWLIB/src/stm32f4xx_rcc.c ****   return  bitstatus;
2265:.//FWLIB/src/stm32f4xx_rcc.c **** }
 1998              		.loc 1 2265 0
 1999 000e 7047     		bx	lr
 2000              	.L213:
 2001              		.align	2
 2002              	.L212:
 2003 0010 00380240 		.word	1073887232
 2004              		.cfi_endproc
 2005              	.LFE163:
 2007              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2008              		.align	2
 2009              		.global	RCC_ClearITPendingBit
 2010              		.thumb
 2011              		.thumb_func
 2013              	RCC_ClearITPendingBit:
 2014              	.LFB164:
2266:.//FWLIB/src/stm32f4xx_rcc.c **** 
2267:.//FWLIB/src/stm32f4xx_rcc.c **** /**
2268:.//FWLIB/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
2269:.//FWLIB/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
2270:.//FWLIB/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2271:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2272:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2273:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2274:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2275:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2276:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
2277:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)  
2278:.//FWLIB/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2279:.//FWLIB/src/stm32f4xx_rcc.c ****   * @retval None
2280:.//FWLIB/src/stm32f4xx_rcc.c ****   */
2281:.//FWLIB/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
2282:.//FWLIB/src/stm32f4xx_rcc.c **** {
 2015              		.loc 1 2282 0
 2016              		.cfi_startproc
 2017              		@ args = 0, pretend = 0, frame = 0
 2018              		@ frame_needed = 0, uses_anonymous_args = 0
 2019              		@ link register save eliminated.
 2020              	.LVL204:
2283:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2284:.//FWLIB/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
2285:.//FWLIB/src/stm32f4xx_rcc.c **** 
2286:.//FWLIB/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
2287:.//FWLIB/src/stm32f4xx_rcc.c ****      pending bits */
2288:.//FWLIB/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2021              		.loc 1 2288 0
 2022 0000 014B     		ldr	r3, .L215
 2023 0002 1870     		strb	r0, [r3]
 2024 0004 7047     		bx	lr
 2025              	.L216:
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 75


 2026 0006 00BF     		.align	2
 2027              	.L215:
 2028 0008 0E380240 		.word	1073887246
 2029              		.cfi_endproc
 2030              	.LFE164:
 2032              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2033              		.align	2
 2034              		.set	.LANCHOR0,. + 0
 2037              	APBAHBPrescTable:
 2038 0000 00       		.byte	0
 2039 0001 00       		.byte	0
 2040 0002 00       		.byte	0
 2041 0003 00       		.byte	0
 2042 0004 01       		.byte	1
 2043 0005 02       		.byte	2
 2044 0006 03       		.byte	3
 2045 0007 04       		.byte	4
 2046 0008 01       		.byte	1
 2047 0009 02       		.byte	2
 2048 000a 03       		.byte	3
 2049 000b 04       		.byte	4
 2050 000c 06       		.byte	6
 2051 000d 07       		.byte	7
 2052 000e 08       		.byte	8
 2053 000f 09       		.byte	9
 2054              		.text
 2055              	.Letext0:
 2056              		.file 2 "/Users/ertuil/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 2057              		.file 3 "/Users/ertuil/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 2058              		.file 4 "USER/stm32f4xx.h"
 2059              		.file 5 "FWLIB/inc/stm32f4xx_rcc.h"
 2060              		.file 6 "CORE/core_cm4.h"
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 76


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:22     .text.RCC_DeInit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:27     .text.RCC_DeInit:0000000000000000 RCC_DeInit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:69     .text.RCC_DeInit:000000000000003c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:76     .text.RCC_HSEConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:81     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:99     .text.RCC_HSEConfig:000000000000000c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:104    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:109    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:133    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:138    .text.RCC_HSICmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:143    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:158    .text.RCC_HSICmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:163    .text.RCC_LSEConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:168    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:204    .text.RCC_LSEConfig:0000000000000024 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:209    .text.RCC_LSICmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:214    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:229    .text.RCC_LSICmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:234    .text.RCC_PLLConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:239    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:265    .text.RCC_PLLConfig:000000000000001c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:270    .text.RCC_PLLCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:275    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:290    .text.RCC_PLLCmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:295    .text.RCC_PLLI2SConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:300    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:319    .text.RCC_PLLI2SConfig:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:324    .text.RCC_PLLI2SCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:329    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:344    .text.RCC_PLLI2SCmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:349    .text.RCC_PLLSAIConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:354    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:375    .text.RCC_PLLSAIConfig:0000000000000014 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:380    .text.RCC_PLLSAICmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:385    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:400    .text.RCC_PLLSAICmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:405    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:410    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:425    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:430    .text.RCC_MCO1Config:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:435    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:461    .text.RCC_MCO1Config:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:466    .text.RCC_MCO2Config:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:471    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:497    .text.RCC_MCO2Config:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:502    .text.RCC_SYSCLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:507    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:531    .text.RCC_SYSCLKConfig:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:536    .text.RCC_GetSYSCLKSource:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:541    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:557    .text.RCC_GetSYSCLKSource:000000000000000c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:562    .text.RCC_HCLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:567    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:591    .text.RCC_HCLKConfig:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:596    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 77


/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:601    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:625    .text.RCC_PCLK1Config:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:630    .text.RCC_PCLK2Config:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:635    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:659    .text.RCC_PCLK2Config:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:664    .text.RCC_GetClocksFreq:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:669    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:821    .text.RCC_GetClocksFreq:00000000000000a8 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:829    .text.RCC_RTCCLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:834    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:873    .text.RCC_RTCCLKConfig:000000000000002c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:878    .text.RCC_RTCCLKCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:883    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:898    .text.RCC_RTCCLKCmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:903    .text.RCC_BackupResetCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:908    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:923    .text.RCC_BackupResetCmd:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:928    .text.RCC_I2SCLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:933    .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:948    .text.RCC_I2SCLKConfig:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:953    .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:958    .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:984    .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:989    .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:994    .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1020   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1025   .text.RCC_SAIBlockACLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1030   .text.RCC_SAIBlockACLKConfig:0000000000000000 RCC_SAIBlockACLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1054   .text.RCC_SAIBlockACLKConfig:0000000000000014 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1059   .text.RCC_SAIBlockBCLKConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1064   .text.RCC_SAIBlockBCLKConfig:0000000000000000 RCC_SAIBlockBCLKConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1088   .text.RCC_SAIBlockBCLKConfig:0000000000000014 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1093   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1098   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1122   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1127   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1132   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1147   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1152   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1157   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1186   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1191   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1196   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1225   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1230   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1235   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1264   .text.RCC_AHB3PeriphClockCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1269   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1274   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1303   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1308   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1313   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1342   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1347   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1352   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1381   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1386   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
ARM GAS  /var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s 			page 78


/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1391   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1420   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1425   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1430   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1459   .text.RCC_AHB3PeriphResetCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1464   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1469   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1498   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1503   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1508   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1537   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1542   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1547   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1576   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1581   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1586   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1615   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1620   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1625   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1654   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1659   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1664   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1693   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1698   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1703   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1732   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1737   .text.RCC_LSEModeConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1742   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1769   .text.RCC_LSEModeConfig:000000000000001c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1774   .text.RCC_ITConfig:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1779   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1808   .text.RCC_ITConfig:0000000000000018 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1813   .text.RCC_GetFlagStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1818   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1877   .text.RCC_GetFlagStatus:0000000000000030 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1882   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1887   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1945   .text.RCC_ClearFlag:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1950   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1966   .text.RCC_ClearFlag:000000000000000c $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1971   .text.RCC_GetITStatus:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:1976   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2003   .text.RCC_GetITStatus:0000000000000010 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2008   .text.RCC_ClearITPendingBit:0000000000000000 $t
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2013   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2028   .text.RCC_ClearITPendingBit:0000000000000008 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2033   .data.APBAHBPrescTable:0000000000000000 $d
/var/folders/v3/pl5z0pl12fx5br3g9j_y4ffr0000gn/T//ccDAoDKp.s:2037   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
